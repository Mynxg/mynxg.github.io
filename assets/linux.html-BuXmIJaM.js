import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,h as n,b as l,e as d,o as t}from"./app-LQOk8z_J.js";const p="/assets/image-20221116231427095-qkN1D_Kz.png",r="/assets/image-20221117002336127-CTn9vrZp.png",c="/assets/image-20221117193843478-ImAFzEJC.png",o="/assets/image-20221117193946995-CXQWf5ob.png",h="/assets/image-20221117194250515-mO7MHRC3.png",k="/assets/image-20221117200311623-Bz4cii-7.png",v={};function b(u,s){return t(),a("div",null,[s[0]||(s[0]=i("p",null,[i("code",null,"more"),n(" 注释之前的内容被视为文章摘要。")],-1)),l(" more "),s[1]||(s[1]=d(`<h2 id="一、环境安装" tabindex="-1"><a class="header-anchor" href="#一、环境安装"><span>一、环境安装</span></a></h2><h3 id="_1-jdk安装" tabindex="-1"><a class="header-anchor" href="#_1-jdk安装"><span>1.JDK安装</span></a></h3><p>这里安装JDK版本jdk-8u11-linux-x64.tar.gz</p><p>注：在登录centos服务器之后切换到根（root）目录下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>1.在root权限下，在根目录下创建文件夹</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> mkdir -p /usr/local/java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>切换到/usr/local/java目录下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /usr/local/java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将该jdk-8u11-linux-x64.tar.gz压缩包上传到当前位置</p><p>2.解压jdk-8u11-linux-x64.tar.gz压缩包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tar -zxvf ./jdk-8u11-linux-x64.tar.gz -C /usr/local/java/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后切换到根目录下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.编辑Linux系统中环境变量所在文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>vi /etc/profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4.在文件最后加入环境变量设置，加入后保存文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export JAVA_HOME=/usr/local/java/jdk1.8.0_11 #这是自己的jdk所在位置</span></span>
<span class="line"><span>export</span></span>
<span class="line"><span>CLASSPATH=.:$JAVA_HOME/jre/lib/dt.jar:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jar</span></span>
<span class="line"><span>export PATH=$PATH:$JAVA_HOME/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.让环境变量生效</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>source /etc/profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>6.测试JDK是否已经配置好</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#执行命令</span></span>
<span class="line"><span>java -version</span></span>
<span class="line"><span>#显示如下</span></span>
<span class="line"><span>java version &quot;1.8.0_11&quot;</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment (build 1.8.0_11-b12)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#执行命令</span></span>
<span class="line"><span>javac-version</span></span>
<span class="line"><span>#显示如下</span></span>
<span class="line"><span>javac 1.8.0_11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-docker安装" tabindex="-1"><a class="header-anchor" href="#_2-docker安装"><span>2 .Docker安装</span></a></h2><p>在拉去之前，先配置镜像加速器</p><p>阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了：</p><figure><img src="`+p+`" alt="image-20221116231427095" tabindex="0" loading="lazy"><figcaption>image-20221116231427095</figcaption></figure><p>因为工作的需要,需要把docker 启动后的路径改成/data,所以就会用到:<em>/etc/docker/daemon.json</em> 是docker 的配置<em>文件</em>,默认是没有的,需要我们手动创建,可配置项<em>如下:</em></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#在根目录下</span></span>
<span class="line"><span>cd /</span></span>
<span class="line"><span>#创建docker目录</span></span>
<span class="line"><span>mkdir -p /etc/docker</span></span>
<span class="line"><span># 切换到docker目录下</span></span>
<span class="line"><span>cd /etc/docker</span></span>
<span class="line"><span># 创建daemon.json</span></span>
<span class="line"><span>touch daemon.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开下面的配置文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 在根目录下打开该配置文件</span></span>
<span class="line"><span>vi /etc/docker/daemon.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在/etc/docker/daemon.json文件末尾增加如下内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;registry-mirrors&quot;: [&quot;https://你的ID.mirror.aliyuncs.com&quot;]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>修改完daemon.json文件后，需要让这个文件生效</p><p>a.修改完成后reload配置文件</p><p>sudo systemctl daemon-reload</p><p>b.重启docker服务</p><p>sudo systemctl restart docker.service</p><p>c.查看状态</p><p>sudo systemctl status docker -l</p><p>d.查看服务</p><p>sudo docker info</p></blockquote><p><em><strong>为什么配置这个呢？原因是docker下载镜像速度慢，需要配置国内镜像加速。</strong></em></p><p>Docker可以运行在MAC、Windows、CentOS、UBUNTU等操作系统上，本课程基于CentOS7安装Docker</p><p>官网：https://www.docker.com</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#1、yum包更新到最新</span></span>
<span class="line"><span>yum update</span></span>
<span class="line"><span>#2、安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span>
<span class="line"><span>yum install -y yum-utils device-mapper-persistent-data lvm2</span></span>
<span class="line"><span>#3、设置yum源</span></span>
<span class="line"><span>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span>#4、安装docker，出现输入的界面都按 y</span></span>
<span class="line"><span>yum install -y docker-ce</span></span>
<span class="line"><span>#5、查看docker版本，验证是否验证成功</span></span>
<span class="line"><span>docker -v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1docker命令" tabindex="-1"><a class="header-anchor" href="#_2-1docker命令"><span>2.1docker命令</span></a></h4><p>1.进程相关命令</p><p>启动docker服务:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemctl start docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>停止docker服务:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemctl stop docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重启docker服务:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemctl restart docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看docker服务状态:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemctl status docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>设置开机启动docker服务:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>systemctl enable docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.镜像相关命令</p><p>镜像命令包括如下内容：查看镜像、搜索镜像、拉取镜像、删除镜像</p><p>查看镜像:查看本地所有的镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker images</span></span>
<span class="line"><span>docker images –q #查看所用镜像的id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>搜索镜像:从网络中查找需要的镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker search 镜像名称</span></span>
<span class="line"><span>docker search redis #查找redis镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为名称:版本号，如果版本号不指定则是最新的版本lastest。</p><p>如果不知道镜像版本，可以去dockerhub搜索对应镜像查看。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull 镜像名称</span></span>
<span class="line"><span>docker pull redis #下载最新版本redis</span></span>
<span class="line"><span>docker pull redis:5.0 #下载5.0版本redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除镜像:删除本地镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker rmi 镜像id #删除指定本地镜像</span></span>
<span class="line"><span>docker images -q #查看所有的镜像列表</span></span>
<span class="line"><span>dockerrmi \`docker images -q\` #删除所有本地镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.容器相关命令</p><p>查看容器、创建容器、进入容器、启动容器、停止容器、删除容器、查看容器信息</p><p>查看容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker ps #查看正在运行的容器</span></span>
<span class="line"><span>docker ps –a #查看所有容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建并启动容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run 参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数说明：</p><p>-i：保持容器运行。通常与-t同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p><p>-t：为容器重新分配一个伪输入终端，通常与-i同时使用。</p><p>-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用dockerexec进入容器。退出后，容器不会关闭。</p><p>-it创建的容器一般称为交互式容器，-id创建的容器一般称为守护式容器</p><p>--name：为创建的容器命名。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -it --name=c1 centos:7 /bin/bash #创建交互式容器</span></span>
<span class="line"><span>docker run -id --name=c2 centos:7 #创建守护式容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：交互式容器，exit后容器自动关闭，守护式容器会在后台执行</p><p>进入容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker exec -it c2 /bin/bash #进入容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>停止容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker stop 容器名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>dockerstart容器名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker rm 容器名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看容器信息</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker inspect 容器名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4.Docker容器的数据卷</p><p>....</p><h2 id="_3-docker应用部署" tabindex="-1"><a class="header-anchor" href="#_3-docker应用部署"><span>3.Docker应用部署</span></a></h2><p>3.1MySQL部署</p><p>分析</p><p>容器内的网络服务和外部机器不能直接通信</p><p>外部机器和宿主机可以直接通信宿主机和容器可以直接通信</p><p>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务。</p><p>这种操作称为：<strong>端口映射</strong></p><figure><img src="`+r+`" alt="image-20221117002336127" tabindex="0" loading="lazy"><figcaption>image-20221117002336127</figcaption></figure><p>1.搜索mysql镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker search mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.拉取mysql镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull mysql:5.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#在/root目录下创建mysql目录用于存储mysql数据信息</span></span>
<span class="line"><span>mkdir ~/mysql</span></span>
<span class="line"><span>cd ~/mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -id \\</span></span>
<span class="line"><span>-p 3307:3306 \\</span></span>
<span class="line"><span>--name=c_mysql \\</span></span>
<span class="line"><span>-v $PWD/conf:/etc/mysql/conf.d \\</span></span>
<span class="line"><span>-v $PWD/logs:/logs \\</span></span>
<span class="line"><span>-v $PWD/data:/var/lib/mysql \\</span></span>
<span class="line"><span>-e MYSQL_ROOT_PASSWORD=123456 \\</span></span>
<span class="line"><span>mysql:5.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><p>-p 3307:3306：将容器的3306端口映射到宿主机的3307端口。</p><p>-v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的conf/my.cnf挂载到容器的 /etc/mysql/my.cnf 。配置目录</p><p>-v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs。日志目录</p><p>-v $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</p><p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码。</p><p>4.进入容器，操作</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker exec -it c_mysql /bin/bash</span></span>
<span class="line"><span>mysql -u root -p123456</span></span>
<span class="line"><span>show databases;</span></span>
<span class="line"><span>create database db1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2.Tomcat部署</p><p>1.搜索tomcat镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker search tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.拉取tomcat镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span>
<span class="line"><span>mkdir ~/tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -id --name=c_tomcat \\</span></span>
<span class="line"><span>-p 8080:8080 \\</span></span>
<span class="line"><span>-v $PWD:/usr/local/tomcat/webapps \\</span></span>
<span class="line"><span>tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><p>-p 8080:8080：将容器的8080端口映射到主机的8080端口</p><p>-v $PWD:/usr/local/tomcat/webapps：将主机中当前目录挂载到容器的webapps</p><p>4.使用外部机器访问tomcat</p><p>3.3.Nginx部署</p><p>1.搜索nginx镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker search nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.拉取nginx镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 在root目录下创建nginx目录用于存储nginx数据信息</span></span>
<span class="line"><span>mkdir ~/nginx</span></span>
<span class="line"><span>cd ~/nginx</span></span>
<span class="line"><span>mkdir conf</span></span>
<span class="line"><span>cd conf</span></span>
<span class="line"><span>#在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span>
<span class="line"><span>vim nginx.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>user nginx;</span></span>
<span class="line"><span>worker_processes 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>error_log 	/var/log/nginx/error.log warn;</span></span>
<span class="line"><span>pid 		/var/run/nginx.pid;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>events{</span></span>
<span class="line"><span>	worker_connections 1024;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>http{</span></span>
<span class="line"><span>    include 	/etc/nginx/mime.types;</span></span>
<span class="line"><span>    default_type application/octet-stream;</span></span>
<span class="line"><span>    log_format	main &#39;$remote_addr-$remote_user[$time_local]&quot;$request&quot;&#39;</span></span>
<span class="line"><span>                    &#39;$status$body_bytes_sent&quot;$http_referer&quot;&#39;</span></span>
<span class="line"><span>                    &#39;&quot;$http_user_agent&quot;&quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span>    access_log	/var/log/nginx/access.log main;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    sendfile	on;</span></span>
<span class="line"><span>    #tcp_nopush	on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    keepalive_timeout 65;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #gzip on;</span></span>
<span class="line"><span>    include /etc/nginx/conf.d/*.conf;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令启动nginx容器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -id --name=c_nginx \\</span></span>
<span class="line"><span>-p 80:80 \\</span></span>
<span class="line"><span>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\</span></span>
<span class="line"><span>-v $PWD/logs:/var/log/nginx \\</span></span>
<span class="line"><span>-v $PWD/html:/usr/share/nginx/html \\</span></span>
<span class="line"><span>nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.4.Redis部署</p><p>1.搜索redis镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker search redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.拉取redis镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull redis:5.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -id --name=c_redis -p 6379:6379 redis:5.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4.使用外部机器连接redis</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./redis-cli.exe -h 192.168.220.12 -p 6379</span></span>
<span class="line"><span>keys *</span></span>
<span class="line"><span>set name keney</span></span>
<span class="line"><span>get name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-dockerfile" tabindex="-1"><a class="header-anchor" href="#_4-dockerfile"><span>4.Dockerfile</span></a></h2><p>4.1docker镜像原理：</p><p>思考：</p><p>Docker 镜像本质是什么？</p><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p><p>Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？</p><p>操作系统组成部分：</p><p>进程调度子系统</p><p>进程通信子系统</p><p>内存管理子系统</p><p>设备管理子系统</p><p>文件管理子系统</p><p>网络通信子系统</p><p>作业控制子系统</p><p>Linux文件系统由bootfs和rootfs两部分组成</p><p>bootfs：包含bootloader（引导加载程序）和 kernel（内核） rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</p><p>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</p><figure><img src="`+c+'" alt="image-20221117193843478" tabindex="0" loading="lazy"><figcaption>image-20221117193843478</figcaption></figure><p>docker镜像原理</p><p>Docker镜像是由特殊的文件系统叠加而成</p><p>最底端是 bootfs，并使用宿主机的bootfs</p><p>第二层是 root文件系统rootfs,称为base image 然后再往上可以叠加其他的镜像文件</p><p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的 视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。</p><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p><p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p><figure><img src="'+o+`" alt="image-20221117193946995" tabindex="0" loading="lazy"><figcaption>image-20221117193946995</figcaption></figure><p>回答问题</p><p>1.Docker 镜像本质是什么？ 是一个分层文件系统</p><p>2.Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p><p>Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其 他镜像层</p><p>3.Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？ 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外 暴露的tomcat镜像大小600多MB</p><p>4.2镜像制作</p><p>容器转换镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker commit 容器id 镜像名称:版本号</span></span>
<span class="line"><span>docker save -o 压缩文件名称 镜像名称:版本号</span></span>
<span class="line"><span>docker load –i 压缩文件名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="image-20221117194250515" tabindex="0" loading="lazy"><figcaption>image-20221117194250515</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 创建tomcat镜像</span></span>
<span class="line"><span>docker run -id --name=c_tomcat \\</span></span>
<span class="line"><span>-p 8080:8080 \\</span></span>
<span class="line"><span>-v $PWD:/usr/local/tomcat/webapps \\</span></span>
<span class="line"><span>tomcat</span></span>
<span class="line"><span># 进入tomcat镜像</span></span>
<span class="line"><span>docker exec -it c_tomcat /bin/bash</span></span>
<span class="line"><span>#创建a.txt b.txt</span></span>
<span class="line"><span>cd ~</span></span>
<span class="line"><span>touch a.txt b.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#容器转镜像</span></span>
<span class="line"><span>docker commit 28b8d4dc9744 lxs_tomcat:1.0</span></span>
<span class="line"><span>#压缩镜像</span></span>
<span class="line"><span>docker save -o lxs_tomcat.tar lxs_tomcat:1.0</span></span>
<span class="line"><span>#删除原来镜像</span></span>
<span class="line"><span>docker rmi lxs_tomcat:1.0</span></span>
<span class="line"><span>#从压缩文件加载镜像</span></span>
<span class="line"><span>docker load -i lxs_tomcat.tar</span></span>
<span class="line"><span>#产生镜像</span></span>
<span class="line"><span>docker run -it --name=new_tomcat lxs_tomcat:1.0 /bin/bash</span></span>
<span class="line"><span>#进入查看内容</span></span>
<span class="line"><span>docker exec -it c_tomcat /bin/bash</span></span>
<span class="line"><span>#可以看到a.txt b.txt存在，而webapps/test不存在</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dockerfile</p><p>概念</p><p>Dockerfile 是一个文本文件</p><p>包含了一条条的指令</p><p>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</p><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境</p><p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</p><p>对于运维人员：在部署时，可以实现应用的无缝移植</p><p>参考Dochub网址：https://hub.docker.com ，比如centos和nginx镜像</p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息 用</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在 docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>容器启动命 令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>CMD</td><td>容器启动命 令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来 源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式 ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字 的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可 以挂载的数 据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容 器的时候使用 -v 绑定 格式 VOLUME [&quot;目录&quot;]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格 式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是 绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用 户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候 的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本 身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成 之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量 到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚 本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><hr><p>案例一：</p><p>自定义centos7镜像。</p><p>要求：</p><ol><li>默认登录路径为 /usr</li><li>可以使用vim</li></ol><p>实现步骤</p><p>定义父镜像：FROM centos:7</p><p>定义作者信息：MAINTAINER lxs lxs@lxs.cn</p><p>执行安装vim命令： RUN yum install -y vim</p><p>定义默认的工作目录：WORKDIR /usr</p><p>定义容器启动执行的命令：CMD /bin/bash</p><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#具体代码</span></span>
<span class="line"><span>mkdir ~/docker-files</span></span>
<span class="line"><span>cd ~/docker-files</span></span>
<span class="line"><span>vim centos_dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dockerfile具体内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FROM centos:7</span></span>
<span class="line"><span>MAINTAINER lxs &lt;lxs@lxs.cn&gt;</span></span>
<span class="line"><span>RUN yum install -y vim</span></span>
<span class="line"><span>WORKDIR /usr</span></span>
<span class="line"><span>CMD /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker build -f ./centos_dockerfile -t lxs_centos:1 .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>-f：镜像文件</p><p>-t：新镜像名</p><p>. 寻址路径</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#进入看效果</span></span>
<span class="line"><span>docker run -it --name=c2 lxs_centos:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>案例二：发布springboot项目</p><p>定义父镜像：FROM java:8</p><p>定义作者信息：MAINTAINER lxs lxs@163.com</p><p>将jar包添加到容器： ADD springboot.jar app.jar</p><p>定义容器启动执行的命令：CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</p><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FROM java:8</span></span>
<span class="line"><span>MAINTAINER lxs &lt;lxs@163.com&gt;</span></span>
<span class="line"><span>ADD springboot.jar app.jar</span></span>
<span class="line"><span>CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker bulid –f ./springboot_dockerfile –t app .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -id -p 9000:8080 app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-服务编排" tabindex="-1"><a class="header-anchor" href="#_5-服务编排"><span>5.服务编排</span></a></h2><p>5.1. 概念</p><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启 动停止，维护的工作量会很大。来看下我们日常工作：</p><p>要从Dockerfile build image 或者去dockerhub拉取image</p><p>要创建多个container</p><p>要管理这些container（启动停止删除）</p><p>通过服务编排可以大量简化上面的工作服务编排：按照一定的业务规则批量管理容器</p><p>5.2 Docker Compose</p><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集中管理容器化应用的完整开发周期，包括服务 构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li>使用 docker-compose.yml 定义组成应用的各服务</li><li>运行 docker-compose up 启动应用</li></ol><figure><img src="`+k+`" alt="image-20221117200311623" tabindex="0" loading="lazy"><figcaption>image-20221117200311623</figcaption></figure><p>安装Docker Compose</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以</span></span>
<span class="line"><span>编译好的二进制包方式安装在Linux系统中。</span></span>
<span class="line"><span>curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-\`uname -s\`-</span></span>
<span class="line"><span>\`uname -m\` -o /usr/local/bin/docker-compose</span></span>
<span class="line"><span># 设置文件可执行权限</span></span>
<span class="line"><span>chmod +x /usr/local/bin/docker-compose</span></span>
<span class="line"><span># 查看版本信息</span></span>
<span class="line"><span>docker-compose -version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卸载Docker Compose</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 二进制包方式安装的，删除二进制文件即可</span></span>
<span class="line"><span>rm /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>编排nginx+springboot</p><p>需求：使用nginx反向代理到springboo应用</p><ol><li>创建docker-compose目录</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir ~/docker-compose</span></span>
<span class="line"><span>cd ~/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.编写 docker-compose.yml 文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>version: &#39;3&#39;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>nginx:</span></span>
<span class="line"><span>image: nginx</span></span>
<span class="line"><span>ports:</span></span>
<span class="line"><span>- 80:80</span></span>
<span class="line"><span>links:</span></span>
<span class="line"><span>- app</span></span>
<span class="line"><span>volumes:</span></span>
<span class="line"><span>- ./nginx/conf.d:/etc/nginx/conf.d</span></span>
<span class="line"><span>app:</span></span>
<span class="line"><span>image: app</span></span>
<span class="line"><span>expose:</span></span>
<span class="line"><span>- &quot;8080&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.创建./nginx/conf.d目录</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir -p ./nginx/conf.d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4.在./nginx/conf.d目录下 编写app.conf文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    access_log off;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>  	  proxy_pass http://app:8080/hello;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.在~/docker-compose 目录下 使用docker-compose 启动容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up -d # -d表示已守护模式启动</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="6"><li>测试访问</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http://192.168.220.12/hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_6-docker私有仓库" tabindex="-1"><a class="header-anchor" href="#_6-docker私有仓库"><span>6.Docker私有仓库</span></a></h2><blockquote><p>Docker官方的Docker hub（https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉 取镜像 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们不希望将自己的镜 像放到公网当中， 那么这时我们就需要搭建自己的私有仓库来存储和管理自己的镜像</p></blockquote><p>6.1. 私有仓库搭建</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 1、拉取私有仓库镜像</span></span>
<span class="line"><span>docker pull registry</span></span>
<span class="line"><span># 2、启动私有仓库容器</span></span>
<span class="line"><span>docker run -id --name=registry -p 5000:5000 registry</span></span>
<span class="line"><span># 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到{&quot;repositories&quot;:[]} 表示私有仓</span></span>
<span class="line"><span>库 搭建成功</span></span>
<span class="line"><span># 4、修改daemon.json</span></span>
<span class="line"><span>vim /etc/docker/daemon.json</span></span>
<span class="line"><span># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自</span></span>
<span class="line"><span>己私有仓库服务器真实ip</span></span>
<span class="line"><span>{&quot;insecure-registries&quot;:[&quot;私有仓库服务器ip:5000&quot;]}</span></span>
<span class="line"><span>{&quot;insecure-registries&quot;:[&quot;192.168.220.12:5000&quot;]}</span></span>
<span class="line"><span># 5、重启docker 服务</span></span>
<span class="line"><span>systemctl restart docker</span></span>
<span class="line"><span>docker start registry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.2将镜像上传至私有仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 1、标记镜像为私有仓库的镜像</span></span>
<span class="line"><span>docker tag centos:7 192.168.220.12:5000/centos:7</span></span>
<span class="line"><span># 2、上传标记的镜像</span></span>
<span class="line"><span>docker push 192.168.220.12:5000/centos:7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从私有仓库拉取镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#拉取镜像</span></span>
<span class="line"><span>docker pull 192.168.220.12:5000/centos:7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="附件" tabindex="-1"><a class="header-anchor" href="#附件"><span>附件</span></a></h2><p>参考：https://www.cnblogs.com/yakniu/p/16329611.html</p><p>参考：服务端口占用情况：https://www.leixue.com/qa/how-does-centos-check-port-occupancy</p><p>参考mysql数据库问题：</p><p>【MySql】Navicat 连接数据库出现1251 - Client does not support authentication protocol ...... 问题的解决方法：</p><p>https://blog.csdn.net/pengfeng111833/article/details/124399404</p><p>https://blog.csdn.net/piupiu78/article/details/122468163</p>`,266))])}const A=e(v,[["render",b],["__file","linux.html.vue"]]),y=JSON.parse('{"path":"/notes/linux/linux.html","title":"centos7.9使用","lang":"zh-CN","frontmatter":{"title":"centos7.9使用","icon":"feather-pointed","order":1,"author":"nxg","date":"2022-11-16T00:00:00.000Z","category":["linux"],"tag":["后端","linux"],"description":"more 注释之前的内容被视为文章摘要。","gitInclude":[],"head":[["link",{"rel":"canonical","href":"https://blogs.lxip.top/notes/linux/linux.html"}],["meta",{"property":"og:url","content":"https://blog.lxip.top/notes/linux/linux.html"}],["meta",{"property":"og:site_name","content":"所遇所思"}],["meta",{"property":"og:title","content":"centos7.9使用"}],["meta",{"property":"og:description","content":"more 注释之前的内容被视为文章摘要。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"nxg"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2022-11-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"centos7.9使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"nxg\\"}]}"]]},"headers":[{"level":2,"title":"一、环境安装","slug":"一、环境安装","link":"#一、环境安装","children":[{"level":3,"title":"1.JDK安装","slug":"_1-jdk安装","link":"#_1-jdk安装","children":[]}]},{"level":2,"title":"2 .Docker安装","slug":"_2-docker安装","link":"#_2-docker安装","children":[]},{"level":2,"title":"3.Docker应用部署","slug":"_3-docker应用部署","link":"#_3-docker应用部署","children":[]},{"level":2,"title":"4.Dockerfile","slug":"_4-dockerfile","link":"#_4-dockerfile","children":[]},{"level":2,"title":"5.服务编排","slug":"_5-服务编排","link":"#_5-服务编排","children":[]},{"level":2,"title":"6.Docker私有仓库","slug":"_6-docker私有仓库","link":"#_6-docker私有仓库","children":[]},{"level":2,"title":"附件","slug":"附件","link":"#附件","children":[]}],"readingTime":{"minutes":15.83,"words":4750},"filePathRelative":"notes/linux/linux.md","localizedDate":"2022年11月16日","excerpt":"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\\n","autoDesc":true}');export{A as comp,y as data};
