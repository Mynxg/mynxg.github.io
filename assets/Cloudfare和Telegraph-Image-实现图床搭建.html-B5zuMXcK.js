import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as l,o as i}from"./app-CjLBtuDw.js";const n={};function p(r,e){return i(),t("div",null,e[0]||(e[0]=[l(`<blockquote><p>基于Cloudflare Pages服务和开源图床项目Telegraph来实现免费使用图床。</p><p>核心原理就是利用Cloudflare Workers和Pages的免费额度，将图床系统和图片储存都托管在Cloudflare网络中，从而实现一毛不拔</p></blockquote><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>想有个免费、稳定、访问速度还可以的，并且就算图片丢失也没问题的图床工具，于是就有了Telegraph-Image。</p><h2 id="部署和配置" tabindex="-1"><a class="header-anchor" href="#部署和配置"><span>部署和配置</span></a></h2><h3 id="fork-仓库-和-部署telegraph-image-静态资源" tabindex="-1"><a class="header-anchor" href="#fork-仓库-和-部署telegraph-image-静态资源"><span>fork 仓库 和 部署Telegraph-Image 静态资源</span></a></h3><p>将 <a href="https://github.com/cf-pages/Telegraph-Image" target="_blank" rel="noopener noreferrer">https://github.com/cf-pages/Telegraph-Image</a> 这个仓库克隆到自己的仓库，然后通过cloudfare中Workers &amp; Pages ，将克隆好的Github仓库关联，然后进行部署，基本上是点下一步下一步。</p><p>首先点击创建一个应用( create application )： <img src="https://img.nnxx.me/file/0a4d1702892892007890c.png" alt="" loading="lazy"></p><p>选择 Pages ，点击关联自己的Github仓库，然后选择克隆后的 Telegraph-Image 仓库 <img src="https://img.nnxx.me/file/94ae08aabc2a6fe4ee91c.png" alt="" loading="lazy"></p><p>点击 Telegraph-Image 仓库，然后部署即可。</p><figure><img src="https://img.nnxx.me/file/e2ac933717a0c9840efb4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>部署后的效果图： <img src="https://img.nnxx.me/file/e1fcfc5881514a4f02961.png" alt="" loading="lazy"></p><p>配置环境变量：BASIC_USER、BASIC_PASS、ModerateContentApiKey</p><blockquote><p>用于图床后台管理</p><p>BASIC_USER：用户名</p><p>BASIC_PASS：密码</p><p>ModerateContentApiKey： 用于图片内容审查的API</p></blockquote><p>ModerateContentApiKey获取地址API的key：<a href="moderatecontent.com">moderatecontent.com</a></p><figure><img src="https://img.nnxx.me/file/1c59abff1132c1fdf0955.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="创建-kv-存储空间" tabindex="-1"><a class="header-anchor" href="#创建-kv-存储空间"><span>创建 KV 存储空间</span></a></h3><p>然后需要创建 KV 作为图片的存储空间</p><p>创建 命名空间： <img src="https://img.nnxx.me/file/529ea5cd707af55ca1756.png" alt="" loading="lazy"></p><p>效果： <img src="https://img.nnxx.me/file/296e6c1b13d4478a3c8ac.png" alt="" loading="lazy"></p><p>找到Functions（函数）---&gt; KV name space bindings ----&gt; Production ，点击 Edit bindings (编辑绑定)，添加绑定 KV 的命名空间的变量名和变量值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Variable name        KV  namespace</span></span>
<span class="line"><span>img_url                  img_url</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>KV namespace获取的地方就是刚刚创建的 KV 的命名空间</p></blockquote><figure><img src="https://img.nnxx.me/file/6bfb90aadb091fed56cac.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后，就需要重新部署即可使配置生效。 <img src="https://img.nnxx.me/file/48603ba898bf2851a4b35.png" alt="" loading="lazy"></p><h2 id="定制域名" tabindex="-1"><a class="header-anchor" href="#定制域名"><span>定制域名</span></a></h2><p>找到telegraph-image部署后的地方，点击 Custom domains(定制域名)，然后选择 Set up a custom domain ，</p><figure><img src="https://img.nnxx.me/file/fb1d1d01a2f8b9564b30a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入自己的域名（不限于二级域名），然后点击下一步。 <img src="https://img.nnxx.me/file/3543247c76749c360aa9e.png" alt="" loading="lazy"></p><h2 id="登录图床后台" tabindex="-1"><a class="header-anchor" href="#登录图床后台"><span>登录图床后台</span></a></h2><p>后台地址示例：https://telegraph-image-xxx.pages.dev/admin</p><blockquote><p>根据自己的时间情况而定，比如你这仓库绑定的域名是 img.a.com</p><p>那么后台地址就是： https://img.a.com/admin</p><p>然后输入上述配置的环境变量中的用户名和密码</p></blockquote><h2 id="附件" tabindex="-1"><a class="header-anchor" href="#附件"><span>附件</span></a></h2><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s/hbpCxE3dYZY1sgt2H3JffA" target="_blank" rel="noopener noreferrer">保姆级教程：使用Cloudflare+Telegraph搭建零成本图床系统 (qq.com)</a></p><p>项目地址：<a href="https://github.com/cf-pages/Telegraph-Image" target="_blank" rel="noopener noreferrer">https://github.com/cf-pages/Telegraph-Image</a></p></blockquote>`,33)]))}const s=a(n,[["render",p],["__file","Cloudfare和Telegraph-Image-实现图床搭建.html.vue"]]),c=JSON.parse('{"path":"/questionskills/techguide/Cloudfare%E5%92%8CTelegraph-Image-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html","title":"Cloudfare和Telegraph-Image-实现图床搭建","lang":"zh-CN","frontmatter":{"title":"Cloudfare和Telegraph-Image-实现图床搭建","toc":true,"icon":"feather-pointed","category":["图床"],"tag":["Cloudfare","Telegraph-Image","Github"],"sticky":false,"star":true,"article":true,"timeline":true,"date":"2023-10-15T09:49:00.000Z","description":"基于Cloudflare Pages服务和开源图床项目Telegraph来实现免费使用图床。 核心原理就是利用Cloudflare Workers和Pages的免费额度，将图床系统和图片储存都托管在Cloudflare网络中，从而实现一毛不拔 背景 想有个免费、稳定、访问速度还可以的，并且就算图片丢失也没问题的图床工具，于是就有了Telegraph-I...","gitInclude":[],"head":[["link",{"rel":"canonical","href":"https://blogs.lxip.top/questionskills/techguide/Cloudfare%E5%92%8CTelegraph-Image-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:url","content":"https://blog.lxip.top/questionskills/techguide/Cloudfare%E5%92%8CTelegraph-Image-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"所遇所思"}],["meta",{"property":"og:title","content":"Cloudfare和Telegraph-Image-实现图床搭建"}],["meta",{"property":"og:description","content":"基于Cloudflare Pages服务和开源图床项目Telegraph来实现免费使用图床。 核心原理就是利用Cloudflare Workers和Pages的免费额度，将图床系统和图片储存都托管在Cloudflare网络中，从而实现一毛不拔 背景 想有个免费、稳定、访问速度还可以的，并且就算图片丢失也没问题的图床工具，于是就有了Telegraph-I..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.nnxx.me/file/0a4d1702892892007890c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Cloudfare"}],["meta",{"property":"article:tag","content":"Telegraph-Image"}],["meta",{"property":"article:tag","content":"Github"}],["meta",{"property":"article:published_time","content":"2023-10-15T09:49:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cloudfare和Telegraph-Image-实现图床搭建\\",\\"image\\":[\\"https://img.nnxx.me/file/0a4d1702892892007890c.png\\",\\"https://img.nnxx.me/file/94ae08aabc2a6fe4ee91c.png\\",\\"https://img.nnxx.me/file/e2ac933717a0c9840efb4.png\\",\\"https://img.nnxx.me/file/e1fcfc5881514a4f02961.png\\",\\"https://img.nnxx.me/file/1c59abff1132c1fdf0955.png\\",\\"https://img.nnxx.me/file/529ea5cd707af55ca1756.png\\",\\"https://img.nnxx.me/file/296e6c1b13d4478a3c8ac.png\\",\\"https://img.nnxx.me/file/6bfb90aadb091fed56cac.png\\",\\"https://img.nnxx.me/file/48603ba898bf2851a4b35.png\\",\\"https://img.nnxx.me/file/fb1d1d01a2f8b9564b30a.png\\",\\"https://img.nnxx.me/file/3543247c76749c360aa9e.png\\"],\\"datePublished\\":\\"2023-10-15T09:49:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.keney\\",\\"url\\":\\"https://github.com/mynxg\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"部署和配置","slug":"部署和配置","link":"#部署和配置","children":[{"level":3,"title":"fork 仓库 和 部署Telegraph-Image 静态资源","slug":"fork-仓库-和-部署telegraph-image-静态资源","link":"#fork-仓库-和-部署telegraph-image-静态资源","children":[]},{"level":3,"title":"创建 KV 存储空间","slug":"创建-kv-存储空间","link":"#创建-kv-存储空间","children":[]}]},{"level":2,"title":"定制域名","slug":"定制域名","link":"#定制域名","children":[]},{"level":2,"title":"登录图床后台","slug":"登录图床后台","link":"#登录图床后台","children":[]},{"level":2,"title":"附件","slug":"附件","link":"#附件","children":[]}],"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"questionskills/techguide/Cloudfare和Telegraph-Image-实现图床搭建.md","localizedDate":"2023年10月15日","excerpt":"","autoDesc":true}');export{s as comp,c as data};
