import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,f as i,d as r,e as l,h as o,r as p,o as d}from"./app-tMjQf_mi.js";const c={};function h(g,e){const a=p("RouteLink");return d(),s("div",null,[e[2]||(e[2]=t("h2",{id:"前置知识",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前置知识"},[t("span",null,"前置知识")])],-1)),t("p",null,[e[1]||(e[1]=i("需要对git命令比较熟悉，可以参考")),r(a,{to:"/java/git/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4.html"},{default:l(()=>e[0]||(e[0]=[i("常用的git命令")])),_:1})]),e[3]||(e[3]=o(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><blockquote><p>练习的项目比较多，但存放于公司电脑并不是一个合适的选择（不方便随处查看）</p></blockquote><p>再加上近期对 Git 使用比较多，就萌生了将项目传到 GitHub 仓库中进行管理<br> 起初想法是在一个仓库中建立文件夹来区分项目，后来感觉并不合适（每次从别处看的时候整个分支上的内容全clone下来了）<br> 最后发现 orphan 分支（将N个完全不同的项目作为N个分支放在同一个仓库中, 并且分支之间互不影响）完全可以解决该问题</p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤"><span>具体步骤</span></a></h2><blockquote><p>在一个git仓库下操作如下的命令</p></blockquote><p>创建orphan分支</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" data-title="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout --orphan [分支名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>这就是创建orphan类型的分支<br> 为什么使用orphan类型的分支<br> 原因：将N个完全不同的项目作为N个分支放在同一个仓库中, 并且分支之间互不影响<br> git checkout --orphan的核心用途是在非新存储库上以类似git init的状态创建分支</p></blockquote><p>检查分支状态</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>会列出<strong>本地</strong>所有的分支</p></blockquote><p>提交代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git add ./</span></span>
<span class="line"><span>git commit -m &quot;commit branch&quot;</span></span>
<span class="line"><span>git push orgin [分支名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为什么push？<br> 因为本地创建了该分支后还需要提交到远程仓库，才算是真正的创建新的分支</p></blockquote><p>注意：</p><blockquote><p>创建其他orphan分支时，建议切换回主分支以后再新建 orphan 分支</p></blockquote><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h2><p>切换分支：</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" data-title="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout [分支名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从当前分支创建新分支：</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" data-title="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git checkout -b [新分支名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>此时新的分支会有当前分支的所有文件</p></blockquote><h2 id="附件" tabindex="-1"><a class="header-anchor" href="#附件"><span>附件</span></a></h2><p>参考：<a href="https://blog.csdn.net/Wrysmile0308/article/details/119619702" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Wrysmile0308/article/details/119619702</a></p><p>参考2：<a href="https://www.cnblogs.com/asdfq/p/13277559.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/asdfq/p/13277559.html</a></p><p>参考3：<a href="https://www.codenong.com/19980631/#:~:text=git%20checkout%20--orphan,%E7%9A%84%E6%A0%B8%E5%BF%83%E7%94%A8%E9%80%94%E6%98%AF%E5%9C%A8%E9%9D%9E%E6%96%B0%E5%AD%98%E5%82%A8%E5%BA%93%E4%B8%8A%E4%BB%A5%E7%B1%BB%E4%BC%BC%20git%20init%20%E7%9A%84%E7%8A%B6%E6%80%81%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E3%80%82" target="_blank" rel="noopener noreferrer">git checkout –orphan是做什么用的</a></p>`,26))])}const k=n(c,[["render",h],["__file","gitHub-manage-project.html.vue"]]),m=JSON.parse('{"path":"/java/git/gitHub-manage-project.html","title":"GitHub单仓库管理多项目","lang":"zh-CN","frontmatter":{"title":"GitHub单仓库管理多项目","icon":"feather-pointed","category":["运维"],"tag":["git"],"sticky":false,"star":false,"article":true,"timeline":true,"order":1,"date":"2023-04-16T00:00:00.000Z","author":"nxg","gitInclude":[],"description":"前置知识 需要对git命令比较熟悉，可以参考 背景 练习的项目比较多，但存放于公司电脑并不是一个合适的选择（不方便随处查看） 再加上近期对 Git 使用比较多，就萌生了将项目传到 GitHub 仓库中进行管理 起初想法是在一个仓库中建立文件夹来区分项目，后来感觉并不合适（每次从别处看的时候整个分支上的内容全clone下来了） 最后发现 orphan 分...","head":[["meta",{"property":"og:url","content":"https://blog.lxip.top/java/git/gitHub-manage-project.html"}],["meta",{"property":"og:site_name","content":"所遇所思"}],["meta",{"property":"og:title","content":"GitHub单仓库管理多项目"}],["meta",{"property":"og:description","content":"前置知识 需要对git命令比较熟悉，可以参考 背景 练习的项目比较多，但存放于公司电脑并不是一个合适的选择（不方便随处查看） 再加上近期对 Git 使用比较多，就萌生了将项目传到 GitHub 仓库中进行管理 起初想法是在一个仓库中建立文件夹来区分项目，后来感觉并不合适（每次从别处看的时候整个分支上的内容全clone下来了） 最后发现 orphan 分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"nxg"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2023-04-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHub单仓库管理多项目\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"nxg\\"}]}"]]},"headers":[{"level":2,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"具体步骤","slug":"具体步骤","link":"#具体步骤","children":[]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[]},{"level":2,"title":"附件","slug":"附件","link":"#附件","children":[]}],"readingTime":{"minutes":2,"words":601},"filePathRelative":"java/git/gitHub-manage-project.md","localizedDate":"2023年4月16日","excerpt":"","autoDesc":true}');export{k as comp,m as data};
