import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as s,o as t}from"./app-CuP6NJm0.js";const n={};function l(r,e){return t(),i("div",null,e[0]||(e[0]=[s(`<p>使用ssh方式拉取gitlab仓库代码</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>在公司mac电脑上需要将gitee仓库代码迁移到公司gitlab代码仓库中，而我习惯使用ssh方式关联git仓库。我也喜欢使用下面简单粗暴的方式来配置git，之前玩git在window10系统上玩的比较多，各种操作都玩过，比如：创建分支、切换分支、分支代码合并、单文件历史查看、当前文件与上一个版本文件进行比对、各个分支各自的用处等。 再扯点，我使用过idea和Android提交代码，并且它们提交的方式差不多，我也使用svn提交代码，但觉得并不优雅。我通常使用两种方式来提交代码，一种是命令方式、一种是可视化方式，点点就行。高级一点的方式就是Sourcetree。</p><h2 id="执行步骤" tabindex="-1"><a class="header-anchor" href="#执行步骤"><span>执行步骤</span></a></h2><h3 id="_1、配置" tabindex="-1"><a class="header-anchor" href="#_1、配置"><span>1、配置</span></a></h3><blockquote><p><strong>以下命令</strong>都是在终端中进入 /Users/<strong>用户/.ssh目录下</strong>执行下面的命令：</p></blockquote><p>1.1手动方式配置 config文件</p><blockquote><p>.ssh/目录下，如果没有config文件，需要创建一个config 创建命令方式：touch config</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># gitlab</span></span>
<span class="line"><span>Host gitlab.com</span></span>
<span class="line"><span>  HostName gitlab.com </span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa_gitlab</span></span>
<span class="line"><span>  User usertest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.gitconfig文件</p><blockquote><p>用户目录下，根据实际情况查找</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[user]</span></span>
<span class="line"><span>	name = usertest</span></span>
<span class="line"><span>	email = test@qq.com</span></span>
<span class="line"><span>[core]</span></span>
<span class="line"><span>	autocrlf = input</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>windows 和 Mac 协同开发，会碰到一个问题:<br> 提示修改 git core.autocrlf，<br> 这个是由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符， 一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。</p><p>参考：<a href="https://blog.csdn.net/u012364372/article/details/123215289" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012364372/article/details/123215289</a></p><p>在Mac上设置 autocrlf = input, 在Windows上设置autocrlf = true（默认值）</p></blockquote><p>1.2 命令方式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git config --global user.name &quot;your_name&quot; </span></span>
<span class="line"><span>git config --global user.email &quot;your_email@qq.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、生成秘钥" tabindex="-1"><a class="header-anchor" href="#_2、生成秘钥"><span>2、生成秘钥</span></a></h3><p>生成秘钥：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ssh-keygen -t rsa -C &quot;your_email@qq.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>具体git配置ssh秘钥请移步：<a href="https://blog.nnxx.me/posts/e238cc11.html" target="_blank" rel="noopener noreferrer">git账号多配置</a></p></blockquote><h3 id="_3、验证是否成功" tabindex="-1"><a class="header-anchor" href="#_3、验证是否成功"><span>3、验证是否成功</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ssh git@gitlab.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>自建的gitlab仓库地址不同，根据实际情况更改。</p></blockquote><h3 id="_4、在gitlab远程仓库配置ssh秘钥" tabindex="-1"><a class="header-anchor" href="#_4、在gitlab远程仓库配置ssh秘钥"><span>4、在gitlab远程仓库配置ssh秘钥</span></a></h3><p>参考：<a href="https://blog.csdn.net/XX_123_1_RJ/article/details/103332668" target="_blank" rel="noopener noreferrer">Mac 配置Git与常用命令_mac git配置</a></p><blockquote><p>不同版本的gitlab的SSH keys秘钥配置位置有细微的差别，自行在设置中找到</p></blockquote><h2 id="附件" tabindex="-1"><a class="header-anchor" href="#附件"><span>附件</span></a></h2><p>参考：<a href="https://blog.csdn.net/nxg0916/article/details/135911954" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/nxg0916/article/details/135911954</a></p><p><a href="https://blog.nnxx.me/posts/e238cc11.html" target="_blank" rel="noopener noreferrer">git账号多配置</a></p><p><a href="https://blog.nnxx.me/posts/de0da321.html" target="_blank" rel="noopener noreferrer">git提交代码到本地分支</a></p><p>再啰嗦点：</p><p>提交代码最关键的几步：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git status</span></span>
<span class="line"><span>git pull</span></span>
<span class="line"><span>git status</span></span>
<span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &quot;描述&quot;</span></span>
<span class="line"><span>git push</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在提交代码之前，先拉取代码，再提交代码。</p></blockquote>`,33)]))}const c=a(n,[["render",l],["__file","mac配置gitlab.html.vue"]]),d=JSON.parse('{"path":"/notes/git/mac%E9%85%8D%E7%BD%AEgitlab.html","title":"mac配置gitlab","lang":"zh-CN","frontmatter":{"title":"mac配置gitlab","icon":"feather-pointed","date":"2024-01-31T00:00:00.000Z","category":["git"],"tag":["git","gitlab"],"description":"使用ssh方式拉取gitlab仓库代码 背景 在公司mac电脑上需要将gitee仓库代码迁移到公司gitlab代码仓库中，而我习惯使用ssh方式关联git仓库。我也喜欢使用下面简单粗暴的方式来配置git，之前玩git在window10系统上玩的比较多，各种操作都玩过，比如：创建分支、切换分支、分支代码合并、单文件历史查看、当前文件与上一个版本文件进行比...","gitInclude":[],"head":[["link",{"rel":"canonical","href":"https://blogs.lxip.top/notes/git/mac%E9%85%8D%E7%BD%AEgitlab.html"}],["meta",{"property":"og:url","content":"https://blog.lxip.top/notes/git/mac%E9%85%8D%E7%BD%AEgitlab.html"}],["meta",{"property":"og:site_name","content":"所遇所思"}],["meta",{"property":"og:title","content":"mac配置gitlab"}],["meta",{"property":"og:description","content":"使用ssh方式拉取gitlab仓库代码 背景 在公司mac电脑上需要将gitee仓库代码迁移到公司gitlab代码仓库中，而我习惯使用ssh方式关联git仓库。我也喜欢使用下面简单粗暴的方式来配置git，之前玩git在window10系统上玩的比较多，各种操作都玩过，比如：创建分支、切换分支、分支代码合并、单文件历史查看、当前文件与上一个版本文件进行比..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"gitlab"}],["meta",{"property":"article:published_time","content":"2024-01-31T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mac配置gitlab\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.keney\\",\\"url\\":\\"https://github.com/mynxg\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"执行步骤","slug":"执行步骤","link":"#执行步骤","children":[{"level":3,"title":"1、配置","slug":"_1、配置","link":"#_1、配置","children":[]},{"level":3,"title":"2、生成秘钥","slug":"_2、生成秘钥","link":"#_2、生成秘钥","children":[]},{"level":3,"title":"3、验证是否成功","slug":"_3、验证是否成功","link":"#_3、验证是否成功","children":[]},{"level":3,"title":"4、在gitlab远程仓库配置ssh秘钥","slug":"_4、在gitlab远程仓库配置ssh秘钥","link":"#_4、在gitlab远程仓库配置ssh秘钥","children":[]}]},{"level":2,"title":"附件","slug":"附件","link":"#附件","children":[]}],"readingTime":{"minutes":2.25,"words":676},"filePathRelative":"notes/git/mac配置gitlab.md","localizedDate":"2024年1月31日","excerpt":"","autoDesc":true}');export{c as comp,d as data};
