<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://blog.lxip.top/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://blog.lxip.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>所遇所思</title>
    <link>https://blog.lxip.top/</link>
    <description>记录笔记</description>
    <language>zh-CN</language>
    <pubDate>Sat, 08 Apr 2023 13:34:14 GMT</pubDate>
    <lastBuildDate>Sat, 08 Apr 2023 13:34:14 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>图床</category>
    <category>运维</category>
    <category>mysql</category>
    <category>linux</category>
    <category>生活</category>
    <category>Java</category>
    <category>实战项目</category>
    <category>软件教程</category>
    <category>系统设计</category>
    <category>技术教程</category>
    <category>书籍</category>
    <category>快速导航</category>
    <category>编程知识库</category>
    <category>影视</category>
    <category>音乐</category>
    <category>算法</category>
    <category>数据结构</category>
    <category>Netty</category>
    <category>网络编程</category>
    <category>java</category>
    <category>后端</category>
    <category>javaweb</category>
    <item>
      <title>PicGo配置多图床仓库</title>
      <link>https://blog.lxip.top/questionskills/techguide/picgo%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%9B%BE%E5%BA%8A.html</link>
      <guid>https://blog.lxip.top/questionskills/techguide/picgo%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%9B%BE%E5%BA%8A.html</guid>
      <source url="https://blog.lxip.top/rss.xml">PicGo配置多图床仓库</source>
      <description>背景 想使用不需要直接购买服务器就可以存储图片，并且可以很方便使用外链访问到图片资源。这里就有了typora+PicGo两者结合的工具 PicGo配置多图床 以七牛云为例： 官网：https://portal.qiniu.com/ 七牛云有10G免费存储空间和10G CDN静态资源加速 注意：CDN超额会需要付费的。 参考此文：配置手册 | PicGo...</description>
      <category>图床</category>
      <pubDate>Sat, 08 Apr 2023 14:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 背景</h2>
<p>想使用不需要直接购买服务器就可以存储图片，并且可以很方便使用外链访问到图片资源。这里就有了typora+PicGo两者结合的工具</p>
<h2> PicGo配置多图床</h2>
<p>以七牛云为例：</p>
<blockquote>
<p>官网：<a href="https://portal.qiniu.com/" target="_blank" rel="noopener noreferrer">https://portal.qiniu.com/</a></p>
<p>七牛云有10G免费存储空间和10G CDN静态资源加速</p>
<p>注意：CDN超额会需要付费的。</p>
</blockquote>
<p>参考此文：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener noreferrer">配置手册 | PicGo</a></p>
<p>PicGo配置如下图：</p>
<figure><figcaption>image-20230408153157066</figcaption></figure>
<p>个人密钥：</p>
<p>参考：<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener noreferrer">七牛云 - 密钥管理 (qiniu.com)</a></p>
<figure><figcaption>image-20230408153612643</figcaption></figure>
<p>空间名称：</p>
<p>我自定义的空间名称为：<strong>nxg-img</strong></p>
<figure><figcaption>image-20230408153712120</figcaption></figure>
<p>存储区域参考这里：<a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq" target="_blank" rel="noopener noreferrer">存储区域_产品简介_对象存储 - 七牛开发者中心 (qiniu.com)</a></p>
<p>图片存储路径：</p>
<p>我使用typora编辑器，就自定义了 <strong>typora</strong>目录</p>
<figure><figcaption>image-20230408153902349</figcaption></figure>
<blockquote>
<p>注意：</p>
<p>自定义域名，免费的的cdn只提供http协议，使用外链域名时，需要填写http，而不是https</p>
<p>网址后缀的作用是：用到了七牛的图片处理工具的时候会用到的一些处理参数，比如图片瘦身</p>
</blockquote>
<p>如图：</p>
<figure><figcaption>image-20230408154227916</figcaption></figure>
<p>域名绑定：</p>
<p>自己购买的域名，如果没有可以使用官方提供的。</p>
<figure><figcaption>image-20230408160523741</figcaption></figure>
<h2> 扩展</h2>
<p>GitHub图床配置</p>
<figure><figcaption>image-20230408155030702</figcaption></figure>
<p>cdn加速GitHub图床：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener noreferrer">GitHub配置 | PicGo</a></p>
<p>gitee图床配置：</p>
<figure><figcaption>image-20230408155204806</figcaption></figure>
<p>参考：<a href="https://github.com/lizhuangs/picgo-plugin-gitee-uploader.git" target="_blank" rel="noopener noreferrer">https://github.com/lizhuangs/picgo-plugin-gitee-uploader.git</a></p>
<h2> 附件</h2>
<p>参考：</p>
<p>GitHub仓库：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener noreferrer">Molunerfinn/PicGo</a></p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener noreferrer">配置手册 | PicGo</a></p>
<p><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener noreferrer">PicGo (molunerfinn.com)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Gitee Pages Action</title>
      <link>https://blog.lxip.top/notes/githubaction/gitee-pages-action.html</link>
      <guid>https://blog.lxip.top/notes/githubaction/gitee-pages-action.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Gitee Pages Action</source>
      <description>Gitee Pages Action 由于 Gitee Pages 的访问速度很快，很多朋友会选择 Gitee Pages 部署项目（如：个人博客、开源项目国内镜像站点）。但是它不像 GitHub Pages 那样，一提交代码就能自动更新 Pages，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务。 为了实现 Gitee Pa...</description>
      <category>运维</category>
      <pubDate>Tue, 04 Apr 2023 22:10:00 GMT</pubDate>
      <content:encoded><![CDATA[<p align="center">
  <a href="https://github.com/yanglbme/gitee-pages-action">
    
  </a>
</p>
<p align="center">
  <a href="./LICENSE"><img src="https://img.shields.io/github/license/yanglbme/gitee-pages-action?color=42b883&amp;style=flat-square" alt="license"></a>
  <a href="../../releases"><img src="https://img.shields.io/github/v/release/yanglbme/gitee-pages-action?color=42b883&amp;style=flat-square" alt="release"></a>
  <a href="#谁在使用"><img src="https://shields.io/badge/who's-using-42b883?style=flat-square" alt="users"></a>
  <a href="#错误及解决方案"><img src="https://shields.io/badge/faq-here-42b883?style=flat-square" alt="users"></a>
  <a href="https://github.com/yanglbme/gitee-pages-action"><img src="https://shields.io/badge/⭐-GitHub-42b883?style=flat-square" alt="github"></a>
  <a href="https://gitee.com/yanglbme/gitee-pages-action"><img src="https://shields.io/badge/⭐-Gitee-42b883?style=flat-square" alt="gitee"></a><br>
  <a href="https://github.com/yanglbme/gitee-pages-action/stargazers"><img src="https://img.shields.io/github/stars/yanglbme/gitee-pages-action?color=42b883&amp;logo=github&amp;style=flat-square" alt="stars"></a>
  <a href="https://github.com/yanglbme/gitee-pages-action/network/members"><img src="https://img.shields.io/github/forks/yanglbme/gitee-pages-action?color=42b883&amp;logo=github&amp;style=flat-square" alt="forks"></a>
</p>
<h1 align="center">Gitee Pages Action</h1>
<p>由于 Gitee Pages 的访问速度很快，很多朋友会选择 Gitee Pages 部署项目（如：个人博客、开源项目国内镜像站点）。但是它不像 GitHub Pages 那样，一提交代码就能自动更新 Pages，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务。</p>
<p>为了实现 Gitee Pages 的自动部署，我开发了 <a href="https://github.com/marketplace/actions/gitee-pages-action" target="_blank" rel="noopener noreferrer">Gitee Pages Action</a> ，只需要在 GitHub 项目的 Settings 页面下配置 keys，然后在 <code>.github/workflows/</code> 下创建一个工作流，引入一些配置参数即可。欢迎 Star ⭐ 关注本项目。</p>
<p>欢迎体验，若有使用上的问题，也欢迎随时提交 <a href="https://github.com/yanglbme/gitee-pages-action/issues" target="_blank" rel="noopener noreferrer">Issues</a> 反馈。</p>
<p>注：</p>
<ol>
<li>首次需要<strong>手动</strong>登录 Gitee ，点击“启动”进行 Gitee Pages 服务的部署。</li>
<li>由于 Gitee 改版，使用 Gitee Pages 前需要先完成实名认证。</li>
</ol>
<h2> 入参</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>是否必传</th>
<th>默认值</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gitee-username</code></td>
<td>Gitee 用户名</td>
<td>是</td>
<td>-</td>
<td><code>yanglbme</code></td>
</tr>
<tr>
<td><code>gitee-password</code></td>
<td>Gitee 密码</td>
<td>是</td>
<td>-</td>
<td><code>${{ secrets.GITEE_PASSWORD }}</code></td>
</tr>
<tr>
<td><code>gitee-repo</code></td>
<td>Gitee 仓库（严格区分大小写）</td>
<td>是</td>
<td>-</td>
<td><code>doocs/leetcode</code></td>
</tr>
<tr>
<td><code>branch</code></td>
<td>要部署的分支（分支必须存在）</td>
<td>否</td>
<td><code>master</code></td>
<td><code>main</code></td>
</tr>
<tr>
<td><code>directory</code></td>
<td>要部署的分支上的目录</td>
<td>否</td>
<td></td>
<td><code>src</code></td>
</tr>
<tr>
<td><code>https</code></td>
<td>是否强制使用 HTTPS</td>
<td>否</td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<h2> 完整示例</h2>
<h3> 1. 创建 workflow</h3>
<p>在你的 GitHub 项目 <code>.github/workflows/</code> 文件夹下创建一个 <code>.yml</code> 文件，如 <code>sync.yml</code>，内容如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p>
<ol>
<li>这里我先使用 <a href="https://github.com/wearerequired/git-mirror-action" target="_blank" rel="noopener noreferrer">wearerequired/git-mirror-action</a> 将 GitHub 仓库同步到 Gitee 仓库，再使用 <a href="https://github.com/yanglbme/gitee-pages-action" target="_blank" rel="noopener noreferrer">yanglbme/gitee-pages-action</a> 实现 Gitee Pages 的自动部署。如果你已经通过其它的方式，将代码 push 至 Gitee 了，那么可以不使用 <a href="https://github.com/wearerequired/git-mirror-action" target="_blank" rel="noopener noreferrer">wearerequired/git-mirror-action</a>，也不需要配置 <code>GITEE_RSA_PRIVATE_KEY</code>。</li>
<li><code>branch</code> 参数默认是 <code>master</code>，如果你是部署在 <code>gh-pages</code>(或者 <code>main</code>) 分支等等，务必指定 <code>branch: gh-pages</code>(或者 <code>branch: main</code>)。</li>
<li><code>branch</code> 对应的分支，必须在仓库中实际存在，请不要随意（不）指定分支，否则可能导致 Gitee Pages 站点出现 404 无法访问的情况。</li>
<li>对于 <code>gitee-repo</code> 参数，如果你的项目在 Gitee 的地址为 <a href="https://gitee.com/%E7%94%A8%E6%88%B7%E5%90%8D/xxx" target="_blank" rel="noopener noreferrer">https://gitee.com/用户名/xxx</a> ，那么 <code>gitee-repo</code> 就填写为 <code>用户名/xxx</code>。<a href="https://github.com/yanglbme/gitee-pages-action/issues/54" target="_blank" rel="noopener noreferrer">#54</a></li>
<li>对于 workflow 的触发事件，你可以根据项目实际情况，指定为其它的触发事件。比如：<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>更多触发事件，请参考 <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">Events that trigger workflows</a></li>
</ol>
<h3> 2. 配置密钥</h3>
<p>密钥的配置步骤如下（可展开看示例图）：</p>
<details>
<summary>a. 在命令行终端或 Git Bash 使用命令 <code>ssh-keygen -t rsa -C "youremail@example.com"</code> 生成 SSH Key，注意替换为自己的邮箱。生成的 <code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。(⚠️注意此处不要设置密码，生成的公私钥用于下面 GitHub / Gitee 的配置，以保证公私钥成对，否则从 GitHub -&gt; Gitee 的同步将会失败。)</summary>

</details>
<details>
<summary>b. 在 GitHub 项目的「Settings -&gt; Secrets」路径下配置好命名为 <code>GITEE_RSA_PRIVATE_KEY</code> 和 <code>GITEE_PASSWORD</code> 的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code> 存放 <code>id_rsa</code> 私钥；<code>GITEE_PASSWORD</code> 存放 Gitee 帐号的密码。</summary>

</details>
<details>
<summary>c. 在 GitHub 的个人设置页面「<a href="https://github.com/settings/keys">Settings -&gt; SSH and GPG keys</a>」配置 SSH 公钥（即：<code>id_rsa.pub</code>），命名随意。</summary>

</details>
<details>
<summary>d. 在 Gitee 的个人设置页面「<a href="https://gitee.com/profile/sshkeys">安全设置 -&gt; SSH 公钥</a>」配置 SSH 公钥（即：<code>id_rsa.pub</code>），命名随意。</summary>

</details>
<h3> 3. 关注 Gitee 公众号</h3>
<p>关注 Gitee 官方公众号，并绑定个人 Gitee 帐号，用于接收帐号登录通知、以及绕过短信验证码校验，见<a href="#%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">错误及解决方案</a> 第 3 点。</p>
<h3> 4. 运行结果</h3>
<p>如果一切配置正常，并成功触发 <a href="https://github.com/marketplace/actions/gitee-pages-action" target="_blank" rel="noopener noreferrer">Gitee Pages Action</a> ，Gitee Pages Action 会打印出成功的结果。并且，我们会在 Gitee 公众号收到一条登录通知。这是 Gitee Pages Action 程序帮我们登录到 Gitee 官网，并为我们点击了项目的部署按钮。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>

<h2> 错误及解决方案</h2>
<table>
<thead>
<tr>
<th>#</th>
<th>错误</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Error: Wrong username or password, login failed .</td>
<td>帐号或密码错误，请检查参数 <code>gitee-username</code>、<code>gitee-password</code>是否准确配置。</td>
</tr>
<tr>
<td>2</td>
<td>Error: Need captcha validation, please visit <a href="https://gitee.com/login" target="_blank" rel="noopener noreferrer">https://gitee.com/login</a>, login to validate your account.</td>
<td>需要图片验证码校验。可以手动登录 Gitee 官方，校验验证码。</td>
</tr>
<tr>
<td>3</td>
<td>Error: Need phone captcha validation, please follow wechat official account "Gitee" to bind account to turn off authentication.</td>
<td>需要短信验证码校验。可以关注 Gitee 微信公众号，并绑定 Gitee 帐号，接收登录提示。<a href="https://github.com/yanglbme/gitee-pages-action/issues/6" target="_blank" rel="noopener noreferrer">#6</a></td>
</tr>
<tr>
<td>4</td>
<td>Error: Do not deploy frequently, try again one minute later.</td>
<td>短期内频繁部署 Gitee Pages 导致，可以稍后再触发自动部署。</td>
</tr>
<tr>
<td>5</td>
<td>Error: Deploy error occurred, please check your input <code>gitee-repo</code>.</td>
<td><code>gitee-repo</code> 参数格式如：<code>doocs/leetcode</code>，并且严格区分大小写，请准确填写。<a href="https://github.com/yanglbme/gitee-pages-action/issues/10" target="_blank" rel="noopener noreferrer">#10</a></td>
</tr>
<tr>
<td>6</td>
<td>Error: Unknown error occurred in login method, resp: ...</td>
<td>登录出现未知错误，请在 <a href="https://github.com/yanglbme/gitee-pages-action/issues" target="_blank" rel="noopener noreferrer">issues</a> 区反馈。</td>
</tr>
<tr>
<td>7</td>
<td>Error: Rebuild page error, status code: xxx</td>
<td>更新 Pages 时状态码异常，请尝试再次触发 Action 执行。也可能为 gitee pages 未初始化，第一次需要手动部署 gitee pages。</td>
</tr>
<tr>
<td>8</td>
<td>Error: HTTPSConnectionPool(host='<a href="http://gitee.com" target="_blank" rel="noopener noreferrer">gitee.com</a>', port=443): Read timed out. (read timeout=6)<br><br>Error: HTTPSConnectionPool(host='<a href="http://gitee.com" target="_blank" rel="noopener noreferrer">gitee.com</a>', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x7f6c889d42e8&gt;, 'Connection to <a href="http://gitee.com" target="_blank" rel="noopener noreferrer">gitee.com</a> timed out. (connect timeout=6)'))</td>
<td>网络请求出错，请尝试 Re-run jobs 。<a href="https://github.com/yanglbme/gitee-pages-action/issues/27" target="_blank" rel="noopener noreferrer">#27</a></td>
</tr>
<tr>
<td>9</td>
<td><a href="mailto:git@github.com">git@github.com</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists..</td>
<td>先尝试 Re-run job。<a href="https://github.com/yanglbme/gitee-pages-action/issues/56" target="_blank" rel="noopener noreferrer">#56</a> <br>若仍旧失败，可能是 SSH 公私钥配置有问题，或是使用了带密码的私钥，请参照上文提及的密钥配置步骤进行相应配置。<a href="https://github.com/yanglbme/gitee-pages-action/issues/29" target="_blank" rel="noopener noreferrer">#29</a></td>
</tr>
<tr>
<td>10</td>
<td>Hexo Gitee Pages 自动部署站点问题。</td>
<td><a href="https://github.com/No5972" target="_blank" rel="noopener noreferrer">@No5972</a> 详细给出了一种解决方案。<a href="https://github.com/yanglbme/gitee-pages-action/issues/34" target="_blank" rel="noopener noreferrer">#34</a></td>
</tr>
<tr>
<td>11</td>
<td>"/root/.ssh/id_rsa": invalid format.</td>
<td>操作系统环境不同，生成 ssh key 的方式可能有所差别，尝试添加 <code>-m PEM</code> 参数试试。<a href="https://github.com/yanglbme/gitee-pages-action/issues/49" target="_blank" rel="noopener noreferrer">#49</a></td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<!-- 
## 联系我

对于 Gitee Pages Action 有任何的疑问，还可以通过以下方式找到我。

<table>
  <tr>
    <td align="center" style="width: 200px;">
      <a href="https://github.com/doocs">
        <img src="@source/notes/githubaction/images/qrcode-for-doocs.jpg" style="width: 400px;" alt="公众号"><br>
        <sub>公众平台</sub>
      </a><br>
    </td>
    <td align="center" style="width: 200px;">
      <a href="https://github.com/yanglbme">
        <img src="@source/notes/githubaction/images/qrcode-for-yanglbme.jpg" style="width: 400px;" alt="微信"><br>
        <sub>个人微信</sub>
      </a><br>
    </td>
  </tr>
</table> -->
<h2> 许可证</h2>
<p>MIT</p>
]]></content:encoded>
    </item>
    <item>
      <title>github代码备份到gitee仓库-工作流</title>
      <link>https://blog.lxip.top/notes/githubaction/github%E4%BB%A3%E7%A0%81%E5%A4%87%E4%BB%BD%E5%88%B0gitee%E4%BB%93%E5%BA%93-%E5%B7%A5%E4%BD%9C%E6%B5%81.html</link>
      <guid>https://blog.lxip.top/notes/githubaction/github%E4%BB%A3%E7%A0%81%E5%A4%87%E4%BB%BD%E5%88%B0gitee%E4%BB%93%E5%BA%93-%E5%B7%A5%E4%BD%9C%E6%B5%81.html</guid>
      <source url="https://blog.lxip.top/rss.xml">github代码备份到gitee仓库-工作流</source>
      <description>大概思路 从本地（windows）使用git将代码提交到GitHub某仓库，然后触发某仓库GitHub工作流，使其将代码推送到gitee仓库。 前置知识 需要会使用git; 熟悉GitHub（配置、工作流）; 大致步骤 关于GitHub工作流与密钥配置对应图： image-20230404224357484 1.配置本地密钥到gitee，至于怎么配置可...</description>
      <category>运维</category>
      <pubDate>Tue, 04 Apr 2023 22:10:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 大概思路</h2>
<p>从本地（windows）使用git将代码提交到GitHub某仓库，然后触发某仓库GitHub工作流，使其将代码推送到gitee仓库。</p>
<h2> 前置知识</h2>
<ul>
<li>
<p>需要会使用git</p>
</li>
<li>
<p>熟悉GitHub（配置、工作流）</p>
</li>
</ul>
<h2> 大致步骤</h2>
<p>关于GitHub工作流与密钥配置对应图：</p>
<figure><figcaption>image-20230404224357484</figcaption></figure>
<p>1.配置本地密钥到gitee，至于怎么配置可以参考<a href="../gitMore">git多账号配置</a></p>
<p>2.配置GitHub公钥</p>
<p>该公钥要与gitee配置公钥对应上</p>
<p>本地密钥id_rsa_gitee.pub内容复制到GitHub中</p>
<figure><figcaption>image-20230404221056949</figcaption></figure>
<p>粘贴到如下图：</p>
<figure><figcaption>image-20230404221134689</figcaption></figure>
<p>同理将上的公钥复制粘贴到gitee上</p>
<p>配置示例如下：</p>
<figure><figcaption>image-20230404222501712</figcaption></figure>
<p>3.配置GitHub仓库密钥</p>
<p>需要在GitHub仓库添加对应secrets</p>
<p>如下图：</p>
<figure><figcaption>image-20230404225010003</figcaption></figure>
<blockquote>
<p>注意：此处的私钥要与gitee配置的公钥成对存在</p>
</blockquote>
<p>如下图：</p>
<figure><figcaption>image-20230404225213255</figcaption></figure>
<h2> 附件</h2>
<p>参考：<a href="https://github.com/yanglbme/gitee-pages-action" target="_blank" rel="noopener noreferrer">yanglbme/gitee-pages-action</a></p>
<p><a href="./gitee-pages-action">gitee-pages-action</a></p>
<h3> 报错</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：gitee配置的此公钥要与GitHub公钥成对存在。</p>
<p>添加即可解决</p>
<figure><figcaption>image-20230404223214170</figcaption></figure>
<p>如未解决可参考：<a href="https://github.com/yanglbme/gitee-pages-action/issues/29" target="_blank" rel="noopener noreferrer">https://github.com/yanglbme/gitee-pages-action/issues/29</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>mysql问题</title>
      <link>https://blog.lxip.top/notes/database/question.html</link>
      <guid>https://blog.lxip.top/notes/database/question.html</guid>
      <source url="https://blog.lxip.top/rss.xml">mysql问题</source>
      <description>问题1-提示1251- Client does not support authentication protocol requested by server 原因：mysql8 之前的版本中加密规则是mysqlnativepassword,而在mysql8之后,加密规则是cachingsha2password, 解决办法： 使用命令方式解决： 附件 ...</description>
      <category>mysql</category>
      <pubDate>Thu, 17 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 问题1-提示1251- Client does not support authentication protocol requested by server</h2>
<p>原因：mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password,</p>
<p>解决办法：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令方式解决：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 附件</h2>
<p>参考：<a href="https://blog.csdn.net/pengfeng111833/article/details/124399404" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/pengfeng111833/article/details/124399404</a></p>
<p>参考2：<a href="https://huaweicloud.csdn.net/63355d9ed3efff3090b54464.html" target="_blank" rel="noopener noreferrer">https://huaweicloud.csdn.net/63355d9ed3efff3090b54464.html</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>centos7.9使用</title>
      <link>https://blog.lxip.top/notes/linux/linux.html</link>
      <guid>https://blog.lxip.top/notes/linux/linux.html</guid>
      <source url="https://blog.lxip.top/rss.xml">centos7.9使用</source>
      <description>more 注释之前的内容被视为文章摘要。</description>
      <category>linux</category>
      <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>
<!-- more -->
<h2> 一、环境安装</h2>
<h3> 1.JDK安装</h3>
<p>这里安装JDK版本jdk-8u11-linux-x64.tar.gz</p>
<p>注：在登录centos服务器之后切换到根（root）目录下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.在root权限下，在根目录下创建文件夹</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换到/usr/local/java目录下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将该jdk-8u11-linux-x64.tar.gz压缩包上传到当前位置</p>
<p>2.解压jdk-8u11-linux-x64.tar.gz压缩包</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后切换到根目录下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.编辑Linux系统中环境变量所在文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.在文件最后加入环境变量设置，加入后保存文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.让环境变量生效</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.测试JDK是否已经配置好</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2 .Docker安装</h2>
<p>在拉去之前，先配置镜像加速器</p>
<p>阿里云镜像获取地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%8C%E7%99%BB%E9%99%86%E5%90%8E%EF%BC%8C%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E9%80%89%E4%B8%AD%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%9C%B0%E5%9D%80%E4%BA%86%EF%BC%9A" target="_blank" rel="noopener noreferrer">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了：</a></p>
<figure><figcaption>image-20221116231427095</figcaption></figure>
<p>因为工作的需要,需要把docker 启动后的路径改成/data,所以就会用到:<em>/etc/docker/daemon.json</em> 是docker 的配置<em>文件</em>,默认是没有的,需要我们手动创建,可配置项<em>如下:</em></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开下面的配置文件：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在/etc/docker/daemon.json文件末尾增加如下内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>修改完daemon.json文件后，需要让这个文件生效</p>
<p>a.修改完成后reload配置文件</p>
<p>sudo systemctl daemon-reload</p>
<p>b.重启docker服务</p>
<p>sudo systemctl restart docker.service</p>
<p>c.查看状态</p>
<p>sudo systemctl status docker -l</p>
<p>d.查看服务</p>
<p>sudo docker info</p>
</blockquote>
<p><em><strong>为什么配置这个呢？原因是docker下载镜像速度慢，需要配置国内镜像加速。</strong></em></p>
<p>Docker可以运行在MAC、Windows、CentOS、UBUNTU等操作系统上，本课程基于CentOS7安装Docker</p>
<p>官网：<a href="https://www.docker.com" target="_blank" rel="noopener noreferrer">https://www.docker.com</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.1docker命令</h4>
<p>1.进程相关命令</p>
<p>启动docker服务:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止docker服务:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启docker服务:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看docker服务状态:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置开机启动docker服务:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.镜像相关命令</p>
<p>镜像命令包括如下内容：查看镜像、搜索镜像、拉取镜像、删除镜像</p>
<p>查看镜像:查看本地所有的镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>搜索镜像:从网络中查找需要的镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为名称:版本号，如果版本号不指定则是最新的版本lastest。</p>
<p>如果不知道镜像版本，可以去dockerhub搜索对应镜像查看。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除镜像:删除本地镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.容器相关命令</p>
<p>查看容器、创建容器、进入容器、启动容器、停止容器、删除容器、查看容器信息</p>
<p>查看容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建并启动容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p>
<p>-i：保持容器运行。通常与-t同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p>
<p>-t：为容器重新分配一个伪输入终端，通常与-i同时使用。</p>
<p>-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用dockerexec进入容器。退出后，容器不会关闭。</p>
<p>-it创建的容器一般称为交互式容器，-id创建的容器一般称为守护式容器</p>
<p>--name：为创建的容器命名。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：交互式容器，exit后容器自动关闭，守护式容器会在后台执行</p>
<p>进入容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看容器信息</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.Docker容器的数据卷</p>
<p>....</p>
<h2> 3.Docker应用部署</h2>
<p>3.1MySQL部署</p>
<p>分析</p>
<p>容器内的网络服务和外部机器不能直接通信</p>
<p>外部机器和宿主机可以直接通信宿主机和容器可以直接通信</p>
<p>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务。</p>
<p>这种操作称为：<strong>端口映射</strong></p>
<figure><figcaption>image-20221117002336127</figcaption></figure>
<p>1.搜索mysql镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.拉取mysql镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p>
<p>-p  3307:3306：将容器的3306端口映射到宿主机的3307端口。</p>
<p>-v  $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的conf/my.cnf挂载到容器的 /etc/mysql/my.cnf 。配置目录</p>
<p>-v  $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs。日志目录</p>
<p>-v  $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</p>
<p>-e  MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码。</p>
<p>4.进入容器，操作</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2.Tomcat部署</p>
<p>1.搜索tomcat镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.拉取tomcat镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p>
<p>-p 8080:8080：将容器的8080端口映射到主机的8080端口</p>
<p>-v $PWD:/usr/local/tomcat/webapps：将主机中当前目录挂载到容器的webapps</p>
<p>4.使用外部机器访问tomcat</p>
<p>3.3.Nginx部署</p>
<p>1.搜索nginx镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.拉取nginx镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射、目录映射</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下面的命令启动nginx容器：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.4.Redis部署</p>
<p>1.搜索redis镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.拉取redis镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.创建容器，设置端口映射</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.使用外部机器连接redis</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.Dockerfile</h2>
<p>4.1docker镜像原理：</p>
<p>思考：</p>
<p>Docker 镜像本质是什么？</p>
<p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p>
<p>Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？</p>
<p>操作系统组成部分：</p>
<p>进程调度子系统</p>
<p>进程通信子系统</p>
<p>内存管理子系统</p>
<p>设备管理子系统</p>
<p>文件管理子系统</p>
<p>网络通信子系统</p>
<p>作业控制子系统</p>
<p>Linux文件系统由bootfs和rootfs两部分组成</p>
<p>bootfs：包含bootloader（引导加载程序）和 kernel（内核） rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</p>
<p>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</p>
<figure><figcaption>image-20221117193843478</figcaption></figure>
<p>docker镜像原理</p>
<p>Docker镜像是由特殊的文件系统叠加而成</p>
<p>最底端是 bootfs，并使用宿主机的bootfs</p>
<p>第二层是 root文件系统rootfs,称为base image 然后再往上可以叠加其他的镜像文件</p>
<p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的 视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。</p>
<p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p>
<p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p>
<figure><figcaption>image-20221117193946995</figcaption></figure>
<p>回答问题</p>
<p>1.Docker 镜像本质是什么？ 是一个分层文件系统</p>
<p>2.Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</p>
<p>Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其 他镜像层</p>
<p>3.Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？ 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外 暴露的tomcat镜像大小600多MB</p>
<p>4.2镜像制作</p>
<p>容器转换镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20221117194250515</figcaption></figure>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行操作：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dockerfile</p>
<p>概念</p>
<p>Dockerfile 是一个文本文件</p>
<p>包含了一条条的指令</p>
<p>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</p>
<p>对于开发人员：可以为开发团队提供一个完全一致的开发环境</p>
<p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</p>
<p>对于运维人员：在部署时，可以实现应用的无缝移植</p>
<p>参考Dochub网址：<a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">https://hub.docker.com</a> ，比如centos和nginx镜像</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息 用</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在 docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>容器启动命 令</td>
<td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN ["command" , "param1","param2"]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命 令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD ["command" , "param1","param2"]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来 源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式 ENV name=value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字 的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可 以挂载的数 据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容 器的时候使用 -v 绑定 格式 VOLUME ["目录"]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格 式: EXPOSE 8080 或者 EXPOSE 8080/udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是 绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用 户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候 的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本 身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成 之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量 到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚 本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr>
<p>案例一：</p>
<p>自定义centos7镜像。</p>
<p>要求：</p>
<ol>
<li>默认登录路径为 /usr</li>
<li>可以使用vim</li>
</ol>
<p>实现步骤</p>
<p>定义父镜像：FROM centos:7</p>
<p>定义作者信息：MAINTAINER lxs <a href="mailto:lxs@lxs.cn">lxs@lxs.cn</a></p>
<p>执行安装vim命令： RUN yum install -y vim</p>
<p>定义默认的工作目录：WORKDIR /usr</p>
<p>定义容器启动执行的命令：CMD /bin/bash</p>
<p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dockerfile具体内容</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-f：镜像文件</p>
<p>-t：新镜像名</p>
<p>. 寻址路径</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>案例二：发布springboot项目</p>
<p>定义父镜像：FROM java:8</p>
<p>定义作者信息：MAINTAINER lxs <a href="mailto:lxs@163.com">lxs@163.com</a></p>
<p>将jar包添加到容器： ADD springboot.jar app.jar</p>
<p>定义容器启动执行的命令：CMD ["java","-jar","app.jar"]</p>
<p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>build</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 5.服务编排</h2>
<p>5.1. 概念</p>
<p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启 动停止，维护的工作量会很大。来看下我们日常工作：</p>
<p>要从Dockerfile build image 或者去dockerhub拉取image</p>
<p>要创建多个container</p>
<p>要管理这些container（启动停止删除）</p>
<p>通过服务编排可以大量简化上面的工作服务编排：按照一定的业务规则批量管理容器</p>
<p>5.2 Docker Compose</p>
<p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集中管理容器化应用的完整开发周期，包括服务 构建，启动和停止。使用步骤：</p>
<ol>
<li>利用 Dockerfile 定义运行环境镜像</li>
<li>使用 docker-compose.yml 定义组成应用的各服务</li>
<li>运行 docker-compose up 启动应用</li>
</ol>
<figure><figcaption>image-20221117200311623</figcaption></figure>
<p>安装Docker Compose</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卸载Docker Compose</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编排nginx+springboot</p>
<p>需求：使用nginx反向代理到springboo应用</p>
<ol>
<li>创建docker-compose目录</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.编写 docker-compose.yml 文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.创建./nginx/conf.d目录</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.在./nginx/conf.d目录下 编写app.conf文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.在~/docker-compose 目录下 使用docker-compose 启动容器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6">
<li>测试访问</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 6.Docker私有仓库</h2>
<blockquote>
<p>Docker官方的Docker hub（<a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">https://hub.docker.com</a>）是一个用于管理公共镜像的仓库，我们可以从上面拉 取镜像 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们不希望将自己的镜 像放到公网当中， 那么这时我们就需要搭建自己的私有仓库来存储和管理自己的镜像</p>
</blockquote>
<p>6.1. 私有仓库搭建</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.2将镜像上传至私有仓库</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从私有仓库拉取镜像</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 附件</h2>
<p>参考：<a href="https://www.cnblogs.com/yakniu/p/16329611.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yakniu/p/16329611.html</a></p>
<p>参考：服务端口占用情况：<a href="https://www.leixue.com/qa/how-does-centos-check-port-occupancy" target="_blank" rel="noopener noreferrer">https://www.leixue.com/qa/how-does-centos-check-port-occupancy</a></p>
<p>参考mysql数据库问题：</p>
<p>【MySql】Navicat 连接数据库出现1251 - Client does not support authentication protocol ...... 问题的解决方法：</p>
<p><a href="https://blog.csdn.net/pengfeng111833/article/details/124399404" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/pengfeng111833/article/details/124399404</a></p>
<p><a href="https://blog.csdn.net/piupiu78/article/details/122468163" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/piupiu78/article/details/122468163</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Git多账号配置</title>
      <link>https://blog.lxip.top/notes/linux/gitMore.html</link>
      <guid>https://blog.lxip.top/notes/linux/gitMore.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Git多账号配置</source>
      <description>一、背景 ​		在同一台电脑上有时候需要使用多个GitHub、gitee、gitlab账号，或者说你有多个账号，不想来回生成公钥，那么这就需要使用到git配置多账户了。 二、准备 环境：window 10、git 在使用之前你需要安装git，对于git安装也是点击下一步下一步就可以安装完成，在此也需要对git命令有一定的了解。 前提条件：需要C:\Us...</description>
      <category>运维</category>
      <pubDate>Mon, 31 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 一、背景</h2>
<p>​		在同一台电脑上有时候需要使用多个GitHub、gitee、gitlab账号，或者说你有多个账号，不想来回生成公钥，那么这就需要使用到git配置多账户了。</p>
<h2> 二、准备</h2>
<p>环境：window 10、git</p>
<p>在使用之前你需要安装git，对于git安装也是点击下一步下一步就可以安装完成，在此也需要对git命令有一定的了解。</p>
<p>前提条件：需要C:\Users\nxg.ssh目录（文件夹）下，打开git bash</p>
<p>如下图所示：</p>
<figure><figcaption>image-20221031222311849</figcaption></figure>
<p>打开之后使用这个界面：</p>
<figure><figcaption>image-20221031222421017</figcaption></figure>
<p>**注意：**这路径C:\Users\nxg.ssh对于有一定基础的根据上图是能看明白，就不再赘述了。</p>
<p>​		为什么先执行这一步呢？原因是这样的在你创建config文件，生成密钥时都需要创建在这个**.ssh**目录（文件夹）下。如果你在其他目录下打开，那你就需要考虑创建文件时的路径问题了。为了方便明了，就使用上述方法操作，省时省力。</p>
<h2> 三、配置</h2>
<h3> 3.1 创建config文件</h3>
<p>在C:\Users\nxg.ssh目录（文件夹）下创建config文件，并且配置ssh key的路由策略。</p>
<p>创建config文件：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在config文件中配置</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如图所示：</p>
<figure><figcaption>image-20221031224144979</figcaption></figure>
<blockquote>
<p>“#”  表示注释
Host  后面是名称，可以随便写，相当于起了一个别名</p>
<p>每一个Host就代表一个仓库，仓库参数另起一行，前有4个空格
HostName ： 真正连接的服务器地址</p>
<p>ssh的host，SSH地址“git@”后面到冒号前面的内容</p>
<p><code>User</code>：自定义的用户名，一般使用“git”
<code>PreferredAuthentications</code>： 指定优先使用哪种方式验证，支持密码和秘钥验证方式 。使用“publickey”即可，git仓库均为这种形式</p>
<p>权限认证--可设为publickey,password publickey,keyboard-interactive等
<code>IdentityFile</code>：指定本次连接使用的密钥文件。 该host后台配置的公钥对应的私钥地址的绝对路径
Port ： SSH默认端口号为22，某些私有部署的git仓库会更换端口号</p>
</blockquote>
<h3> 3.2 全局配置</h3>
<p>以github为例：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：这里的abc是GitHub<strong>用户名</strong> ，<strong><a href="mailto:123456@qq.com">123456@qq.com</a></strong>这里是你绑定GitHub上的邮箱</p>
<p>如下图效果：</p>
<figure><figcaption>image-20221031232651471</figcaption></figure>
<p>配置gitee效果如下图所示：</p>
<figure><figcaption>image-20221031232222217</figcaption></figure>
<p>注意：生成密钥文件需要与这里保持一致</p>
<figure><figcaption>image-20221031233525370</figcaption></figure>
<h3> 测试是否连接成功</h3>
<p>测试GitHub是否连接成功：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功效果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试Gitee是否连接成功：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功效果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意事项：</p>
<figure><figcaption>image-20221031234333269</figcaption></figure>
<h2> 四、关联github</h2>
<p>将id_rsa_gitee.pub文件中的内容添加到gitee设置中的SSH公钥中。</p>
<p>将id_rsa_github2.pub文件中的内容添加到github的settings的SSH and GPG keys的SSH公钥中。</p>
<p>注：上面的文件都在</p>
<figure><figcaption>image-20221101162514113</figcaption></figure>
<p>效果如下图所示：</p>
<figure><figcaption>image-20221101162133360</figcaption></figure>
<h2> 注意</h2>
<p>在配置多个账号的，方式有多种，可以使用直接修改文件的方式，也可以使用命令的方式</p>
<p>这里使用修改文件的方式</p>
<p>首先需要在这C:\Users\nxg路径下，找到**.gitconfig**文件，并打开此文件</p>
<figure><figcaption>image-20221031235250843</figcaption></figure>
<p>注意：别直接双击打开，需要选择打开方式，选文本打开，或者其他编辑工具打开。</p>
<p><strong>.gitconfig</strong>文件内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下图所示：</p>
<figure><figcaption>image-20221031235759564</figcaption></figure>
<h3> 查看账号列表：</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如图所示：</p>
<figure><figcaption>image-20221101000219730</figcaption></figure>
<h3> 添加密钥的方式</h3>
<p>方式一：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再执行 <strong>id_rsa</strong></p>
<figure><figcaption>image-20221031232651471</figcaption></figure>
<p>方式二：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如图所示：</p>
<figure><figcaption>image-20221101000544601</figcaption></figure>
<blockquote>
<p><strong>ssh-keygen常用参数说明:</strong></p>
<p>-t: 密钥类型, 可以选择 dsa | ecdsa | ed25519 | rsa;</p>
<p>-f: 密钥目录位置, 默认为当前用户home路径下的.ssh隐藏目录, 也就是~/.ssh/, 同时默认密钥文件名以id_rsa开头. 如果是root用户, 则在/root/.ssh/id_rsa, 若为其他用户, 则在/home/username/.ssh/id_rsa;</p>
<p>-C: 指定此密钥的备注信息, 需要配置多个免密登录时, 建议携带;</p>
<p>-N: 指定此密钥对的密码, 如果指定此参数, 则命令执行过程中就不会出现交互确认密码的信息了.</p>
<p>举例说明: 同时指定目录位置、密码、注释信息, 就不需要输入回车键即可完成创建:</p>
</blockquote>
<h2> 附件</h2>
<p><a href="https://blog.csdn.net/weixin_45586870/article/details/120446094" target="_blank" rel="noopener noreferrer">git单一账号使用教程</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Git提交本地代码至分支（详细每一步）</title>
      <link>https://blog.lxip.top/notes/linux/git.html</link>
      <guid>https://blog.lxip.top/notes/linux/git.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Git提交本地代码至分支（详细每一步）</source>
      <description>A: 查看本地分支 使用 git branch命令，如下：git branch *标识的是你当前所在的分支 img B: 查看远程分支 命令如下：git branch -r img C: 查看所有分支 命令如下：git branch -a img 二、本地创建新分支 命令如下：git branch [分支名称] 例如：git branch platef...</description>
      <category>运维</category>
      <pubDate>Wed, 28 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 查看分支</h1>
<p>A: 查看本地分支
使用 git branch命令，如下：git branch
*标识的是你当前所在的分支</p>
<figure><figcaption>img</figcaption></figure>
<p>B: 查看远程分支</p>
<p>命令如下：git branch -r</p>
<figure><figcaption>img</figcaption></figure>
<p>C: 查看所有分支</p>
<p>命令如下：git branch -a</p>
<figure><figcaption>img</figcaption></figure>
<p>二、本地创建新分支</p>
<p>命令如下：git branch [分支名称]</p>
<p>例如：git branch plateformSuperdog</p>
<p>三、切换到新分支</p>
<p>命令如下：git checkout [分支名称]</p>
<p>例如：git checkout plateformSuperdog</p>
<p>四、创建+切换分支</p>
<p>命令如下：git checkout -b [分支名称]</p>
<p>例如：git checkout -b plateform2</p>
<p>其中：git checkout -b [分支名称]相当于两步</p>
<p>git branch [分支名称]</p>
<p>git checkout [分支名称]</p>
<p>五、将新分支推送到github</p>
<p>命令如下：git push origin [分支名称]</p>
<p>六：删除本地分支</p>
<p>命令如下：git branch -d [分支名称]</p>
<p>七、删除github 远方分支</p>
<p>命令如下：git push origin :[branch name]</p>
<p>其中：分支前面：代表删除</p>
<p>例如：git push origin : plateform2</p>
<p>八：git 提交本地代码至新分支</p>
<p>1.切换到新分支</p>
<p>命令如下：git checkout [分支名称]</p>
<p>例如：git checkout plateform2</p>
<p>2.添加本地需要提交的代码</p>
<p>命令如下：git add .</p>
<p>3.提交本地代码</p>
<p>命令如下：git commit -m "修改说明"</p>
<p>4.push到git仓库</p>
<p>命令如下：git push origin [分支名称]</p>
<p>例如：git push origin plateform2</p>
<hr>
<h1> 简单总结一下：</h1>
<ol>
<li>拉取仓库（克隆）：</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>将要提交的代码复制到该仓库中（克隆的文件夹中）</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这也是需要绑定github账号</p>
<h1> 合并分支</h1>
<p><a href="https://blog.csdn.net/chenyao1994/article/details/114686758" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/chenyao1994/article/details/114686758</a></p>
<p>git合并分支（一看就懂）</p>
<p>假如我们现在在dev分支上，刚开发完项目，执行了下列命令：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想将dev分支合并到master分支，操作如下：</p>
<p>1、首先切换到master分支上</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、如果是多人开发的话 需要把远程master上的代码pull下来</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、然后我们把dev分支的代码合并到master上</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、然后查看状态及执行提交命令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、其他命令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> 附件</h1>
<h2> <em><strong>*GIT开发学习——合并分支的几种方法*</strong></em></h2>
<p><a href="https://blog.csdn.net/fenglolo/article/details/125223433" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/fenglolo/article/details/125223433</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>hello life</title>
      <link>https://blog.lxip.top/happylife/thinker/th.html</link>
      <guid>https://blog.lxip.top/happylife/thinker/th.html</guid>
      <source url="https://blog.lxip.top/rss.xml">hello life</source>
      <category>生活</category>
      <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Java8新特性</title>
      <link>https://blog.lxip.top/notes/javacore/Java8%E6%96%B0%E7%89%B9%E6%80%A7.html</link>
      <guid>https://blog.lxip.top/notes/javacore/Java8%E6%96%B0%E7%89%B9%E6%80%A7.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Java8新特性</source>
      <description>Optional类 引入 NPE问题就是在开发中经常碰到的NullPointerException，即空指针问题，Optional类就是用来优雅解决该问题的方案。 比如大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。 以用户类...</description>
      <category>Java</category>
      <content:encoded><![CDATA[<h2> Optional类</h2>
<h3> 引入</h3>
<p><code>NPE</code>问题就是在开发中经常碰到的<code>NullPointerException</code>，即空指针问题，<code>Optional</code>类就是用来优雅解决该问题的方案。</p>
<p>比如大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为<code>null</code>，只有在非空的前提下才能将其作为其他方法的参数。</p>
<p>以用户类和地址类举例说明其用法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种代码可能会出现空指针问题，在实际开发中，如果不使用<code>Optional</code>类，极其不优雅的处理方式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><div class="highlight-line">&nbsp;</div><br><div class="highlight-line">&nbsp;</div><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码保证了代码的第三行、第五行、第七行肯定不会出现空指针，但是这个代码真的是非常的冗长和丑陋。</p>
<p><strong><code>java.util</code>包下面的<code>Optional</code>类提供了一套API来处理一个对象是否为<code>null</code>值的问题。</strong></p>
<h3> 源码解读及各API的使用</h3>
<p>部分源码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其本质是内部有一个泛型容器存储外部需要判断<code>null</code>值的对象，同时提供了两个私有的构造函数，不能被外部所调用，只能由类内部的函数调用</p>
<ul>
<li>无参数的构造函数提供一个<code>value=null</code>的<code>Optional</code>对象</li>
<li>有参数的构造函数提供一个<code>value</code>一定不能为<code>null</code>的<code>Optional</code>对象，因为它调用了<code>Objects</code>类的<code>requireNonNull</code>方法。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> of</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个静态方法，调用有参数的构造函数，返回的是<code>value</code>值一定不为<code>null</code>的<code>Optional</code>对象，因为有参数的构造方法底层调用了<code>Objects</code>的<code>requireNonNull</code>方法，如果传入的<code>value</code>为<code>null</code>值，那么一定会报空指针异常。不允许<code>value</code>为<code>null</code>，实际开发中不常用。</p>
<h4> empty</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个静态方法，直接将类初始化时加载的<code>value</code>为<code>null</code>的<code>Optional</code>对象给用户。</p>
<h4> ofNullable</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个静态方法，代表<code>value</code>值是可为空的。如果为<code>null</code>值，那么返回一个<code>value</code>为<code>null</code>的<code>Optional</code>对象；如果不为<code>null</code>值，那么返回一个<code>value</code>不为<code>null</code>的<code>Option</code>对象。允许<code>value</code>为<code>null</code>，实际开发中常用。</p>
<p><strong>与<code>of</code>的区别：当<code>value</code>值为<code>null</code>时，<code>of</code>会报<code>NullPointerException</code>异常；<code>ofNullable</code>不会<code>throw Exception</code>，<code>ofNullable</code>直接返回一个<code>EMPTY</code>对象（<code>value</code>为<code>null</code>的<code>Optional</code>对象）。</strong></p>
<p>::: tip 那是不是意味着，我们在项目中只用ofNullable函数而不用of函数呢?</p>
<ul>
<li>不是的，一个东西存在那么自然有存在的价值。</li>
<li>当我们在运行过程中，不想隐藏<code>NullPointerException</code>，而是要立即报告，这种情况下就用<code>of</code>函数。</li>
<li>但是不得不承认，这样的场景真的很少。</li>
</ul>
<p>:::</p>
<h4> orElse</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个实例方法，会首先判断调用它的<code>Optional</code>对象中的<code>value</code>值，如果为不为<code>null</code>，那么就返回该<code>value</code>值，如果为<code>null</code>，就返回传入的<code>other</code>对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> orElseGet</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法与<code>orElse</code>方法类似，只不过传入的<code>other</code>对象可以通过一个<strong>提供者函数式接口</strong>提供，这里可以改成<code>lambda</code>表达式的形式。为了方便对代码的理解，所以上面写的测试代码稍显复杂，实际开发中可以使用<code>lambda</code>表达式简化。</p>
<h4> orElseThrow</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>value</code>值不为<code>null</code>，那么直接返回，如果<code>value</code>值为<code>null</code>，可以自定义业务逻辑功能说明语句抛出异常，不影响后续代码执行。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> map</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有值，则对其执行调用<code>mapper</code>函数得到返回值，将创建包含<code>mapper</code>返回值的<code>Optional</code>对象作为<code>map</code>方法返回值，否则返回空<code>Optional</code>对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>map</code>方法用来对<code>Optional</code>实例的值执行一系列操作。通过一组实现了<code>Function</code>接口的<code>lambda</code>表达式传入操作。</p>
<h4> flatMap</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有值，为其执行<code>mapper</code>函数返回<code>Optional</code>对象类型返回值，否则返回空<code>Optional</code>对象。<code>flatMap</code>与<code>map</code>方法类似，区别在于<code>flatMap</code>中的<code>mapper</code>返回值必须是<code>Optional</code>对象。调用结束时，<code>flatMap</code>不会对结果用<code>Optional</code>封装。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flatMap</code>方法与<code>map</code>方法类似，区别在于<code>mapper</code>函数的返回值不同。<code>map</code>方法的<code>mapper</code>函数返回值可以是任何类型<code>T</code>，而<code>flatMap</code>方法的<code>mapper</code>函数必须是<code>Optional</code>对象。</p>
<h4> filter</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有值并且满足断言条件返回包含该值的<code>Optional</code>对象，否则返回空<code>Optional</code>对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> isPresent</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ifPresent</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> get</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> equals</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> hashCode</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> toString</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用例子</h3>
<ul>
<li>基本使用</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在<code>Java8</code>中提高对象的<code>null</code>值安全性</li>
</ul>
<p>假设有如下的类层次结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决这种结构的深层嵌套路径是有点麻烦的，我们必须编写一堆<code>null</code>检查来确保不会导致一个 <code>NullPointerException</code>。</p>
<p>我们可以通过利用<code>Optional</code>类型来摆脱所有这些<code>null</code>检查。<code>map</code>方法接收一个<code>Function</code>类型的<code>lambda</code>表达式，并自动将每个<code>function</code>的结果包装成一个<code>Optional</code>对象，这使我们能够在一行中进行多个 <code>map</code> 操作。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用总结</h3>
<p>使用<code>Optional</code>工具类判断一个对象的<code>NPE</code>问题，一定要先通过其静态方法<code>（of、empty、ofNullable）</code>获得<code>Optional</code>对象，进而通过一些实例方法进行一系列的操作获得最后的对象。</p>
<table>
<thead>
<tr>
<th>API方法名称</th>
<th>用处</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>of</code></td>
<td>为非<code>null</code>的值创建一个<code>Optional</code>对象。</td>
</tr>
<tr>
<td><code>empty</code></td>
<td>为<code>null</code>的值创建一个<code>Optional</code>对象。</td>
</tr>
<tr>
<td><code>ofNullable</code></td>
<td>为指定的值创建一个<code>Optional</code>对象，如果指定的值为<code>null</code>，则返回一个空的<code>Optional</code>对象。</td>
</tr>
<tr>
<td><code>isPresent</code></td>
<td>如果值不为<code>null</code>，则返回<code>true</code>，否则返回<code>false</code>。</td>
</tr>
<tr>
<td><code>get</code></td>
<td>如果<code>Optional</code>对象的值并不为空则将其返回，否则抛出<code>NoSuchElementException</code>。</td>
</tr>
<tr>
<td><code>ifPresent</code></td>
<td>如果<code>Optional</code>对象有值（不为空）则为其调用<code>Consumer</code>，否则不做处理</td>
</tr>
<tr>
<td><code>orElse</code></td>
<td>如果有值则将其返回，否则返回指定的其它值。</td>
</tr>
<tr>
<td><code>orElseGet</code></td>
<td><code>orElseGet</code>方法可以接受<code>Supplier</code>接口的实现用来生成默认值。</td>
</tr>
<tr>
<td><code>orElseThrow</code></td>
<td>如果有值则将其返回，否则抛出<code>Supplier</code>接口创建的异常。</td>
</tr>
<tr>
<td><code>map</code></td>
<td>如果有值，则对其执行调用<code>mapper</code>函数得到返回值，并且将创建包含<code>mapper</code>返回值的<code>Optional</code>对象作为<code>map</code>方法返回值，否则返回空<code>Optional</code>对象。</td>
</tr>
<tr>
<td><code>flatMap</code></td>
<td>如果有值，为其执行<code>mapper</code>函数返回<code>Optional</code>类型返回值，否则返回空<code>Optional</code>对象。<code>flatMap</code>与<code>map</code>方法类似，区别在于<code>flatMap</code>中的<code>mapper</code>返回值必须是<code>Optional</code>对象。调用结束时，<code>flatMap</code>不会对结果用<code>Optional</code>封装。</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>如果有值并且满足断言条件返回包含该值的<code>Optional</code>对象，否则返回空<code>Optional</code>对象。</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>ArrayList</title>
      <link>https://blog.lxip.top/notes/javacore/Java%E9%9B%86%E5%90%88-ArrayList.html</link>
      <guid>https://blog.lxip.top/notes/javacore/Java%E9%9B%86%E5%90%88-ArrayList.html</guid>
      <source url="https://blog.lxip.top/rss.xml">ArrayList</source>
      <description>概述 ArrayList实现了List接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入null元素，底层通过数组实现。除该类未实现同步外，其余跟Vector大致相同。每个ArrayList都有一个容量(capacity)，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数...</description>
      <category>Java</category>
      <content:encoded><![CDATA[<h2> 概述</h2>
<p><code>ArrayList</code>实现了<code>List</code>接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入<code>null</code>元素，底层通过<strong>数组实现</strong>。除该类未实现同步外，其余跟<code>Vector</code>大致相同。每个<code>ArrayList</code>都有一个容量<code>(capacity)</code>，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。前面已经提过，<code>Java</code>泛型只是编译器提供的语法糖，所以这里的数组是一个<code>Object</code>数组，以便能够容纳任何类型的对象。</p>
<p><code>size(), isEmpty(), get(), set()</code>方法均能在常数时间内完成，<code>add()</code>方法的时间开销跟插入位置有关，<code>addAll()</code>方法的时间开销跟添加元素的个数成正比。其余方法大都是线性时间。</p>
<p>为追求效率，<code>ArrayList</code>没有实现同步<code>(synchronized)</code>，如果需要多个线程并发访问，用户可以手动同步，也可使用<code>Vector</code>替代。</p>
<h2> ArrayList的实现</h2>
<h3> 底层数据结构</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>底层数据结构就是<code>Object</code>类型的数组，这样可以放置任何类型的对象，因为所有的对象都继承了<code>Obejct</code>。</p>
<h3> 构造函数</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>构造函数1：给定<code>initialCapacity</code>，判断该值的合法性必须是大于等于0，如果大于0，就创建一个长度为<code>initialCapacity</code>的<code>Object</code>数组；如果等于0，就会把一个空数组给<code>elementData</code>。</li>
<li>构造函数2：不给定<code>initialCapacity</code>，就会给一个默认容量（后面会用到这个默认容量）的空数组，注意此时的<code>elementData</code>还是空数组，还没有实际分配默认容量长度的数组，在<code>add</code>元素的时候会修正默认容量（10）。</li>
</ul>
<h3> 两个常用数组拷贝方法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 自动扩容</h3>
<ul>
<li>每当向数组中<strong>添加</strong>元素时，都要去检查添加后元素的个数<code>（size+1）</code>是否会超出当前数组的长度<code>（elementData.length）</code>，如果超出，数组将会进行扩容，以满足添加数据的需求。</li>
<li>数组扩容通过一个公开<code>（public）</code>的方法<code>ensureCapacity(int minCapacity)</code>来实现，在实际添加大量元素前，也可以使用<code>ensureCapacity</code>来手动增加<code>ArrayList</code>实例的容量，以减少递增式再分配的数量。</li>
<li>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造<code>ArrayList</code>实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用<code>ensureCapacity</code>方法来手动增加<code>ArrayList</code>实例的容量。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> add()-addAll()</h3>
<p>跟<code>C++</code>的<code>vector</code>不同，<code>ArrayList</code>没有<code>push_back()</code>方法，对应的方法是<code>add(E e)</code>，<code>ArrayList</code>也没有<code>insert()</code>方法，对应的方法是<code>add(int index, E e)</code>。这两个方法都是向容器中添加新元素，这可能会导致<code>capacity</code>不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过<code>grow()</code>方法完成的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add(int index, E e)</code>需要先对元素进行移动，然后完成插入操作，也就意味着该方法有着线性的时间复杂度。</p>
<p><code>addAll()</code>方法能够一次添加多个元素，根据位置不同也有两个版本，一个是在末尾添加的<code>addAll(Collection&lt;? extends E&gt; c)</code>方法，一个是从指定位置开始插入的<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>方法。跟<code>add()</code>方法类似，在插入之前也需要进行空间检查，如果需要则自动扩容；如果从指定位置插入，也会存在移动元素的情况。 <code>addAll()</code>的时间复杂度不仅跟插入元素的多少有关，也跟插入的位置相关。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>关于<code>modCount</code>：</p>
<ul>
<li>
<p>在<code>ArrayList</code>中有个成员变量<code>modCount</code>，继承于<code>AbstractList</code>。</p>
</li>
<li>
<p>记录着集合的修改次数，也就每次<code>add</code>或者<code>remove</code>它的值都会加1。</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在使用迭代器遍历集合的时候同时修改集合元素。因为<code>ArrayList</code>被设计成非同步的，所以理所当然会抛异常。但是该抛什么异常才能说明该问题呢？答案是：<code>java.util.ConcurrentModificationException</code>，即并发修改异常，也就是说有一个线程在读数据，现在还有另一个线程在修改数据，但是<code>ArrayList</code>不是线程安全的，所以这样做会很危险，就会直接报异常。</li>
<li>首先得了解<code>ArrayList</code>的迭代器</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>主要关注3个点：</li>
</ul>
<p>1、<code>expectedModCount</code>的初值为<code>modCount</code></p>
<p>2、<code>hasNext</code>的判断条件为<code>cursor!=size</code>，就是当前迭代的位置不是数组的最大容量值就返回<code>true</code></p>
<p>3、<code>next</code>和<code>remove</code>操作之前都会先调用<code>checkForComodification</code>来检查<code>expectedModCount</code>和<code>modCount</code>是否相等</p>
<ul>
<li>
<p>分析原因：<code>add</code>操作之后，<code>modCount</code>的值为1，通过<code>iterator</code>方法获得迭代器之后，<code>expectedModCount</code>的值就是1，第一次<code>cursor</code>的值为0，并不等于<code>size=1</code>，所以<code>hasNext</code>为<code>true</code>，此时<code>next</code>方法会通过<code>checkForComodification</code>进行检查，发现是正常的，会继续向下走，将<code>cursor</code>的值执行++操作，此时<code>cursor</code>的值为1。当执行到<code>remove</code>方法，将<code>modCount</code>的值变为2，<code>size</code>的值变为0，此时执行到<code>hasNext</code>方法，发现<code>cursor</code>的值为1，并不等于<code>size</code>的值为0，所以还是<code>true</code>，会继续向下走，此时执行<code>next</code>方法的时候，再次通过<code>checkForComodification</code>进行检查，发现<code>expectedModCount</code>的值为1，但是<code>modCount</code>的值已经变为了2，两者不相等，所以就直接报出并发修改异常了。</p>
</li>
<li>
<p>参考：<a href="https://www.cnblogs.com/zuochengsi-9/p/7050351.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zuochengsi-9/p/7050351.html</a></p>
</li>
</ul>
</blockquote>
<h3> set()</h3>
<p>既然底层是一个数组<code>ArrayList</code>的<code>set()</code>方法也就变得非常简单，直接对数组的指定位置赋值即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> get()</h3>
<p><code>get()</code>方法同样很简单，唯一要注意的是由于底层数组是<code>Object[]</code>，得到元素后需要进行类型转换。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> remove()-removeAll()-retainAll()</h3>
<p><code>remove()</code>方法也有两个版本，一个是<code>remove(int index)</code>删除指定位置的元素，另一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>操作的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让<code>GC</code>起作用，必须显式的为最后一个位置赋<code>null</code>值，那么在最后一个位置的元素没有引用就会被<code>GC</code>回收掉。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>Java GC</code>这里需要特别说明一下，对象能否被<code>GC</code>的依据是是否还有引用指向它，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p>
<h3> size()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> isEmpty()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> contains()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> toArray()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> clear()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> subList()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> trimToSize()</h3>
<p><code>ArrayList</code>还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能，它可以通过<code>trimToSize</code>方法来实现。代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> indexOf()-lastIndexOf()</h3>
<p>获取元素的第一次出现的<code>index</code>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取元素的最后一次出现的<code>index</code>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> forEach()-removeIf()-replaceAll()-sort()</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Fail-Fast机制</h3>
<p><code>ArrayList</code>也采用了快速失败的机制，通过记录<code>modCount</code>参数来实现，在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
<h2> 参考</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/zuochengsi-9/p/7050351.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zuochengsi-9/p/7050351.html</a></p>
</li>
<li>
<p><a href="https://www.pdai.tech/md/java/collection/java-collection-ArrayList.html" target="_blank" rel="noopener noreferrer">https://www.pdai.tech/md/java/collection/java-collection-ArrayList.html</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/lzh-csust-code/p/14840194.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/lzh-csust-code/p/14840194.html</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012926924/article/details/50452411" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012926924/article/details/50452411</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/ccgjava/p/6347425.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ccgjava/p/6347425.html</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>集合类关系图</title>
      <link>https://blog.lxip.top/notes/javacore/Java%E9%9B%86%E5%90%88-%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</link>
      <guid>https://blog.lxip.top/notes/javacore/Java%E9%9B%86%E5%90%88-%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</guid>
      <source url="https://blog.lxip.top/rss.xml">集合类关系图</source>
      <description>类关系图 简单介绍 容器就是可以容纳其他Java对象的对象。Java Collections Framework(JCF)为`Java开发者提供了通用的容器，其始于JDK 1.2。; Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Dou...</description>
      <category>Java</category>
      <content:encoded><![CDATA[<h2> 类关系图</h2>
<h2> 简单介绍</h2>
<ul>
<li>容器就是可以容纳其他<code>Java</code>对象的对象。<code>Java Collections Framework(JCF)</code>为<code>Java</code>开发者提供了通用的容器，其始于<code>JDK 1.2</code>。</li>
<li><code>Java</code>容器里只能放对象，对于基本类型(<code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>等)，需要将其包装成对象类型后(<code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</li>
<li>容器主要包括 <code>Collection</code> 和 <code>Map</code> 两种，<code>Collection</code> 存储着对象的集合，而 <code>Map</code> 存储着键值对（两个对象）的映射表。</li>
</ul>
<h2> Collection</h2>
<h3> 如何学习</h3>
<h3> 如何遍历</h3>
<ul>
<li>遍历操作是集合最基本的操作，顶层的<code>Collection</code>接口提供一个通用高级的遍历方式：迭代器。</li>
<li><code>Collection</code>顶层接口负责定义获得迭代器的方法，底层的数据结构负责实现自己的迭代器，迭代器的工作原理如下图所示：</li>
</ul>
<h3> Set</h3>
<ul>
<li><code>TreeSet</code>【无序集合】</li>
</ul>
<p>基于红黑树实现，支持<strong>有序性操作</strong>，但是<strong>无序集合</strong>。其查找效率不如 <code>HashSet</code>，<code>HashSet</code> 查找的时间复杂度为 <code>O(1)</code>，<code>TreeSet</code> 则为 <code>O(logN)</code>。</p>
<blockquote>
<p><code>TreeSet</code>支持有序性操作的理解：<a href="https://blog.csdn.net/qq_36437446/article/details/80089609" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_36437446/article/details/80089609</a></p>
</blockquote>
<ul>
<li><code>HashSet</code>【无序集合】</li>
</ul>
<p>基于哈希表实现，支持快速查找，但<strong>不支持有序性操作</strong>。并且失去了元素的插入顺序信息，也就是说使用 <code>Iterator</code> 遍历 <code>HashSet</code> 得到的结果是不确定的，即是一个<strong>无序集合</strong>。</p>
<blockquote>
<p><code>HashSet</code>不支持有序性操作的理解：<a href="https://blog.csdn.net/qq_43541242/article/details/108013680" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_43541242/article/details/108013680</a></p>
</blockquote>
<ul>
<li><code>LinkedHashSet</code>【有序集合】</li>
</ul>
<p>具有 <code>HashSet</code> 的查找效率，且内部使用<strong>双向链表</strong>维护元素的插入顺序。</p>
<blockquote>
<p><code>TreeSet</code>和<code>HashSet</code>都是属于<strong>无序的集合</strong>，而<code>LinkedHashSet</code>是属于<strong>有序的集合</strong>，就是说对于<code>TreeSet</code>和<code>HashSet</code>，存储和取出元素的顺序有可能不一致，但是对于<code>LinkedHashSet</code>，其存储和取出元素的顺序是一致的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TreeSet</code>支持<strong>有序性操作（可以使其有序）</strong>，而<code>HashSet</code><strong>不支持有序性操作（不能使其有序）<strong>的意思是说对存储进集合的元素是否会自动排序或者按照我们自定义的方式进行排序（是否能使其有序），最后取出的元素又是否有序（按照自动排序的方式或者我们自定义的方式）。对于</strong>有序性操作</strong>具体可以看两者的构造函数，<code>TreeSet</code>的构造函数有一个含有<code>Comparator</code>参数，而<code>HashSet</code>是没有的，也就是说<code>HashSet</code>不会对存储的元素进行排序，输出的结果不保证有序，如果有序，那也是凑巧。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结一下（区别无序集合、有序集合、有序操作三者的区别很重要）：</strong></p>
<p>1、<code>TreeSet</code>：是<strong>无序集合，但是支持有序操作（使其有序）</strong></p>
<p>2、<code>HashSet</code>：是<strong>无序集合，也不支持有序操作（查找效率高）</strong></p>
<p>3、<code>LinkedHashSet</code>：是<strong>有序集合（是不是支持有序操作已没有意义）</strong></p>
</blockquote>
<h3> List</h3>
<ul>
<li><code>ArrayList</code></li>
</ul>
<p>基于<strong>动态数组</strong>实现，支持<strong>随机访问</strong>，可以很快的根据下标查找元素。</p>
<ul>
<li><code>Vector</code></li>
</ul>
<p>和 <code>ArrayList</code> 类似，但它是<strong>线程安全</strong>的。</p>
<ul>
<li><code>LinkedList</code></li>
</ul>
<p>基于<strong>双向链表</strong>实现，只能<strong>顺序访问</strong>，但是可以快速地在链表中间插入和删除元素。不仅如此，<strong><code>LinkedList</code> 还可以用作栈、队列和双向队列。</strong></p>
<blockquote>
<p><strong><code>ArrayList</code>与<code>LinkedList</code>的区别：</strong></p>
<ul>
<li><code>ArrayList</code>的实现是基于<strong>数组</strong>，<code>LinkedList</code>的实现是基于<strong>双向链表</strong>。</li>
<li><strong>对于随机访问，<code>ArrayList</code>优于<code>LinkedList</code></strong>，<code>ArrayList</code>可以根据下标以<code>O(1)</code>时间复杂度对元素进行随机访问。而<code>LinkedList</code>的每一个元素都依靠地址指针和它后一个元素连接在一起，在这种情况下，查找某个元素的时间复杂度是<code>O(n)</code>。</li>
<li><code>ArrayList</code>与<code>LinkedList</code>在<code>API</code>层面都可以通过<code>index</code>获取，但是底层一个是随机访问，一个是顺序访问。</li>
<li><strong>对于插入和删除操作，<code>LinkedList</code>优于<code>ArrayList</code></strong>，因为当元素被添加到<code>LinkedList</code>任意位置的时候，不需要像<code>ArrayList</code>那样重新计算大小或者是更新索引。</li>
<li><strong><code>LinkedList</code>比<code>ArrayList</code>更占内存</strong>，因为<code>LinkedList</code>的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。</li>
<li><strong>业务中如果想要快速的进行插入和删除，就用<code>LinkedList</code>，如果想快速获取元素或者降低空间消耗，就使用<code>ArrayList</code>。</strong></li>
</ul>
</blockquote>
<h3> Queue</h3>
<ul>
<li><code>LinkedList</code></li>
</ul>
<p>可以用它来实现<strong>双向队列</strong>。</p>
<ul>
<li><code>PriorityQueue</code></li>
</ul>
<p>基于<strong>堆结构</strong>实现，可以用它来实现优先队列。</p>
<h2> Map</h2>
<h3> 如何学习</h3>
<ul>
<li>
<p><code>Map</code>的键是唯一的，值可以重复。</p>
</li>
<li>
<p>学习<code>Map</code>顶层接口，注意顶层接口中还定义了一个内部的接口<code>Entry</code>，这代表的是一个键值对，源码中对其解释：<code>A map entry (key-value pair)</code>。</p>
</li>
<li>
<p><code>Map</code>顶层接口中定义了一个方法可以获取键值对的集合，其方法声明：<code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>。</p>
</li>
</ul>
<h3> 如何遍历</h3>
<ul>
<li>
<p>通过<code>KeySet</code>集合遍历</p>
</li>
<li>
<p>通过<code>EntrySet</code>集合遍历</p>
</li>
<li>
<p>代码演示</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> TreeMap</h3>
<p>基于<strong>红黑树</strong>实现。</p>
<h3> HashMap</h3>
<p>基于<strong>哈希表</strong>实现。</p>
<h3> HashTable</h3>
<p>和 <code>HashMap</code> 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 <code>HashTable</code> 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 <code>ConcurrentHashMap</code> 来支持线程安全，并且 <code>ConcurrentHashMap</code> 的效率会更高，因为 <code>ConcurrentHashMap</code> 引入了分段锁。</p>
<h3> LinkedHashMap</h3>
<p>使用<strong>双向链表</strong>来维护元素的顺序，顺序为插入顺序或者最近最少使用(<code>LRU</code>)顺序。</p>
<blockquote>
<p>深入理解<code>HashMap</code>和<code>TreeMap</code>的区别：</p>
<ul>
<li>两者都是无序<code>Map</code>，就是说存储的顺序和读取的顺序有可能不一致。</li>
<li>排序的区别：从类的定义来看，<code>HashMap</code>和<code>TreeMap</code>都继承自<code>AbstractMap</code>，不同的是<code>HashMap</code>实现的是<code>Map</code>接口，而<code>TreeMap</code>实现的是<code>NavigableMap</code>接口。<code>NavigableMap</code>是<code>SortedMap</code>的一种，实现了对<code>Map</code>中<code>key</code>的排序。所以<code>TreeMap</code>是排序的而<code>HashMap</code>不是。</li>
<li><code>null</code>值的区别：<code>HashMap</code>可以允许一个<code>null key</code>和多个<code>null value</code>。而<code>TreeMap</code>不允许<code>null key</code>，但是可以允许多个<code>null value</code>。</li>
<li>两者都不允许<code>duplicate key</code>,两者都不是线程安全的。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h2> 参考</h2>
<ul>
<li><a href="https://www.pdai.tech/md/java/collection/java-collection-all.html" target="_blank" rel="noopener noreferrer">https://www.pdai.tech/md/java/collection/java-collection-all.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33141246" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/33141246</a></li>
<li><a href="https://www.cnblogs.com/flydean/p/hashmap-vs-treemap.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/flydean/p/hashmap-vs-treemap.html</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>实战项目【开源项目】</title>
      <link>https://blog.lxip.top/questionskills/pracprojects/</link>
      <guid>https://blog.lxip.top/questionskills/pracprojects/</guid>
      <source url="https://blog.lxip.top/rss.xml">实战项目【开源项目】</source>
      <category>实战项目</category>
    </item>
    <item>
      <title>软件教程</title>
      <link>https://blog.lxip.top/questionskills/softguide/</link>
      <guid>https://blog.lxip.top/questionskills/softguide/</guid>
      <source url="https://blog.lxip.top/rss.xml">软件教程</source>
      <description>组件库 vue-clock2 (https://github.com/bestvist/vue-clock2/)：一款简单的图形时钟组件，可以自定义时间、颜色、边框、背景、大小。; 官网：GitHub - bestvist/vue-clock2: vue clock component (https://github.com/bestvist/vue-...</description>
      <category>软件教程</category>
      <content:encoded><![CDATA[<h2> 组件库</h2>
<ul>
<li><a href="https://github.com/bestvist/vue-clock2/" target="_blank" rel="noopener noreferrer">vue-clock2</a>：一款简单的<strong>图形时钟组件</strong>，可以自定义时间、颜色、边框、背景、大小。</li>
</ul>
<blockquote>
<p>官网：<a href="https://github.com/bestvist/vue-clock2/" target="_blank" rel="noopener noreferrer">GitHub - bestvist/vue-clock2: vue clock component</a></p>
<p>演示：<a href="https://bestvist.github.io/vue-clock2/docs/" target="_blank" rel="noopener noreferrer">vue-clock2 | vue clock component (bestvist.github.io)</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/javaLuo/vue-flip-down" target="_blank" rel="noopener noreferrer">vue-flip-down</a>：一款简单的<strong>翻页倒计时组件</strong>，可以自定义结束时间、显示类型、空隙间的文字。</li>
</ul>
<blockquote>
<p>官网：<a href="https://github.com/javaLuo/vue-flip-down" target="_blank" rel="noopener noreferrer">GitHub - javaLuo/vue-flip-down: vue 翻页倒计时组件 妙啊</a></p>
<p>演示：<a href="https://isluo.com/work/vue-flip-down/" target="_blank" rel="noopener noreferrer">Vue-flip-down DEMO (isluo.com)</a></p>
</blockquote>
<ul>
<li><a href="https://codepen.io/quintiontang/pen/MWrywqW" target="_blank" rel="noopener noreferrer">crayon-clock</a>：一款<strong>极简时钟组件</strong>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://www.devpoint.cn/article/390.shtml" target="_blank" rel="noopener noreferrer">VUE构建数字时钟组件|在线数字时钟_devpoint</a></p>
<p>演示：<a href="https://codepen.io/quintiontang/pen/MWrywqW" target="_blank" rel="noopener noreferrer">crayon-clock (codepen.io)</a></p>
<p>代码：<a href="https://gitee.com/xt-gitee/codes/cv451silwfzm63dqa9xe863" target="_blank" rel="noopener noreferrer">https://gitee.com/xt-gitee/codes/cv451silwfzm63dqa9xe863</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/kuan1/kuan-vue-flip-clock" target="_blank" rel="noopener noreferrer">kuan-vue-flip-clock</a>：一款类似于经典<code>flip</code>的<strong>翻页时钟组件</strong>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://github.com/kuan1/kuan-vue-flip-clock" target="_blank" rel="noopener noreferrer">GitHub - kuan1/kuan-vue-flip-clock: 使用vue制作翻页时钟</a></p>
<p>演示：<a href="https://www.kuan1.top/kuan-vue-flip-clock/" target="_blank" rel="noopener noreferrer">kuan-vue-flip-clock (kuan1.top)</a></p>
</blockquote>
<h2> 工具库</h2>
<ul>
<li><a href="https://hutool.cn/" target="_blank" rel="noopener noreferrer">Hutool</a>：一个小而全的<code>Java</code>工具类库，通过<strong>静态方法封装</strong>，降低相关<code>API</code>的学习成本，提高工作效率，使<code>Java</code>拥有函数式语言般的优雅，让<code>Java</code>语言也可以“甜甜的”。</li>
</ul>
<blockquote>
<p>官网：<a href="https://hutool.cn/" target="_blank" rel="noopener noreferrer">Hutool — 🍬A set of tools that keep Java sweet.</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/dromara/hutool/" target="_blank" rel="noopener noreferrer">hutool: 🍬小而全的Java工具类库，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。 (gitee.com)</a></p>
<p><code>API</code>文档：<a href="https://apidoc.gitee.com/dromara/hutool/" target="_blank" rel="noopener noreferrer">Overview (hutool-码云(gitee.com))</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/DiUS/java-faker" target="_blank" rel="noopener noreferrer">java-faker</a>：一个获得<strong>假数据</strong>的神器【 <strong>Faker-骗子</strong> 】。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/DiUS/java-faker" target="_blank" rel="noopener noreferrer">GitHub - DiUS/java-faker: Brings the popular ruby faker gem to Java</a></p>
<p><code>API</code>文档：<a href="http://dius.github.io/java-faker/apidocs/index.html" target="_blank" rel="noopener noreferrer">Overview (Java Faker 0.19-SNAPSHOT API) (dius.github.io)</a></p>
</blockquote>
<ul>
<li><a href="https://guava.dev/" target="_blank" rel="noopener noreferrer">Guava</a>：<code>Guava</code>是<code>Google</code>提供的一组<strong>核心<code>Java</code>库</strong>，其中包括新的集合类型（如<code>multimap</code>和<code>multiset</code>）、不可变集合、图形库以及用于并发、<code>I/O</code>、哈希、缓存、原语、字符串等的实用程序。它广泛用于<code>Google</code>中的大多数<code>Java</code>项目，也被许多其他公司广泛使用。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/google/guava" target="_blank" rel="noopener noreferrer">GitHub - google/guava: Google core libraries for Java</a></p>
<p>官方文档：<a href="https://github.com/google/guava/wiki" target="_blank" rel="noopener noreferrer">Home · google/guava Wiki · GitHub</a></p>
<p>中文文档：<a href="https://www.yiibai.com/guava/guava_environment.html" target="_blank" rel="noopener noreferrer"> Guava教程</a></p>
</blockquote>
<h2> Mac软件</h2>
<ul>
<li><a href="https://mos.caldis.me/" target="_blank" rel="noopener noreferrer">Mos</a>：<code>MagicMouse</code>真的是太难用了，<code>Mac</code>上外接鼠标之后，会出现<strong>滚动卡顿</strong>和<strong>自然方向</strong>的问题，通过该软件可以<strong>实现<code>平滑滚动</code>和<code>反转方向</code></strong>，还可以自定义滚动的速度、持续时长，同时该软件<code>免费开源</code>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://mos.caldis.me/" target="_blank" rel="noopener noreferrer">MOS | 一个用于在 MacOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板 (caldis.me)</a></p>
<p><code>Github</code>地址：<a href="https://github.com/Caldis/Mos" target="_blank" rel="noopener noreferrer">https://github.com/Caldis/Mos</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener noreferrer">Hidden Bar</a>：<strong>隐藏<code>Mac</code>菜单栏</strong>的小工具，免费开源。</li>
</ul>
<blockquote>
<p>官网：<a href="https://dwarves.foundation/opensource/" target="_blank" rel="noopener noreferrer">https://dwarves.foundation/opensource/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener noreferrer">https://github.com/dwarvesf/hidden</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/Splode/pomotroid" target="_blank" rel="noopener noreferrer">Pomotroid</a>：<code>Pomotroid</code>是一个简单且可配置的<strong>番茄计时器</strong>。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/Splode/pomotroid" target="_blank" rel="noopener noreferrer">https://github.com/Splode/pomotroid</a></p>
<p>官网：<a href="https://splode.github.io/pomotroid/" target="_blank" rel="noopener noreferrer">https://splode.github.io/pomotroid/</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/CyC2018/Text-Typesetting" target="_blank" rel="noopener noreferrer">Text-Typesetting</a>：中英混排文档<strong>在线排版工具</strong>。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/CyC2018/Text-Typesetting" target="_blank" rel="noopener noreferrer">https://github.com/CyC2018/Text-Typesetting</a></p>
<p>官网：<a href="https://cyc2018.github.io/Text-Typesetting/" target="_blank" rel="noopener noreferrer">https://cyc2018.github.io/Text-Typesetting/</a></p>
</blockquote>
<ul>
<li><a href="https://gitee.com/Doocs/md" target="_blank" rel="noopener noreferrer">md</a>：一款高度简洁的<strong>微信公众号推文 <code>Markdown</code> 编辑器</strong>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://doocs.gitee.io/md/" target="_blank" rel="noopener noreferrer">https://doocs.gitee.io/md/</a></p>
<p>官网：<a href="https://doocs.github.io/md" target="_blank" rel="noopener noreferrer">https://doocs.github.io/md</a></p>
<p><code>Github</code>地址：<a href="https://github.com/doocs/md" target="_blank" rel="noopener noreferrer">https://github.com/doocs/md</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/Doocs/md" target="_blank" rel="noopener noreferrer">https://gitee.com/Doocs/md</a></p>
</blockquote>
<ul>
<li><a href="https://apps.apple.com/cn/app/input-source-pro/id1537056428?mt=12" target="_blank" rel="noopener noreferrer">Input Source Pro</a>：自动<strong>显示当前输入法名称</strong>的工具。</li>
</ul>
<blockquote>
<p>下载地址：<a href="https://apps.apple.com/cn/app/input-source-pro/id1537056428?mt=12" target="_blank" rel="noopener noreferrer">https://apps.apple.com/cn/app/input-source-pro/id1537056428?mt=12</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/obsproject/obs-studio" target="_blank" rel="noopener noreferrer">obs-studio</a>：用于<strong>视频录制和直播</strong>的免费开源软件。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/obsproject/obs-studio" target="_blank" rel="noopener noreferrer">https://github.com/obsproject/obs-studio</a></p>
<p>官网：<a href="https://obsproject.com/" target="_blank" rel="noopener noreferrer">https://obsproject.com/</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md" target="_blank" rel="noopener noreferrer">awesome-mac</a>：收集了各种类别非常好用的 <strong><code>Mac</code> 应用程序、软件以及工具。</strong></li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="noopener noreferrer">https://github.com/jaywcjlove/awesome-mac</a></p>
<p>官网：<a href="https://git.io/macx" target="_blank" rel="noopener noreferrer">https://git.io/macx</a></p>
</blockquote>
<ul>
<li><a href="https://gitee.com/xwintop/xJavaFxTool" target="_blank" rel="noopener noreferrer">xJavaFxTool</a>：基于<code>JavaFx</code>搭建的<strong>实用小工具集合</strong>，方便开发过程中的代码编写与调试。</li>
</ul>
<blockquote>
<p><code>Api Doc</code>：<a href="https://apidoc.gitee.com/xwintop/xJavaFxTool/" target="_blank" rel="noopener noreferrer">https://apidoc.gitee.com/xwintop/xJavaFxTool/</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/xwintop/xJavaFxTool" target="_blank" rel="noopener noreferrer">https://gitee.com/xwintop/xJavaFxTool</a></p>
<p><code>Github</code>地址：<a href="https://github.com/864381832/xJavaFxTool" target="_blank" rel="noopener noreferrer">https://github.com/864381832/xJavaFxTool</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/fvarrui/JavaPackager" target="_blank" rel="noopener noreferrer">JavaPackager</a>：<code>Java</code>应用的<strong>打包工具</strong>，可以为<code>Windows</code>、<code>Mac</code>、<code>Linux</code>打包应用。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/fvarrui/JavaPackager" target="_blank" rel="noopener noreferrer">https://github.com/fvarrui/JavaPackager</a></p>
</blockquote>
<ul>
<li><a href="https://www.coley.software/Recaf/" target="_blank" rel="noopener noreferrer">Recaf</a>：基于JavaFx构建的开源<strong>字节码编辑器。</strong></li>
</ul>
<blockquote>
<p>官网：<a href="https://www.coley.software/Recaf/" target="_blank" rel="noopener noreferrer">https://www.coley.software/Recaf/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/Col-E/Recaf" target="_blank" rel="noopener noreferrer">https://github.com/Col-E/Recaf</a></p>
</blockquote>
<ul>
<li><a href="https://apps.apple.com/cn/app/menubarx-%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%B5%8F%E8%A7%88%E5%99%A8/id1575588022?mt=12" target="_blank" rel="noopener noreferrer">MenubarX</a>：一款强大的<code>Mac</code><strong>菜单栏浏览器</strong>。</li>
</ul>
<blockquote>
<p>下载链接：<a href="https://apps.apple.com/cn/app/menubarx-%E5%BC%BA%E5%A4%A7%E7%9A%84%E8%8F%9C%E5%8D%95%E6%A0%8F%E6%B5%8F%E8%A7%88%E5%99%A8/id1575588022?mt=12" target="_blank" rel="noopener noreferrer">https://apps.apple.com/cn/app/menubarx-强大的菜单栏浏览器/id1575588022?mt=12</a></p>
</blockquote>
<ul>
<li><a href="https://www.apicloud.com/" target="_blank" rel="noopener noreferrer">apicloud</a>：移动<strong>低代码专家，可以使用其<code>APICloud Studio 3</code>开发工具进行快速开发。</strong></li>
</ul>
<blockquote>
<p>官网：<a href="https://www.apicloud.com/" target="_blank" rel="noopener noreferrer">https://www.apicloud.com/</a></p>
<p><code>APICloud Studio 3</code>下载地址：<a href="https://www.apicloud.com/studio3" target="_blank" rel="noopener noreferrer">https://www.apicloud.com/studio3</a></p>
</blockquote>
<ul>
<li><a href="https://www.audacityteam.org/" target="_blank" rel="noopener noreferrer">Audacity</a>：免费开源且跨平台的<strong>音频编辑软件</strong>，可以用来实现降噪。</li>
</ul>
<blockquote>
<p>官网：<a href="https://www.audacityteam.org/" target="_blank" rel="noopener noreferrer">https://www.audacityteam.org/</a></p>
</blockquote>
<ul>
<li><a href="https://handbrake.fr/" target="_blank" rel="noopener noreferrer">HandBrake</a>：<code>HandBrake</code>是一款适用于<code>Mac</code>系统的<strong>视频压缩软件（免费开源）</strong>，可压缩<code>MP4</code>视频和其他文件格式，软件可以用于调整诸如帧率，码率，分辨率等参数，以便轻松地压缩视频大小。</li>
</ul>
<blockquote>
<p>官网：<a href="https://handbrake.fr/" target="_blank" rel="noopener noreferrer">https://handbrake.fr/</a></p>
</blockquote>
<ul>
<li><a href="https://github.com/keycastr/keycastr" target="_blank" rel="noopener noreferrer">keycastr</a>：一个开源免费的在桌面上<strong>显示键盘按键</strong>的小工具。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/keycastr/keycastr" target="_blank" rel="noopener noreferrer">https://github.com/keycastr/keycastr</a></p>
</blockquote>
<ul>
<li><a href="https://www.warp.dev/" target="_blank" rel="noopener noreferrer">warp</a>：<code>21世纪</code>的专为程序员开发的<strong>终端工具</strong>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://www.warp.dev/" target="_blank" rel="noopener noreferrer">https://www.warp.dev/</a></p>
</blockquote>
<ul>
<li><a href="https://swh.app/" target="_blank" rel="noopener noreferrer">SwitchHosts</a>：<strong>管理<code>host</code>文件</strong>的开源免费工具。</li>
</ul>
<blockquote>
<p>官网：<a href="https://swh.app/" target="_blank" rel="noopener noreferrer">https://swh.app/</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/mirrors/switchhosts" target="_blank" rel="noopener noreferrer">https://gitee.com/mirrors/switchhosts</a></p>
<p><code>Github</code>地址：<a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener noreferrer">https://github.com/oldj/SwitchHosts</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>系统设计【开源项目】</title>
      <link>https://blog.lxip.top/questionskills/systemdesign/</link>
      <guid>https://blog.lxip.top/questionskills/systemdesign/</guid>
      <source url="https://blog.lxip.top/rss.xml">系统设计【开源项目】</source>
      <description>专业软件 RuanCang (https://ruancang.net/)：专业软件免费下载。; 官网：https://ruancang.net/</description>
      <category>系统设计</category>
      <content:encoded><![CDATA[<h2> 专业软件</h2>
<ul>
<li><a href="https://ruancang.net/" target="_blank" rel="noopener noreferrer">RuanCang</a>：<strong>专业软件</strong>免费下载。</li>
</ul>
<blockquote>
<p>官网：<a href="https://ruancang.net/" target="_blank" rel="noopener noreferrer">https://ruancang.net/</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>技术教程【开源项目】</title>
      <link>https://blog.lxip.top/questionskills/techguide/</link>
      <guid>https://blog.lxip.top/questionskills/techguide/</guid>
      <source url="https://blog.lxip.top/rss.xml">技术教程【开源项目】</source>
      <description>CS CS-Notes (https://github.com/CyC2018/CS-Notes)：技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计。; Github地址：https://github.com/CyC2018/CS-Notes 官网：http://www.cyc2018.xyz/ Java相关 advance...</description>
      <category>技术教程</category>
      <content:encoded><![CDATA[<h2> CS</h2>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">CS-Notes</a>：技术面试<strong>必备基础知识</strong>、<code>Leetcode</code>、计算机操作系统、计算机网络、系统设计。</li>
</ul>
<blockquote>
<p><code>Github</code>地址：<a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">https://github.com/CyC2018/CS-Notes</a></p>
<p>官网：<a href="http://www.cyc2018.xyz/" target="_blank" rel="noopener noreferrer">http://www.cyc2018.xyz/</a></p>
</blockquote>
<h2> Java相关</h2>
<ul>
<li><a href="https://gitee.com/Doocs/advanced-java" target="_blank" rel="noopener noreferrer">advanced-java</a>：互联网 <code>Java</code> 工程师<strong>进阶知识完全扫盲</strong>：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。</li>
</ul>
<blockquote>
<p>官网：<a href="https://doocs.gitee.io/advanced-java/#/" target="_blank" rel="noopener noreferrer">https://doocs.gitee.io/advanced-java/#/</a></p>
<p>官网：<a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener noreferrer">https://doocs.github.io/advanced-java/#/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener noreferrer">https://github.com/doocs/advanced-java</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/Doocs/advanced-java" target="_blank" rel="noopener noreferrer">https://gitee.com/Doocs/advanced-java</a></p>
</blockquote>
<h2> 源码相关</h2>
<ul>
<li><a href="https://gitee.com/Doocs/source-code-hunter" target="_blank" rel="noopener noreferrer">source-code-hunter</a>：从源码层面，剖析<strong>挖掘互联网行业主流技术的底层实现原理</strong>，为广大开发者 “提升技术深度” 提供便利。</li>
</ul>
<blockquote>
<p>官网：<a href="https://doocs.gitee.io/source-code-hunter/#/" target="_blank" rel="noopener noreferrer">https://doocs.gitee.io/source-code-hunter/#/</a></p>
<p>官网：<a href="https://doocs.github.io/source-code-hunter/#/" target="_blank" rel="noopener noreferrer">https://doocs.github.io/source-code-hunter/#/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/doocs/source-code-hunter" target="_blank" rel="noopener noreferrer">https://github.com/doocs/source-code-hunter</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/Doocs/source-code-hunter" target="_blank" rel="noopener noreferrer">https://gitee.com/Doocs/source-code-hunter</a></p>
</blockquote>
<h2> 算法和数据结构</h2>
<ul>
<li><a href="https://gitee.com/Doocs/leetcode" target="_blank" rel="noopener noreferrer">leetcode</a>：多种编程语言<strong>实现 <code>LeetCode</code></strong>。</li>
</ul>
<blockquote>
<p>官网：<a href="https://doocs.github.io/leetcode/#/" target="_blank" rel="noopener noreferrer">https://doocs.github.io/leetcode/#/</a></p>
<p>官网：<a href="https://doocs.gitee.io/leetcode/#/" target="_blank" rel="noopener noreferrer">https://doocs.gitee.io/leetcode/#/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/doocs/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/doocs/leetcode</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/Doocs/leetcode" target="_blank" rel="noopener noreferrer">https://gitee.com/Doocs/leetcode</a></p>
</blockquote>
<h2> JVM相关</h2>
<ul>
<li><a href="https://gitee.com/Doocs/jvm" target="_blank" rel="noopener noreferrer">jvm</a>：<strong><code>JVM</code> 底层原理</strong>最全知识总结</li>
</ul>
<blockquote>
<p>官网：<a href="https://doocs.gitee.io/jvm/" target="_blank" rel="noopener noreferrer">https://doocs.gitee.io/jvm/</a></p>
<p>官网：<a href="https://doocs.github.io/jvm/" target="_blank" rel="noopener noreferrer">https://doocs.github.io/jvm/</a></p>
<p><code>Github</code>地址：<a href="https://github.com/doocs/jvm" target="_blank" rel="noopener noreferrer">https://github.com/doocs/jvm</a></p>
<p><code>Gitee</code>地址：<a href="https://gitee.com/Doocs/jvm" target="_blank" rel="noopener noreferrer">https://gitee.com/Doocs/jvm</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>书籍资源</title>
      <link>https://blog.lxip.top/resources/books/</link>
      <guid>https://blog.lxip.top/resources/books/</guid>
      <source url="https://blog.lxip.top/rss.xml">书籍资源</source>
      <description>资源名称 分享链接 ------------------------------------------ ----------------------------------------- 《Labuladong的算法小抄》 https://www.aliyundrive.com/s/8ouAjxFVgUX 《小傅哥的IDEA插件开发手册》 https...</description>
      <category>书籍</category>
      <content:encoded><![CDATA[<table>
<thead>
<tr>
<th>资源名称</th>
<th>分享链接</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>《Labuladong的算法小抄》</code></td>
<td><a href="https://www.aliyundrive.com/s/8ouAjxFVgUX" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/8ouAjxFVgUX</a></td>
</tr>
<tr>
<td><code>《小傅哥的IDEA插件开发手册》</code></td>
<td><a href="https://www.aliyundrive.com/s/Pq7xVp9bXdR" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/Pq7xVp9bXdR</a></td>
</tr>
<tr>
<td><code>《疯狂Java讲义第四版》</code></td>
<td><a href="https://www.aliyundrive.com/s/Yd2L8XtGWUa" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/Yd2L8XtGWUa</a></td>
</tr>
<tr>
<td><code>《Java核心技术-卷1-基础知识》</code></td>
<td><a href="https://www.aliyundrive.com/s/EvpXjq55LXn" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/EvpXjq55LXn</a></td>
</tr>
<tr>
<td><code>《Java核心技术-卷2-高级特性》</code></td>
<td><a href="https://www.aliyundrive.com/s/hT5RQDe6q1k" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/hT5RQDe6q1k</a></td>
</tr>
<tr>
<td><code>《Linux命令速查手册》</code></td>
<td><a href="https://www.aliyundrive.com/s/ophXiMFVPrB" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/ophXiMFVPrB</a></td>
</tr>
<tr>
<td><code>《鸟哥的Linux私房菜-高清》</code></td>
<td><a href="https://www.aliyundrive.com/s/bd9PeqCf82N" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/bd9PeqCf82N</a></td>
</tr>
<tr>
<td><code>《鸟哥的Linux私房菜-非高清》</code></td>
<td><a href="https://www.aliyundrive.com/s/e9ag9zBwTCS" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/e9ag9zBwTCS</a></td>
</tr>
<tr>
<td><code>《数学建模算法与应用-第二版-司守奎》</code></td>
<td><a href="https://www.aliyundrive.com/s/uDtSpLzFqz2" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/uDtSpLzFqz2</a></td>
</tr>
<tr>
<td><code>《统计学习方法-李航》</code></td>
<td><a href="https://www.aliyundrive.com/s/Gae5A3tJaZn" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/Gae5A3tJaZn</a></td>
</tr>
<tr>
<td><code>《Matlab神经网络30个案例分析》</code></td>
<td><a href="https://www.aliyundrive.com/s/EVibkTrcFex" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/EVibkTrcFex</a></td>
</tr>
<tr>
<td><code>《具有AI功能加持的终端工具warp使用总结》</code></td>
<td><a href="https://www.aliyundrive.com/s/kXKqP4RqyUD" target="_blank" rel="noopener noreferrer">https://www.aliyundrive.com/s/kXKqP4RqyUD</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>快速导航</title>
      <link>https://blog.lxip.top/resources/share/</link>
      <guid>https://blog.lxip.top/resources/share/</guid>
      <source url="https://blog.lxip.top/rss.xml">快速导航</source>
      <description>搜索引擎 开源社区 优质博客 在线工具 在线教程 文档相关 其他导航</description>
      <category>快速导航</category>
      <content:encoded><![CDATA[<h2> 搜索引擎</h2>
<h2> 开源社区</h2>
<h2> 优质博客</h2>
<h2> 在线工具</h2>
<h2> 在线教程</h2>
<h2> 文档相关</h2>
<h2> 其他导航</h2>
]]></content:encoded>
    </item>
    <item>
      <title>个人导航</title>
      <link>https://blog.lxip.top/resources/share/nav.html</link>
      <guid>https://blog.lxip.top/resources/share/nav.html</guid>
      <source url="https://blog.lxip.top/rss.xml">个人导航</source>
      <category>快速导航</category>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>编程知识库</title>
      <link>https://blog.lxip.top/resources/share/navlearn.html</link>
      <guid>https://blog.lxip.top/resources/share/navlearn.html</guid>
      <source url="https://blog.lxip.top/rss.xml">编程知识库</source>
      <description>介绍 编程知识库是一个涵盖各种编程语言和技术的资源库，旨在为所有程序员提供一个有趣、充实的学习体验。我们深信，对于那些充满好奇心和求知欲的人来说，编程可以是一项非常有趣和充实的活动。 编程知识库致力于为所有编程初学者和专业人士提供一个包罗万象的学习平台，涵盖各种不同级别的课程和项目，适合不同的学习目标和水平。我们的知识库不仅包含最新的技术和语言，还提供...</description>
      <category>快速导航</category>
      <category>编程知识库</category>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<blockquote>
<p>编程知识库是一个涵盖各种编程语言和技术的资源库，旨在为所有程序员提供一个有趣、充实的学习体验。我们深信，对于那些充满好奇心和求知欲的人来说，编程可以是一项非常有趣和充实的活动。</p>
<p>编程知识库致力于为所有编程初学者和专业人士提供一个包罗万象的学习平台，涵盖各种不同级别的课程和项目，适合不同的学习目标和水平。我们的知识库不仅包含最新的技术和语言，还提供了许多经典的编程问题和解决&gt;方案，可以帮助你深入了解编程世界的本质。</p>
<p>我们的编程知识库不仅提供丰富的学习资源，还提供交流和互动的平台。你可以通过讨论区或社交媒体与其他编程爱好者交流想法、讨论问题或分享你的项目。我们相信，通过互动和分享，你可以更快、更有趣地学习编程，并与其他程序员建立有意义的联系。</p>
<p>无论你是一名新手，还是一名专业人士，编程知识库都是一个有趣、充实的学习平台，让你掌握最新的技术和知识，探索编程的乐趣和创造力。快来加入我们，一起探索编程世界的精彩吧！</p>
</blockquote>
<h2> 后端知识库</h2>

<h2> 前端知识库</h2>

<h2> 运维知识库</h2>

]]></content:encoded>
    </item>
    <item>
      <title>影音资源</title>
      <link>https://blog.lxip.top/resources/videos/</link>
      <guid>https://blog.lxip.top/resources/videos/</guid>
      <source url="https://blog.lxip.top/rss.xml">影音资源</source>
      <category>影视</category>
      <category>音乐</category>
    </item>
    <item>
      <title>动态规划</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html</guid>
      <source url="https://blog.lxip.top/rss.xml">动态规划</source>
      <category>算法</category>
      <category>数据结构</category>
    </item>
    <item>
      <title>数学运算</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97.html</guid>
      <source url="https://blog.lxip.top/rss.xml">数学运算</source>
      <description>常用的位操作 Java中的位操作符 注意 Java中位操作符的操作数只能是整型（byte、short、int、long）和字符型数据（char）。; Java中位操作符一共有7个，其中4个是位逻辑运算符，3个是移位运算符。; 使用按位操作符时要注意：相等（==）与不相等（!=）的优先级在按位操作符之上！这意味着，位运算符的优先级极小，所以使用位运算符时...</description>
      <category>算法</category>
      <category>数据结构</category>
      <content:encoded><![CDATA[<h2> 常用的位操作</h2>
<h3> Java中的位操作符</h3>
<p>::: warning 注意</p>
<ul>
<li><code>Java</code>中位操作符的操作数只能是<strong>整型<code>（byte、short、int、long）</code>和字符型数据<code>（char）</code>。</strong></li>
<li><code>Java</code>中位操作符<strong>一共有7个，其中4个是位逻辑运算符，3个是移位运算符。</strong></li>
<li>使用按位操作符时要注意：相等<code>（==）</code>与不相等<code>（!=）</code>的优先级在按位操作符之上！这意味着，位运算符的<strong>优先级极小，所以使用位运算符时，最好加上括号。</strong></li>
</ul>
<p>:::</p>
<h4> 4个位逻辑运算符</h4>
<ul>
<li><strong>位逻辑运算符</strong>包括按位取反<code>（~）</code>、按位与<code>（&amp;）</code>、按位或<code>（|）</code>和按位异或<code>（^）</code>4种。
<ul>
<li>与操作符 <code>“&amp;”</code>，如果两个输入位都是 1，那么输出位是 1，否则输入位是 0。<strong>【对应位全都为1，则为1】</strong></li>
<li>或操作符 <code>“|”</code> ，如果两个输入位有一个是 1，那么输出位是 1，只有两个输入位都是 0，输出位才是 0。<strong>【对应位含有1，则为1】</strong></li>
<li>异或运算符 <code>“^”</code>，如果两个输入位都为 1 或者都为 0，那么输出位是 0，否则输出位是 1。<strong>【对应位相同，则为0，反之为1】</strong></li>
<li>非运算符 <code>“~”</code>，这个一元操作符，只能对一个数操作，规则是输出位与输入位相反。<strong>【一元操作符，输入1，则输出0；输入0，则输出1】</strong></li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 补充</p>
<ul>
<li>数字的二进制表现形式为 <strong>“有符号的二进制补码”。</strong>
<ul>
<li>原码：数字的二进制表示法，<strong>最高位为符号位，“ 0 ” 为正，“ 1 ” 为负。</strong></li>
<li>反码：正数的反码与原码相同，<strong>负数的反码对原码逐位取反，符号位除外。</strong></li>
<li>补码：正数的补码与原码相同，<strong>负数的补码在其反码末位加 1。</strong></li>
<li>负数的二进制算法（以 <code>-6</code> 为例，<code>int</code>类型占 <code>4</code> 个字节， <code>1</code> 个字节是 <code>8</code> 位）：
<ul>
<li>求<code>-6</code> 的原码，即：<code>10000000 00000000 00000000 00000110</code></li>
<li>求该二进制数的反码，即：<code>11111111 11111111 11111111 11111001</code></li>
<li>对以上求得的二进制数加 <code>1</code>，即：<code>11111111 11111111 11111111 11111010</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>:::</p>
<p>::: tip 说明</p>
<p><strong>位逻辑运算符</strong>用来操作整数的二进制位，会对两个参数中对应的位执行布尔代数运算，并最终生成一个结果。</p>
<p>:::</p>
<h4> 3个移位运算符</h4>
<ul>
<li>移位运算符包括左移<code>（&lt;&lt;）</code>、右移<code>（&gt;&gt;）</code>和无符号右移<code>（&gt;&gt;&gt;）</code>3种。
<ul>
<li>左移位操作符 “<code>&lt;&lt;</code>” 按照操作符右侧指定的位数将操作符左边的操作数向左移动（低位补零）。【<strong>左移之后，低位补0</strong>】</li>
<li>“有符号”右移位操作符 “<code>&gt;&gt;</code>” 按照操作符右侧指定的位数将操作符左边的操作数向右移动。该操作符使用 “<strong>符号扩展</strong>”：若符号为正，则高位插入 0；若符号为负，则高位插入 1。【<strong>右移之后，高位进行符号扩展</strong>】</li>
<li>“无符号”右移位操作符 “<code>&gt;&gt;&gt;</code>”，该操作符使用 “<strong>零扩展</strong>”，无论正负，都在高位插入 0。【<strong>右移之后，高位进行零扩展</strong>】</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>移位运算符可以与等号组合使用（<code>&lt;&lt;=</code> 或 <code>&gt;&gt;=</code> 或 <code>&gt;&gt;&gt;=</code>），表示操作符左边的值会移动由右边数值指定的位数，再将得到的结果赋给左边的变量。</li>
<li>在数字没有溢出的前提下，对于正数和负数，<strong>左移一位都相当于乘以2的1次方，左移<code>n</code>位就相当于乘以2的<code>n</code>次方，右移一位相当于除2，右移<code>n</code>位相当于除以2的<code>n</code>次方。</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 说明</p>
<p><strong>移位操作符</strong>的运算对象也是二进制的 “位”，但是只能用来处理整数类型。</p>
<p>:::</p>
<p>::: warning 注意</p>
<ul>
<li><strong>逻辑运算符</strong>包括逻辑与<code>（&amp;&amp;）</code>、逻辑或<code>（||）</code>和逻辑非<code>（!）</code>，前两个是<strong>二元运算符</strong>，后一个是<strong>一元运算符</strong>。</li>
</ul>
<p>:::</p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/blknemo/p/14141417.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/blknemo/p/14141417.html</a></p>
</blockquote>
<h3> 几个有趣的位操作</h3>
<ul>
<li><strong>利用或操作 <code>|</code> 和空格将英文字符转换为小写</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>利用与操作 <code>&amp;</code> 和下划线将英文字符转换为大写</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>利用异或操作 <code>^</code> 和空格进行英文字符大小写互换</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上操作能够产生奇特效果的原因在于 <code>ASCII码</code>。<strong>字符的<code>ASCII码</code>其实就是数字</strong>，恰巧这些字符对应的数字通过位运算就能得到正确的结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>判断两个数是否异号</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>不用临时变量交换两个数</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>加一</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>减一</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 位操作的黑科技玩法</p>
<ul>
<li>有一个叫做<code>Bit Twiddling Hacks</code>的外国网站收集了几乎所有位操作的黑科技玩法。</li>
<li>网址：<a href="http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel" target="_blank" rel="noopener noreferrer">http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel</a></li>
</ul>
<p>:::</p>
<h3> n&amp;(n-1)的运用</h3>
<ul>
<li>
<p><strong><code>n &amp; (n-1)</code> 是算法中常见的位操作，作用是消除数字 <code>n</code> 的二进制表示中的最后一个 1</strong>。</p>
</li>
<li>
<p>其核心逻辑就是，<code>n - 1</code> 一定可以消除最后一个 1，同时把其后的 0 都变成 1，这样再和 <code>n</code> 做一次 <code>&amp;</code> 运算，就可以仅仅把最后一个 1 变成 0 了。</p>
</li>
</ul>
<p><strong>1、计算汉明权重<code>（Hamming Weight）</code></strong></p>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/number-of-1-bits/" target="_blank" rel="noopener noreferrer">位1的个数</a></p>
<ul>
<li>就是让你返回 <code>n</code> 的二进制表示中有几个 1。因为 <code>n &amp; (n - 1)</code> 可以消除最后一个 1，所以可以用一个循环不停地消除 1 同时计数，直到 <code>n</code> 变成 0 为止。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、判断一个数是不是 2 的指数</strong></p>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/power-of-two/" target="_blank" rel="noopener noreferrer">2的幂</a></p>
<p>一个数如果是 2 的指数，那么它的二进制表示一定只含有一个 1：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 <code>n &amp; (n-1)</code> 的技巧就很简单了（注意运算符优先级，括号不可以省略）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> a^a=0的运用</h3>
<p>::: tip 异或运算的性质</p>
<ul>
<li>一个数和它本身做异或运算结果为 0，即 <code>a ^ a = 0</code>；一个数和 0 做异或运算的结果为它本身，即 <code>a ^ 0 = a</code>。</li>
<li>满足<strong>结合律和交换律。</strong></li>
<li>由于异或运算满足交换律和结合律，所以<strong>总是能把成对儿的数字消去，留下缺失的那个元素。</strong></li>
</ul>
<p>:::</p>
<p><strong>1、查找只出现一次的元素</strong></p>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/single-number/" target="_blank" rel="noopener noreferrer">只出现一次的数字</a></p>
<ul>
<li>把所有数字进行异或，成对儿的数字就会变成 0，落单的数字和 0 做异或还是它本身，所以最后异或的结果就是只出现一次的元素。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、寻找缺失的元素</strong></p>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/missing-number/" target="_blank" rel="noopener noreferrer">丢失的数字</a></p>
<ul>
<li>给一个长度为 <code>n</code> 的数组，其索引应该在 <code>[0,n)</code>，但是现在你要装进去 <code>n + 1</code> 个元素 <code>[0,n]</code>，那么肯定有一个元素装不下，请找出这个缺失的元素。</li>
<li>思路一：把这个数组排个序，然后遍历一遍，就可以很容易的找到缺失的那个元素</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>思路二：利用数据结构的特性，用一个 <code>HashSet</code> 把数组里出现的数字都储存下来，再遍历 <code>[0,n]</code> 之间的数字，去 <code>HashSet</code> 中查询，也可以很容易查出那个缺失的元素。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>思路三：利用等差数列求和公式，题目的意思可以这样理解：现在有个等差数列 <code>0, 1, 2,..., n</code>，其中少了某一个数字，那这个数字就是 <code>sum(0,1,..n) - sum(nums)</code> 。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>思路四：利用一个数和它本身做异或运算结果为 0，一个数和 0 做异或运算还是它本身的性质。</li>
</ul>
<p>::: tip 异或运算满足交换律和结合律</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p>
<p>比如说 <code>nums = [0,3,1,4]</code>：</p>
<ul>
<li>
<p>假设先把索引补一位，然后让每个元素和自己相等的索引相对应：</p>
</li>
<li>
<p>通过上图可以发现：<strong>只要把所有的元素和索引做异或运算，成对儿的数字都会消为 0，只有这个落单的元素会剩下。</strong></p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 两道常考的阶乘算法题</h2>
<h3> 题一</h3>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/factorial-trailing-zeroes/" target="_blank" rel="noopener noreferrer">阶乘后的零</a></p>
<ul>
<li>
<p><strong>输入一个非负整数 <code>n</code>，请你计算阶乘 <code>n!</code> 的结果末尾有几个 0</strong>。</p>
</li>
<li>
<p>比如说输入 <code>n = 5</code>，算法返回 1，因为 <code>5! = 120</code>，末尾有一个 0。</p>
</li>
<li>
<p>两个数相乘结果末尾有 0，一定是因为两个数中有因子 2 和 5，因为 10 = 2 x 5。</p>
<ul>
<li><strong>问题转化为：<code>n!</code> 最多可以分解出多少个因子 2 和 5</strong>？</li>
<li>比如说 <code>n = 25</code>，那么 <code>25!</code> 最多可以分解出几个 2 和 5 相乘？这个主要取决于能分解出几个因子 5，因为每个偶数都能分解出因子 2，因子 2 肯定比因子 5 多得多。<code>25!</code> 中 5 可以提供一个，10 可以提供一个，15 可以提供一个，20 可以提供一个，25 可以提供两个，总共有 6 个因子 5，所以 <code>25!</code> 的结果末尾就有 6 个 0。</li>
<li><strong>问题转化为：<code>n!</code> 最多可以分解出多少个因子 5</strong>？</li>
<li>难点在于像 25，50，125 这样的数，可以提供不止一个因子 5，怎么才能不漏掉呢？</li>
</ul>
</li>
<li>
<p><strong>假设 <code>n = 125</code>，来算一算 <code>125!</code> 的结果末尾有几个 0：</strong></p>
<ul>
<li>首先，<strong>125 / 5 = 25</strong>，这一步就是计算有多少个像 5，15，20，25 这些 5 的倍数，它们一定可以提供一个因子 5。</li>
<li>然后，像 25，50，75 这些 25 的倍数，可以提供两个因子 5，那么我们再计算出 <code>125!</code> 中有 <strong>125 / 25 = 5</strong> 个 25 的倍数，它们每人可以额外再提供一个因子 5。</li>
<li>最后，我们发现 125 = 5 x 5 x 5，像 125，250 这些 125 的倍数，可以提供 3 个因子 5，那么我们还得再计算出 <code>125!</code> 中有 <strong>125 / 125 = 1</strong> 个 125 的倍数，它还可以额外再提供一个因子 5。</li>
<li><code>125!</code> 最多可以分解出 25 + 5 + 1 = 31 个因子 5，也就是说阶乘结果的末尾<strong>有 31 个 0。</strong></li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>时间复杂度是底数为 5 的对数，也就是 <code>O(logN)</code>。</li>
</ul>
<h3> 题二</h3>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/" target="_blank" rel="noopener noreferrer">阶乘函数后K个零</a></p>
<ul>
<li>
<p><strong>输入一个非负整数 <code>K</code>，请你计算有多少个 <code>n</code>，满足 <code>n!</code> 的结果末尾恰好有 <code>K</code> 个 0</strong>。</p>
</li>
<li>
<p>比如说输入 <code>K = 1</code>，算法返回 5，因为 <code>5!,6!,7!,8!,9!</code> 这 5 个阶乘的结果最后只有一个 0，即有 5 个 <code>n</code> 满足条件。</p>
</li>
<li>
<p>一个直观地暴力解法就是穷举，<strong>因为随着 <code>n</code> 的增加，<code>n!</code> 肯定是递增的，<code>trailingZeroes(n!)</code> 肯定也是递增的</strong>，伪码逻辑如下：</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>对于这种具有单调性的函数，用 <code>for</code> 循环遍历，可以用二分查找进行降维打击。</strong></li>
<li>搜索有多少个 <code>n</code> 满足 <code>trailingZeroes(n) == K</code>，其实就是在问，<strong>满足条件的 <code>n</code> 最小是多少，最大是多少，最大值和最小值一减，就可以算出来有多少个 <code>n</code> 满足条件</strong>，这就是二分查找中<strong>搜索左侧边界</strong>和<strong>搜索右侧边界</strong>。</li>
</ul>
<p>::: tip 寻找上界和下界</p>
<p>因为二分查找需要给一个<strong>搜索区间</strong>，也就是上界和下界，上述伪码中 <code>n</code> 的下界显然是 0，但上界是 <code>+inf</code>，这个正无穷应该如何表示出来呢？</p>
<ul>
<li>首先，数学上的正无穷肯定是无法编程表示出来的，我们一般的方法是用一个非常大的值，大到这个值一定不会被取到。比如说 <code>int</code> 类型的最大值 <code>INT_MAX</code>（<code>2^31 - 1</code>），还不够的话就 <code>long</code> 类型的最大值 <code>LONG_MAX</code>（<code>2^63 - 1</code>）。</li>
<li>需要多大才能<strong>一定不会被取到</strong>呢？<strong>这就需要认真读题，看看题目给的数据范围有多大</strong>。</li>
<li>这道题目实际上给了限制，<code>K</code> 是在 <code>[0, 10^9]</code> 区间内的整数，也就是说，<code>trailingZeroes(n)</code> 的结果最多可以达到 <code>10^9</code>。然后我们可以反推，当 <code>trailingZeroes(n)</code> 结果为 <code>10^9</code> 时，<code>n</code> 为多少？这个不需要你精确计算出来，你只要找到一个数 <code>hi</code>，使得 <code>trailingZeroes(hi)</code> 比 <code>10^9</code> 大，就可以把 <code>hi</code> 当做正无穷，作为搜索区间的上界。</li>
<li><code>trailingZeroes</code> 函数是单调函数，那可以先算一下 <code>trailingZeroes(INT_MAX)</code> 的结果，比 <code>10^9</code> 小一些，那再用 <code>LONG_MAX</code> 算一下，远超 <code>10^9</code> 了，所以 <strong><code>LONG_MAX</code> 可以作为搜索的上界。</strong></li>
</ul>
<p>:::</p>
<ul>
<li><strong>在区间 <code>[0, LONG_MAX]</code> 中寻找满足 <code>trailingZeroes(n) == K</code> 的左侧边界和右侧边界</strong>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>时间复杂度主要是二分搜索，从数值上来说 <code>LONG_MAX</code> 是 <code>2^63 - 1</code>，虽然大得离谱，但是二分搜索是对数级的复杂度，<code>log(LONG_MAX)</code> 是一个常数；</li>
<li>每次二分的时候都会调用一次 <code>trailingZeroes</code> 函数，复杂度 <code>O(logK)</code>；</li>
<li>所以总体的时间复杂度就是 <code>O(logK)</code>。</li>
</ul>
<p>::: tip 规律和优化</p>
<ul>
<li><strong>这个题的答案其实不是<code>0</code>就是<code>5</code>，所以其实只需要判断阶乘结果末尾恰好有 <code>K</code> 个 <code>0</code>的值是否存在即可，如果存在，那么我们直接<code>return 5</code>；如果不存在，则直接<code>return 0</code>即可。</strong></li>
<li>此优化<strong>效率提升明显。</strong></li>
</ul>
<p>:::</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 高效寻找素数</h2>
<h2> 高效进行模幂运算</h2>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/super-pow/" target="_blank" rel="noopener noreferrer">超级次方</a></p>
<ul>
<li><strong>要求你的算法返回幂运算 <code>a^b</code> 的计算结果与 1337 取模（<code>mod</code>，也就是余数）后的结果</strong>，这个 <code>b</code> 是一个<strong>非常大的正整数且会以数组形式给出。</strong>
<ul>
<li><strong>一是如何处理用数组表示的指数</strong>。现在 <code>b</code> 是一个数组，也就是说 <code>b</code> 可以非常大，没办法直接转成整型，否则可能溢出。</li>
<li><strong>二是如何得到求模之后的结果</strong>。先把幂运算结果算出来，然后做 <code>% 1337</code> ，但指数运算的真实结果肯定会大得吓人，也就是说，算出来真实结果也没办法表示，早都溢出报错了。</li>
<li><strong>三是如何高效进行幂运算</strong>。</li>
</ul>
</li>
</ul>
<h3> 如何处理数组指数</h3>
<ul>
<li>
<p><strong>首先明确问题</strong>：现在 <code>b</code> 是一个数组，不能表示成整型，而且数组的特点是随机访问，删除最后一个元素比较高效。</p>
<ul>
<li>以 <code>b = [1,5,6,4]</code> 来举例，结合<strong>指数运算</strong>的法则，我们可以发现这样的一个规律：</li>
</ul>
</li>
<li>
<p>问题规模缩小，这是<strong>递归</strong>的标志。</p>
</li>
</ul>
<p><strong>先不考虑取模的情况：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 如何处理mod运算</h3>
<ul>
<li><strong>首先明确问题</strong>：由于计算机的编码方式，形如 <code>(a * b) % base</code> 这样的运算，乘法的结果可能导致溢出，我们希望找到一种技巧，能够化简这种表达式，避免溢出同时得到结果。
<ul>
<li>比如在二分查找中，我们求中点索引时用 <code>(l+r)/2</code> 转化成 <code>l+(r-l)/2</code>，避免溢出的同时得到正确的结果。</li>
</ul>
</li>
<li>快速进行<code>mod</code>运算公式：<strong><code>(a * b) % k = [(a % k)(b % k)] % k</code></strong>
<ul>
<li><strong>对乘法的结果求模，等价于先对每个因子都求模，然后对因子相乘的结果再求模</strong>。</li>
</ul>
</li>
</ul>
<p><strong>完整代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><div class="highlight-line">&nbsp;</div><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>myPow</code>函数先对因子 <code>a</code> 求模，然后每次都对乘法结果 <code>res</code> 求模</strong>，这样可以保证 <code>res *= a</code> 这句代码执行时两个因子都是小于 <code>base</code> 的，也就一定不会造成溢出，同时结果也是正确的。</p>
<ul>
<li><code>myPow</code>函数也可以通过<strong>递归方式</strong>进行优化，完整代码如下<code>（推荐使用高级的快速幂算法，时间复杂度可以达到O(logN)对数级别）</code>：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 如何高效求幂（快速幂）</h3>
<ul>
<li>
<p><code>快速幂</code>（<strong>快速的进行幂运算</strong>）是一种简单而有效的小算法，它能够以<code>O(log⁡N)</code>的时间复杂度进行幂运算，快速幂不仅本身非常常见，而且后续很多算法也都会用到快速幂。</p>
</li>
<li>
<p>举个例子：<strong>7的10次方，怎样算比较快？</strong></p>
<ul>
<li>最朴素的想法：<code>7*7=49、49*7=343</code>，依次一步一步算，共进行了<strong>9次</strong>乘法。</li>
<li>先算7的5次方，即<code>7*7*7*7*7</code>，再算它的平方，共进行了<strong>5次</strong>乘法。</li>
<li>先算<code>7*7</code>得49，则7的5次方为<code>49*49*7</code>，再算它的平方，共进行了<strong>4次</strong>乘法。</li>
<li>模仿这样的过程，我们得到一个在 <code>O(log⁡N)</code> 时间内计算出幂的算法，也就是<strong>快速幂。</strong></li>
</ul>
</li>
<li>
<p><strong>递归快速幂</strong>【 <mark>重点掌握</mark> 】</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 注意</p>
<ul>
<li>在实际问题中，题目常常会要求对一个<strong>大数取模</strong>，这是因为<strong>幂运算的计算结果可能会非常巨大。</strong></li>
<li>快速幂也应当进行取模，此时应当注意：<strong>三种情况都需要考虑取模</strong>，如果取模的<code>base</code>较大，还应当使用<code>long</code>类型进行定义。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>递归虽然<strong>简洁且运算速度快</strong>，但会产生<strong>额外的空间开销</strong>，可以把递归<strong>改写为循环</strong>，来避免对栈空间的大量占用，也就是<strong>非递归快速幂</strong>。
<ul>
<li>时间复杂度：<code>O(log⁡N)</code>，即为递归的层数。</li>
<li>空间复杂度：<code>O(log⁡N)</code>，即为递归的层数。这是由于递归的函数调用会使用栈空间。</li>
</ul>
</li>
</ul>
<p>:::</p>
<ul>
<li><strong>非递归快速幂</strong>【 <mark>重点掌握</mark> 】</li>
</ul>
<p>::: tip 引入</p>
<ul>
<li>换一个角度来引入<strong>非递归的快速幂</strong>，还是7的10次方，但这次，把10写成<strong>二进制</strong>的形式，也就是 <code>0b1010</code> 。</li>
<li>要计算 7^0b1010^ ，可以怎么做？
<ul>
<li>很自然地想到可以把它拆分为 7^0b1000^*7^0b10^ 。</li>
<li>实际上，对于任意的整数，都可以把它拆成若干个 7^0b100...^的形式相乘。</li>
<li>而这些7^0b100...^，恰好就是 7^1^ 、7^2^、7^4^等等，我们只需<strong>不断把底数平方</strong>就可以算出它们。</li>
</ul>
</li>
</ul>
<p>:::</p>
<p>不考虑取模的情况：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑取模的情况：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>复杂度分析
<ul>
<li>时间复杂度：<code>O(log⁡N)</code>，即为对 <code>n</code> 进行二进制拆分的时间复杂度。</li>
<li>空间复杂度：<code>O(1)</code>。</li>
</ul>
</li>
<li>总结
<ul>
<li>空间复杂度要求的不是太高的话，建议还是使用<strong>递归快速幂。</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/95902286" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/95902286</a></p>
<p><a href="https://leetcode.cn/problems/powx-n/solutions/238559/powx-n-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/powx-n/solutions/238559/powx-n-by-leetcode-solution/</a></p>
</blockquote>
<ul>
<li><code>LeetCode</code>相关题目：</li>
</ul>
<p><a href="https://leetcode.cn/problems/powx-n/?show=1" target="_blank" rel="noopener noreferrer">Pow(x, n)</a>：考虑<strong>指数为负数</strong>的情况。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><div class="highlight-line">&nbsp;</div><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: warning 注意</p>
<ul>
<li><code>Java</code>中<code>int</code>类型的范围是<code>[-2147483648,2147483647]</code>，即最大值是2^31^-1，最小值是-2^31^。</li>
<li>所以在测试用例<code>x=1，n=-2147483648</code>运行时，使用下面的代码会出现问题：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p>
<p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/?show=1" target="_blank" rel="noopener noreferrer">数值的整数次方</a></p>
<h2> 同时寻找缺失和重复的元素</h2>
<p><code>LeetCode</code>相关题目：<a href="https://leetcode.cn/problems/set-mismatch/" target="_blank" rel="noopener noreferrer">错误的集合</a></p>
<ul>
<li>
<p>给一个长度为 <code>N</code> 的数组 <code>nums</code>，其中本来装着 <code>[1..N]</code> 这 <code>N</code> 个元素，无序。但是现在出现了一些错误，<code>nums</code> 中的一个元素出现了重复，也就同时导致了另一个元素的缺失。</p>
</li>
<li>
<p>正常思路：首先记录每一个元素出现的次数，找到重复的元素，然后在找缺失的元素。</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 复杂度分析</p>
<ul>
<li>时间复杂度：<code>O(N)</code></li>
<li>空间复杂度：<code>O(N)</code></li>
<li><code>O(N)</code> 的时间复杂度遍历数组是无法避免的，所以可以想想办法如何降低空间复杂度，是否可以在 <code>O(1)</code> 的空间复杂度之下找到重复和缺失的元素？</li>
</ul>
<p>:::</p>
<ul>
<li>思路分析（<strong>优化空间复杂度到<code>O(1)</code></strong>）
<ul>
<li>每个元素和数组索引有一定的对应关系。</li>
<li><strong>暂且将 <code>nums</code> 中的元素变为 <code>[0..N-1]</code>，这样每个元素就和一个数组索引完全对应了，这样方便理解一些</strong>。</li>
<li>如果说 <code>nums</code> 中不存在重复元素和缺失元素，那么每个元素就和唯一一个索引值对应。</li>
<li>有一个元素重复了，同时导致一个元素缺失了，<strong>会导致有两个元素对应到了同一个索引，而且会有一个索引没有元素对应过去。</strong></li>
<li>找到这个重复对应的索引，就找到了那个<strong>重复的元素</strong>；找到那个没有元素对应的索引，就找到了那个<strong>缺失的元素</strong>。</li>
</ul>
</li>
</ul>
<p>::: tip 思路分析</p>
<ul>
<li>用数组元素的绝对值做下标，然后让这个下标对应的元素置为负的，相当于<strong>把它标记为已访问过的元素</strong>，如果某个元素做下标时对应的元素值为负，则这个数是重复值。再次遍历数组<strong>寻找唯一没有置为负的那个元素</strong>，它的下标就是缺失的元素值。</li>
<li>假设元素是 <code>[0..N-1]</code>，但<strong>题目要求是 <code>[1..N]</code></strong>，所以需要修改部分的值才能得到正确结果。</li>
<li>时间复杂度：<code>O(N)</code></li>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<p>:::</p>
<ul>
<li>
<p>原理图如下：</p>
</li>
<li>
<p>完整代码如下：</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>对于这种数组问题，<strong>关键点在于元素和索引是成对儿出现的，常用的方法是<code>排序</code>、<code>异或</code>、<code>映射</code></strong>。</li>
<li><code>LeetCode</code>相关题目：
<ul>
<li><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/?show=1" target="_blank" rel="noopener noreferrer">数组中重复的数据</a></li>
<li><a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/?show=1" target="_blank" rel="noopener noreferrer">找到所有数组中消失的数字</a></li>
</ul>
</li>
</ul>
<h2> 在无限序列中随机抽取元素</h2>
<h2> 游戏中的随机算法</h2>
<h2> 一行代码解决的算法题</h2>
<h2> 几个反直觉的概率问题</h2>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://blog.lxip.top/rss.xml">数据结构</source>
      <description>手写LRU缓存淘汰算法 LRU算法描述 LRU算法设计 代码实现 手写LFU算法 算法描述 思路分析 代码框架 LFU核心逻辑 二叉树搜索树操作集锦 判断BST的合法性 在BST中查找一个数是否存在 在BST中插入一个数 在BST中删除一个数 完全二叉树的节点数为什么难算 思路分析 复杂度分析 用各种遍历框架序列化和反序列化二叉树 题目描述 前序遍历解...</description>
      <category>算法</category>
      <category>数据结构</category>
      <content:encoded><![CDATA[<h2> 手写LRU缓存淘汰算法</h2>
<h3> LRU算法描述</h3>
<h3> LRU算法设计</h3>
<h3> 代码实现</h3>
<h2> 手写LFU算法</h2>
<h3> 算法描述</h3>
<h3> 思路分析</h3>
<h3> 代码框架</h3>
<h3> LFU核心逻辑</h3>
<h2> 二叉树搜索树操作集锦</h2>
<h3> 判断BST的合法性</h3>
<h3> 在BST中查找一个数是否存在</h3>
<h3> 在BST中插入一个数</h3>
<h3> 在BST中删除一个数</h3>
<h2> 完全二叉树的节点数为什么难算</h2>
<h3> 思路分析</h3>
<h3> 复杂度分析</h3>
<h2> 用各种遍历框架序列化和反序列化二叉树</h2>
<h3> 题目描述</h3>
<h3> 前序遍历解法</h3>
<h3> 后序遍历解法</h3>
<h3> 中序遍历解法</h3>
<h3> 层级遍历解法</h3>
<h2> Git原理之二叉树最近公共祖先</h2>
<h3> 二叉树的最近公共祖先</h3>
<h3> 思路分析</h3>
<h2> 特殊数据结构-单调栈</h2>
<h3> 单调栈解题模版</h3>
<h3> 题目变形</h3>
<h3> 如何处理循环数组</h3>
<h2> 特殊数据结构-单调队列</h2>
<h3> 搭建解题框架</h3>
<h3> 实现单调队列数据结构</h3>
<h3> 算法复杂度分析</h3>
<h2> 如何判断回文链表</h2>
<h3> 判断回文单链表</h3>
<h3> 优化空间复杂度</h3>
<h3> 最后总结</h3>
<h2> 秀操作-纯递归反转链表</h2>
<h3> 递归反转整个链表</h3>
<h3> 反转链表前N个节点</h3>
<h3> 反转链表的一部分</h3>
<h3> 最后总结</h3>
<h2> 秀操作-K个一组反转链表</h2>
<h3> 分析问题</h3>
<h3> 代码实现</h3>
<h3> 最后总结</h3>
]]></content:encoded>
    </item>
    <item>
      <title>核心套路</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%A0%B8%E5%BF%83%E5%A5%97%E8%B7%AF.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E6%A0%B8%E5%BF%83%E5%A5%97%E8%B7%AF.html</guid>
      <source url="https://blog.lxip.top/rss.xml">核心套路</source>
      <description>学习算法和刷题的框架思维 学习解决问题的思路、套路、框架，养成“框架思维”，不应该纠结于问题的细节，把握问题的共性和本质，做到举一反三。 数据结构的存储方式 数据结构的底层存储方式只有两种：数组（顺序存储）和链表（链式存储）。 其他的数据结构，比如哈希表、栈、队列、堆、树、图等都是属于具体的上层建筑，都是在数组或者链表上的特殊操作，只是API特性不同而...</description>
      <category>算法</category>
      <category>数据结构</category>
      <content:encoded><![CDATA[<h2> 学习算法和刷题的框架思维</h2>
<p>学习解决问题的<strong>思路、套路、框架</strong>，养成“框架思维”，<strong>不应该纠结于问题的细节</strong>，把握问题的共性和本质，做到举一反三。</p>
<h3> 数据结构的存储方式</h3>
<p>数据结构的底层存储方式只有两种：<code>数组（顺序存储）和链表（链式存储）</code>。</p>
<p>其他的数据结构，比如哈希表、栈、队列、堆、树、图等都是属于具体的上层建筑，都是在数组或者链表上的特殊操作，只是<code>API</code>特性不同而已。</p>
<p>::: tip 数组</p>
<p>数组由于是紧凑连续存储，因此可以随机访问，通过索引快速找到对应的元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配足，所以数组如果要扩容，需要先重新分配一块更大的空间，再把数据全部复制进去，时间复杂度为<code>O(N)</code>；而且如果想在数组中间和开始位置进行插入和删除操作，每次必须移动后面的所有数据以保持连续，时间复杂度为<code>O(N)</code>。</p>
<p><strong>数组在开始、中间、最后位置的增删改查分析如下：</strong></p>
<ul>
<li>开始位置：增加和删除都需要挪动元素，所以效率不高，但是查询和修改就比较高效。</li>
<li>中间位置：增加和删除都需要挪动元素，所以效率不高，但是查询和修改就比较高效。</li>
<li>最后位置：增加和删除位置不需要挪动元素，效率比较高，同时查询和修改效率也比较高。</li>
</ul>
<p>:::</p>
<p>::: tip 链表</p>
<p>链表因为元素不连续，靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后继，操作指针即可删除该元素或者插入新元素，时间复杂度为<code>O(1)</code>。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，因此会消耗相对更多的存储空间。</p>
<p><strong>链表在开始、中间、最后位置的增删改查分析如下：</strong></p>
<ul>
<li>开始位置：增加和删除元素只需要操作指针，效率较高，查询和修改元素就在头节点不需要进行遍历，所以效率也比较高。</li>
<li>中间位置：增加和删除元素只需要操作指针，效率较高，查询和修改元素需要从头节点开始进行遍历，时间复杂度为<code>O(N)</code>，所以效率不高。</li>
<li>最后位置：增加和删除元素只需要操作指针，效率较高，查询和修改元素需要从头节点开始进行遍历，时间复杂度为<code>O(N)</code>，所以效率不高。</li>
</ul>
<p>:::</p>
<p>综上所述：</p>
<ul>
<li><strong>如果想要查询和修改比较高效，那就使用数组的底层结构。</strong></li>
<li><strong>如果想要插入和删除比较高效，那就使用链表的底层结构。</strong></li>
</ul>
<h3> 数据结构的基本操作</h3>
<p>任何的数据结构其基本操作就是<strong>遍历+访问</strong>，在详细一点就是：<strong>各种数据结构在不同的应用场景下尽可能高效地进行增删改查。</strong></p>
<p>各种数据结构的遍历+访问无非就是<strong>两种形式：</strong><code>线性（for/while迭代）和非线性（递归）</code>。</p>
<p><strong>数组遍历框架</strong>，是典型的线形结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>链表遍历框架</strong>，兼具迭代和递归结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二叉树具有前序遍历、中序遍历、后序遍历，其实链表也有前序遍历和后序遍历。如果在前序遍历的位置打印<code>head.val</code>，那么就是<strong>正序打印</strong>链表；如果在后序遍历的位置打印<code>head.val</code>，那么就是<strong>倒序打印</strong>链表。</p>
<p><strong>二叉树遍历框架</strong>，是典型的非线性递归遍历结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码可以看到二叉树的遍历与链表的遍历方式非常相似，所以可以将遍历方式扩展到<code>N</code>叉树。</p>
<p><strong><code>N</code>叉树的遍历框架</strong>如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>N</code>叉树的遍历又可以扩展到图的遍历</strong>，因为图就是好几个<code>N</code>叉树的结合体。但是图有可能出现环，这其实很好解决，使用布尔数组<code>visited</code>做标记就可以了。所谓的框架思维就是记住这些遍历框架，根据具体问题在框架上添加代码即可。</p>
<h3> 算法刷题指南</h3>
<p>::: tip 数据结构和算法</p>
<p><strong>数据结构</strong>是工具，<strong>算法</strong>是通过合适的工具解决特定问题的方法。</p>
<p>:::</p>
<ul>
<li>先刷<strong>二叉树</strong>，因为二叉树是最容易培养框架思维的，而且大部分的常考算法<strong>本质上都是树的遍历问题。</strong></li>
<li>试着<strong>从框架看问题</strong>，而不要纠结于细节。</li>
</ul>
<h2> 动态规划解题套路框架</h2>
<h2> 回溯算法解题套路框架</h2>
<h3> 全排列问题</h3>
<h3> N皇后问题</h3>
<h3> 最后总结</h3>
<h2> BFS算法套路框架</h2>
<ul>
<li>
<p><code>BFS（广度优先搜索-Broad First Search）</code>和<code>DFS（深度优先搜索-Depth First Search）</code>是两种特别常用的算法，其中<code>DFS</code>可被认为就是前面的回溯算法。</p>
</li>
<li>
<p><code>BFS</code>核心思想：<strong>把一些问题抽象成图，从一个点开始，向四周扩散，一般来说，<code>BFS</code>都是用队列这种数据结构，每次都是将一个节点周围的所有节点加入队列。</strong></p>
</li>
<li>
<p><code>BFS</code>和<code>DFS</code>的区别：<strong><code>BFS</code>找到的路径一定是最短的，但代价是空间复杂度要比<code>DFS</code>大很多。</strong></p>
</li>
</ul>
<h3> 算法框架</h3>
<p><code>BFS</code>出现的场景：问题的本质就是让你<strong>在一幅图中找到从起点到终点的最近距离</strong>。所谓的<code>BFS</code>本质就是解决该问题的，但是实际中很多题目的描述都是这个本质场景的各种变体，要把现实问题的场景抽象成一幅图，使用<code>BFS</code>的思想进行求解。</p>
<p>框架如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 变量解释</p>
<ul>
<li>
<p><code>q</code>就是核心的<code>队列</code>数据结构；</p>
</li>
<li>
<p><code>cur</code>就是当前节点，即队列的头元素；</p>
</li>
<li>
<p><code>cur.adj()</code>泛指与<code>cur</code>相邻的所有节点，比如在二维数组中，<code>cur</code>上下左右四面的位置就是相邻节点；</p>
</li>
<li>
<p><code>visited</code>的主要作用是防止走回头路，大部分时候都是必需的，但是<strong>像一般的二叉树结构，没有子节点到父节点的指针，不会走回头路就不需要<code>visited</code></strong>；</p>
</li>
</ul>
<p>:::</p>
<h3> 二叉树的最小高度</h3>
<ul>
<li>
<p>需求：计算一棵二叉树的最小高度，输入一棵二叉树，计算它的最小高度，也就是根节点到叶子节点的最短距离。</p>
</li>
<li>
<p>分析：<strong>起点</strong>是什么？<code>root！</code><strong>终点</strong>是什么？<code>cur.left == null and cur.right == null!</code></p>
</li>
</ul>
<p>代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 理解</p>
<p>整个算法过程<strong>通过画图</strong>可以很容易的理解，后面的几个<code>LeetCode</code>题目也建议通过<strong>画图</strong>的方式加深对<code>BFS</code>思想的理解。</p>
<p>:::</p>
<ul>
<li>两个问题</li>
</ul>
<p>::: tip 为什么BFS可以找到最短距离，DFS不行吗？</p>
<ul>
<li><code>BFS</code>的逻辑是<code>depth</code>每增加一次，队列中所有节点都向前迈了一步，这个逻辑保证了一旦找到一个终点，走的步数是最少的，<code>BFS</code>的时间复杂度最坏情况是<code>O(N)</code>。</li>
<li><code>DFS</code>也是可以找到最短路径的，时间复杂度也是<code>O(N)</code>，但是实际上比<code>BFS</code>低效很多。这是因为DFS是靠递归的堆栈记录走过的路径的，如果要找到最短路径，肯定要把二叉树中的所有树杈都走完，然后才能对比得到最短路径，但是<code>BFS</code>借助队列可以做到一步一步“齐头并进”，是可以在还没遍历完整的一棵树的时候就可以找到最短距离。</li>
<li>总结一下：<code>DFS</code>是线，<code>BFS</code>是面，<code>DFS</code>是单打独斗，<code>BFS</code>是集体行动。</li>
</ul>
<p>:::</p>
<p>::: tip 既然BFS那么好，那么为什么还需要DFS？</p>
<ul>
<li><code>BFS</code>是可以找到最短路径，但是其空间复杂度高，而<code>DFS</code>的空间复杂度较低。</li>
<li>假设有一棵树是满二叉树，节点数为<code>N</code>，对于<code>DFS</code>算法来说，空间复杂度无非就是递归堆栈，在最坏情况下顶多就是树的高度，也就是<code>O(logN)</code>。但是对于<code>BFS</code>算法来说。队列中每次都会存储二叉树一层的节点，这样在最坏情况下空间复杂度应该是树的最下层节点的数量，也就是<code>N/2</code>，即<code>O(N)</code>。</li>
<li><code>BFS</code>还是有代价的，一般来说在找最短路径的时候用的是<code>BFS</code>，其他情况用的还是<code>DFS</code>多一些（递归代码好写）。</li>
</ul>
<p>:::</p>
<ul>
<li><code>LeetCode</code>相关题目</li>
</ul>
<p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">二叉树的最小深度</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">二叉树的层序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener noreferrer">二叉树的层序遍历2</a></p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">二叉树的最大深度</a></p>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">N叉树的层序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener noreferrer">二叉树的锯齿形层序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener noreferrer">路径之和</a></p>
<p>::: tip 小总结</p>
<p><code>BFS</code>是广度优先搜索，其抽象是以图的概念进行说明，但是<strong>在二叉树等数据结构中却频繁用到该算法</strong>，这是因为<strong>二叉树、二维数组等就是图的具体化</strong>。</p>
<p>图中某个节点向四周扩散具体到二叉树、二维数组等数据结构分别是：<strong>二叉树某个节点扩散到其左右子节点、二维数组某个节点扩散到其上下左右四个子节点</strong>。但是树结构一般不用<code>visited</code>来防止走回头路，因为根本就没有子节点到父节点的指针存在，所以不用担心会走回头路。</p>
<p>:::</p>
<h3> 解开密码锁的最少次数</h3>
<ul>
<li>
<p>题目链接：<a href="https://leetcode.cn/problems/open-the-lock/" target="_blank" rel="noopener noreferrer">打开转盘锁</a></p>
</li>
<li>
<p>不管所有的限制条件，不管 <code>deadends</code> 和 <code>target</code> 的限制，就思考⼀个问题：如果让你设计⼀个算法，穷举所有可能的密码组合，你怎么做？</p>
<ul>
<li>
<p>穷举：总共有 4 个位置， 每个位置可以向上转，也可以向下转，也就是<strong>有 8 种可能</strong>，然后，<strong>再以这 8 种密码作为基础，对每个密码再转⼀下，穷举出所有可能。</strong></p>
</li>
<li>
<p>仔细想想，这就可以抽象成⼀幅图，每个节点有 8 个相邻的节点，⼜让求最短距离，这就是<strong>典型的 <code>BFS</code>。</strong></p>
</li>
</ul>
</li>
</ul>
<p><strong>穷举所有可能的密码组合</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码可以穷举所有的密码组合，但是还存在如下问题：</p>
<ul>
<li>会走回头路。比如从<code>0000</code>转到<code>1000</code>之后，在转<code>1000</code>的时候还会转到<code>0000</code>，这样就产生了死循环。</li>
<li>没有终止条件。按照题目要求找到<code>target</code>就应该返回步数。</li>
<li>没有对<code>deadends</code>进行处理。这些死亡密码是不能出现的，所以在碰到这些密码的时候应该跳过。</li>
</ul>
<p>通过对上述代码进行修改：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 优化</p>
<p><code>deads</code>集合和<code>visited</code>集合都是记录不合法访问的集合，可以不需要 <code>visited</code> 这个哈希集合，直接将遍历过的元素加到<code>deads</code>集合中，效果是⼀样的，可能更加优雅⼀些。</p>
<p>:::</p>
<p><code>BFS</code>算法还有一种稍微高级的优化思路：<code>双向BFS</code>，使用<code>双向BFS</code>可以进一步提高算法的效率。</p>
<p>::: tip 传统的BFS和双向BFS的区别</p>
<p><code>传统的BFS框架</code>就是从起点开始向四周扩散，遇到终点时停⽌；⽽<code>双向BFS</code> 则是从起点和终点同时开始扩散，当两边有交集的时候停⽌。</p>
<p>:::</p>
<p>从 <code>Big O</code> 表⽰法分析算法复杂度的话，它俩的最坏复杂度都是 <code>O(N)</code> ，但是实际上<code>双向BFS</code> 确实会快⼀些。</p>
<p>按照<code>传统BFS</code>算法的策略，会把整棵树的节点都搜索⼀遍，最后找到<code>target</code> ；⽽<code>双向BFS</code>其实只遍历了半棵树就出现了交集，也就是找到了最短距离，明显实现了效率上的提升。</p>
<p>::: warning 双向BFS的局限性</p>
<ul>
<li><code>双向BFS</code>也有局限，因为必须要知道终点在哪⾥。</li>
<li>⽐如刚才讨论的⼆叉树最⼩⾼度的问题，⼀开始根本就不知道终点在哪⾥，也就⽆法使⽤<code>双向BFS</code>；但是第⼆个密码锁的问题，是可以使⽤<code>双向BFS</code>算法来提⾼效率。</li>
</ul>
<p>:::</p>
<p>使用<code>双向BFS</code>进行优化：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>不再使⽤队列，⽽是使⽤ <code>HashSet</code> ⽅便快速判断两个集合是否有交集。</li>
<li>另外的⼀个技巧点就是 <code>while</code> 循环的最后交换 <code>q1</code> 和 <code>q2</code> 的内容，所以只要默认扩散 <code>q1</code> 就相当于轮流扩散 <code>q1</code> 和 <code>q2</code> 。</li>
</ul>
<p><code>双向BFS</code>还有⼀个优化，就是每次将<strong>少的那个集合</strong>进行扩散，避免轮流扩散<code>q1</code>和<code>q2</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为按照 <code>BFS</code> 的逻辑，队列（集合）中的元素越多，扩散之后新的队列 （集合）中的元素就越多；在<code>双向BFS</code>算法中，如果我们每次都选择⼀个较⼩的集合进⾏扩散，那么占⽤的空间增⻓速度就会慢⼀些，效率就会⾼⼀ 些。</p>
<p>::: tip 时间复杂度</p>
<p>⽆论<code>传统BFS</code>还是<code>双向BFS</code>，⽆论做不做优化，从<code>Big O</code>衡量标准来看，时间复杂度都是⼀样的。因为<code>双向BFS</code>的代码只是更换了返回结果的方式（哈希集合是否有交集），每次进行扩散的方式不是并行扩散的，而是轮流进行扩散。</p>
<p>:::</p>
<ul>
<li><code>LeetCode</code>相关题目</li>
</ul>
<p><a href="https://leetcode.cn/problems/zlDJc7/description/" target="_blank" rel="noopener noreferrer">开密码锁</a></p>
<h2> 双指针技巧套路框架</h2>
<p>双指针技巧可以分为如下的两类：</p>
<ul>
<li>一类是“快慢指针”，主要解决链表中的问题，比如典型的判定链表中是否包含环。</li>
<li>一类事“左右指针”，主要解决数组（或者字符串）中的问题，比如二分搜索。</li>
</ul>
<h3> 快慢指针的常用算法</h3>
<p>快慢指针一般会初始化指向链表的头节点<code>head</code>，前进时快指针<code>fast</code>在前，慢指针<code>slow</code>在后。</p>
<h4> 判定链表中是否含有环</h4>
<p>链表的特点是每个节点只知道下一个节点，所以一个指针是无法判断链表中是否含有环的。</p>
<ul>
<li>如果链表中不含环，那么这个指针最终会遇到空指针<code>null</code>，表示链表到头了，可以判断当前链表是不含有环的。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>如果链表中含有环，上述代码就会陷入死循环，因为环形链表中没有空指针<code>null</code>，无法判断当前链表含有环。</li>
</ul>
<p>判断单链表中是否有环，经典的算法就是使用双指针，一个跑得快，一个跑得慢。如果不含有环，跑得快的那个指针最终会遇到<code>null</code>，说明链表不含环；如果含有环，快指针最终会和慢指针相遇，说明链表含有环。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 已知链表中含有环，返回这个环的起始位置</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论：当快慢指针相遇时，让其中任何一个指针指向头节点，然后让两个指针以相同的速度前进，再次相遇时所在的节点位置就是环的起点位置。</strong></p>
<h4> 寻找无环单链表的中点</h4>
<p>最直接的思路：先遍历一遍链表，算出链表的长度<code>n</code>，然后再一次遍历链表，走<code>n/2</code>步，这样就得到了链表的中点。</p>
<p>漂亮的思路：使用双指针，让快指针一次前进两步，慢指针一次前进一步，当快指针到达链表尽头的时候，慢指针就处于链表的中间位置。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tip 注意</p>
<p>当链表长度为奇数的时候，<code>slow</code>恰巧停留在中间位置；当链表长度为偶数的时候，<code>slow</code>最终的位置是中间偏右。</p>
<p>:::</p>
<p>::: warning 寻找链表中点作用</p>
<p>寻找链表中点的一个重要作用是对链表进行归并排序，可以尝试参考数组的归并排序写出链表的归并排序。</p>
<p>:::</p>
<h4> 寻找单链表的倒数第K个元素</h4>
<p>使用快慢指针，让快指针先走<code>k</code>步，然后快慢指针开始以相同速率前进，这样当快指针到链表末尾的时候，慢指针所在的位置就是链表倒数第<code>k</code>个节点（为了简化，假设<code>k</code>不会超过链表长度）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LeetCode相关题目：</p>
<p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener noreferrer">剑指Offer22.链表中倒数第k个节点</a></p>
<p><a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/" target="_blank" rel="noopener noreferrer">面试题02.02.返回倒数第k个节点</a></p>
<p><a href="https://leetcode-cn.com/problems/c32eOV/" target="_blank" rel="noopener noreferrer">剑指OfferII022.链表中环的入口节点</a></p>
<h3> 左右指针的常用算法</h3>
<p>左右指针一般运用在数组问题中，实际就是两个索引值，一般初始化规则如下：</p>
<p><code>left=0;</code></p>
<p><code>right=length(array)-1;</code></p>
<h4> 二分搜索</h4>
<p>后续会有二分搜索的细节描述，在此给出最简单的二分查找算法，旨在突出其双指针特性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 两数之和</h4>
<p>输入一个已按照升序排列的有序数组<code>nums</code>和一个目标值<code>target</code>，在<code>nums</code>中找到两个数使得它们相加之和等于<code>target</code>，请返回这两个数的索引（可以假设这两个数一定存在，索引从1开始）。</p>
<p><strong>只要数组有序，就应该想到使用双指针技巧，通过<code>sum</code>的大小来调节<code>left</code>和<code>right</code>的移动。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 反转数组</h4>
<p>虽然很多编程语言提供了原地反转数组的API，但是仍然要懂得其原理。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 滑动窗口算法</h4>
<p>滑动窗口算法是双指针技巧的最高境界，<strong>严格讲，它是快慢指针在数组（字符串）上的应用</strong>。若掌握该算法，可以<strong>解决一大类字符串匹配问题</strong>。该部分比前面稍微复杂，可以查看后续的滑动窗口算法框架。</p>
<h2> 二分搜索算法</h2>
<p>::: tip 一个笑话
有一天阿东到图书馆借了<code>N</code>本书，出图书馆的时候，警报响了，于是保安把阿东拦下，
要检查哪本书没有登记出借。阿东正准备把每一本书放在报警器下过一下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分搜索都不会吗？</p>
<p>于是保安把书分成两堆，让第一堆过一下报警器，报警器响；于是再把这堆书分成
两堆。最终，检测了<code>logN</code>次之后，保安成功地找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。</p>
<p>从此，图书馆丢了<code>N-1</code>本书。</p>
<p>:::</p>
<p>二分搜索并不简单，<code>Knuth</code>“大佬”（发明<code>KMP</code>算法的那位）是这么评价二分搜索的：</p>
<p><code>Although the basic idea of binary search is comparatively straightforward, the details canbe surprisingly tricky.</code></p>
<p><strong>说人话就是：思路很简单，细节是魔鬼。</strong></p>
<p><strong>其细节在于到底要给<code>mid</code>加1还是减1，<code>while</code>里面到底是<code>&lt;=</code>还是<code>&lt;</code>。</strong></p>
<h3> 二分搜索框架</h3>
<p>基础框架如下所示，后面的二分搜索的变形都是基于该框架。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>
<ul>
<li>不要出现<code>else</code>，而是使用<code>else-if</code>考虑到所有的情况，可以清楚展现细节。</li>
<li><code>...</code>标记的地方都是出现细节问题的地方。</li>
<li><code>int mid = left + (right - left) / 2</code>是为了防止溢出。</li>
</ul>
<h3> 寻找一个数（基本的二分搜索）</h3>
<p>需求：在一个有序数组中查找一个数，如果找到就返回其索引，如果找不到就返回-1。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>问题一：为什么<code>while</code>循环的条件中是<code>&lt;=</code>，而不是<code>&lt;</code>？</p>
</li>
<li>
<p>问题二：为什么left = mid + 1和right = mid - 1？有的代码是right = mid或者left = mid，没有这些加加减减，到底是怎么回事？怎么判断？</p>
</li>
<li>
<p>问题三：该算法有什么缺陷？</p>
</li>
</ul>
<h3> 寻找左侧边界的二分搜索</h3>
<h3> 寻找右侧边界的二分搜索</h3>
<h3> 逻辑统一</h3>
<h2> 滑动窗口算法变成默写题</h2>
<h3> 最小覆盖子串</h3>
<h3> 字符串排列</h3>
<h3> 找所有字母异位词</h3>
<h3> 最长无重复子串</h3>
]]></content:encoded>
    </item>
    <item>
      <title>算法思维</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4.html</guid>
      <source url="https://blog.lxip.top/rss.xml">算法思维</source>
      <category>算法</category>
      <category>数据结构</category>
    </item>
    <item>
      <title>高频面试</title>
      <link>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95.html</link>
      <guid>https://blog.lxip.top/notes/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95.html</guid>
      <source url="https://blog.lxip.top/rss.xml">高频面试</source>
      <description>如何高效寻找素数 素数 如果一个数只能被1和它本身整除，那么这个数就是素数。 实现一个函数，输入一个正整数n，函数返回区间[2,n)中素数的个数。 函数签名如下：int countPrimes(int n) 一般实现 分析问题：该算法的时间复杂度为O(n^2)，使用isPrime函数一个一个的进行判断不是高效的做法，而且就算是使用isPrime函数，也...</description>
      <category>算法</category>
      <category>数据结构</category>
      <content:encoded><![CDATA[<h2> 如何高效寻找素数</h2>
<p>::: tip 素数</p>
<p>如果一个数只能被1和它本身整除，那么这个数就是素数。</p>
<p>:::</p>
<p>实现一个函数，输入一个正整数<code>n</code>，函数返回区间<code>[2,n)</code>中素数的个数。</p>
<p>函数签名如下：<code>int countPrimes(int n)</code></p>
<h3> 一般实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析问题：该算法的时间复杂度为<code>O(n^2)</code>，使用<code>isPrime</code>函数一个一个的进行判断不是高效的做法，而且就算是使用<code>isPrime</code>函数，也是存在计算冗余的。</p>
<h3> 稍加优化</h3>
<p><code>isPrime</code>函数是可以进行优化的，优化代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>i</code>不需要遍历到<code>n</code>，只需要遍历到<code>sqrt(n)</code>即可，这是因为<code>sqrt(n)</code>是反转临界点，一个数等于两个数相乘，中间的临界点就是<code>sqrt(n)*sqrt(n)</code>，<code>[2,sqrt(n)]</code>之间如果找不到可整除的因子，那么<code>[sqrt(n),n]</code>之间也肯定找不到可整除的因子了，因为是后半部分是前半部分的因子交换所得，这就叫做“乘法因子的交换性”。</p>
<h3> 高效实现</h3>
<p>使用“筛数法”进行实现，2是素数，那么在<code>n</code>的范围中，2的倍数就不再是素数了；3是素数，那么在<code>n</code>的范围中，3的倍数就不再是素数了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的过程仍然是可以进行优化的，优化的地方主要有两点：</p>
<ul>
<li>外层循环：因为乘法因子的对称性，遍历范围可以设置为<code>[2,sqrt(n)]</code>。</li>
<li>内层循环：<code>j</code>每次都从2开始存在冗余计算，只需要从<code>i</code>的平方开始标记即可。</li>
</ul>
<p>重新优化后的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的算法有一个名字，叫做<code>Sieve of Eratosthenes</code>，该算法的时间复杂度为<code>O(NloglogN)</code>。</p>
<h2> 如何高效进行模幂运算</h2>
<h3> 如何处理数组指数</h3>
<h3> 如何处理mod运算</h3>
<h3> 如何高效求幂</h3>
<h2> 如何运用二分搜索算法</h2>
<h2> 如何高效解决接雨水问题</h2>
<h2> 如何去除有序数组的重复元素</h2>
<h2> 如何寻找最长回文子串</h2>
<h2> 如何运用贪心思想玩跳跃游戏</h2>
<h2> 如何运用贪心算法做时间管理</h2>
<h2> 如何判定括号合法性</h2>
<h2> 如何调度考生的座位</h2>
<h2> Union-Find算法详解</h2>
<h2> Union-Find算法应用</h2>
<h2> 一行代码就能解决的算法题</h2>
<h3> Nim游戏</h3>
<h3> 石子游戏</h3>
<h3> 电灯开关问题</h3>
]]></content:encoded>
    </item>
    <item>
      <title>Netty核心</title>
      <link>https://blog.lxip.top/notes/framework/netty/Netty%E6%A0%B8%E5%BF%83.html</link>
      <guid>https://blog.lxip.top/notes/framework/netty/Netty%E6%A0%B8%E5%BF%83.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Netty核心</source>
      <description>一、概述 1、什么是Netty Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端。; 注意：Netty的异步还是基于多路复用的，并没有实现真正意义上的异步IO 2、Netty的优势 如果使用传统NIO，其工作量大，Bug 多 需要自己构建协议; 解决 TCP 传输问题，如粘包、半包; 因为bug的存在...</description>
      <category>Netty</category>
      <category>网络编程</category>
      <content:encoded><![CDATA[<h2> 一、概述</h2>
<h3> 1、什么是Netty</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>Netty</code> 是一个<strong>异步的、基于事件驱动</strong>的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端。</li>
</ul>
<blockquote>
<p>注意：<code>Netty</code>的异步还是基于多路复用的，并没有实现真正意义上的异步<code>IO</code></p>
</blockquote>
<h3> 2、Netty的优势</h3>
<p><strong>如果使用传统<code>NIO</code>，其工作量大，<code>Bug</code> 多</strong></p>
<ul>
<li>需要自己构建协议</li>
<li>解决 <code>TCP</code> 传输问题，如粘包、半包</li>
<li>因为<code>bug</code>的存在，<code>epoll</code> 空轮询导致 <code>CPU</code> 100%</li>
</ul>
<p><strong><code>Netty</code> 对 <code>API</code> 进行增强，使之更易用，如</strong></p>
<ul>
<li><code>FastThreadLocal</code> =&gt; <code>ThreadLocal</code></li>
<li><code>ByteBuf</code> =&gt; <code>ByteBuffer</code></li>
</ul>
<p><strong>相比于其他网络应用框架</strong></p>
<ul>
<li><code>Mina</code> 由 <code>Apache</code> 维护，将来 <code>3.x</code> 版本可能会有较大重构，破坏 <code>API</code> 向下兼容性，<strong><code>Netty</code> 的开发迭代更迅速，<code>API</code> 更简洁</strong></li>
<li><code>Netty</code> 久经考验，经历多年，很多<code>Bug</code>问题已经被修复，<code>Netty</code> 版本的迭代过程如下：
<ul>
<li><code>2.x 2004</code></li>
<li><code>3.x 2008</code></li>
<li><strong><code>4.x 2013（常用）</code></strong></li>
<li><code>5.x 已废弃（没有明显的性能提升，维护成本高）</code></li>
</ul>
</li>
</ul>
<h3> 3、Netty的地位</h3>
<p><code>Netty</code> 在 <code>Java</code> 网络应用框架中的地位就好比 <code>Spring</code> 框架在 <code>JavaEE</code> 开发中的地位。</p>
<p><strong>总之一句话：只要有网络通信需求的框架都用到了<code>Netty</code>。</strong></p>
<h3> 4、Netty的作者</h3>
<blockquote>
<p>他还是另一个著名网络应用框架 <code>Mina</code> 的重要贡献者</p>
</blockquote>
<h2> 二、入门案例</h2>
<h3> 1、需求</h3>
<p>开发一个简单的服务器端和客户端：</p>
<ul>
<li>客户端向服务器端发送 <code>hello world</code></li>
<li>服务器仅接收输出到控制台，不返回</li>
</ul>
<p>添加依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、服务器端代码</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>第二步说明：</li>
</ul>
<p>事件循环组中有多个事件循环对象，专门用于处理<code>accept</code>、<code>read</code>等事件，一个事件循环对象可以认为就是一个线程配合一个<code>selector</code>工作，可以管理多个<code>channel</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以传入一个参数，代表线程数，如果不传入，也至少会保证一个线程。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>第三步说明：</li>
</ul>
<p>选择服务器的<code>ServerSocketChannel</code>实现，上述选中了基于<code>NIO</code>的服务器实现，还有其他的实现，如下图</p>
<ul>
<li>第四步说明：</li>
</ul>
<p>方法名叫做<code>chindHandler</code>是因为接下来添加的处理器都是给 <code>SocketChannel</code> 用的，而不是给 <code>ServerSocketChannel</code>。</p>
<blockquote>
<p><code>IDEA</code>中重写方法快捷键：<code>Control+O</code></p>
</blockquote>
<h3> 3、客户端代码</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>第二步：</li>
</ul>
<p>选择客户端的<code>SocketChannel</code>实现，上述选中了基于<code>NIO</code>的客户端实现，还有其他的实现，如下图：</p>
<blockquote>
<p><strong>IDEA中多开客户端：</strong></p>
</blockquote>
<h3> 4、运行流程</h3>
<p><strong>左：客户端 右：服务器端</strong></p>
<ul>
<li>服务器端启动之后，会绑定<code>8080</code>端口并进行监听，同时启动事件循环组监听<code>channel</code>上的事件。</li>
<li>客户端启动之后，连接服务器端的<code>8080</code>端口，服务器端的事件循环组监听到<code>ServerSocketChannel</code>上的<code>accept</code>事件并进行处理。</li>
<li>客户端会阻塞，直到连接建立之后，服务器端和客户端分别初始化<code>SocketChannel</code>。</li>
<li>客户端获得<code>SocketChannel</code>并且写入数据，客户端的处理器会将字符串转为<code>ByteBuf</code>进行传输，在<code>SocketChannel</code>中传输的都是<code>ByteBuf</code>数据。</li>
<li>服务器端的事件循环组监听到某个<code>SocketChannel</code>的<code>read</code>事件，由某个<code>EventLoop</code>处理<code>read</code>事件，接收到了<code>ByteBuf</code>数据。</li>
<li>服务器端的处理器依次对接受到的数据进行处理。</li>
</ul>
<h3> 5、组件解释</h3>
<ul>
<li><code>channel</code> 可以理解为<strong>数据的通道</strong></li>
<li><code>msg</code> 理解为流动的数据，最开始输入是 <code>ByteBuf</code>，但经过 <code>pipeline</code> 中的各个 <code>handler</code> 加工，会变成其它类型对象，最后输出又变成 <code>ByteBuf</code></li>
<li><code>handler</code> 可以理解为数据的处理工序
<ul>
<li><strong>工序有多道，合在一起就是 <code>pipeline</code>（流水线），<code>pipeline</code> 负责发布事件（读、读取完成…）传播给每个 <code>handler</code>， <code>handler</code> 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</strong>
<ul>
<li><code>pipeline</code> 中有多个 <code>handler</code>，处理时会依次调用其中的 <code>handler</code></li>
</ul>
</li>
<li><strong><code>handler</code> 分 <code>Inbound</code> 和 <code>Outbound</code> 两类</strong>
<ul>
<li><code>Inbound</code> 入站</li>
<li><code>Outbound</code> 出站</li>
</ul>
</li>
</ul>
</li>
<li><code>eventLoop</code> 可以理解为<strong>处理数据的工人</strong>
<ul>
<li><code>eventLoop</code> 可以管理多个 <code>channel</code> 的 <code>io</code> 操作，并且一旦 <code>eventLoop</code> 负责了某个 <code>channel</code>，就<strong>会将其与<code>channel</code>进行绑定</strong>，以后该 <code>channel</code> 中的 <code>io</code> 操作都由该 <code>eventLoop</code> 负责</li>
<li><code>eventLoop</code> 既可以执行 <code>io</code> 操作，<strong>也可以进行任务处理</strong>，每个 <code>eventLoop</code> 有自己的任务队列，队列里可以堆放多个 <code>channel</code> 的待处理任务，任务分为普通任务、定时任务</li>
<li><code>eventLoop</code> 按照 <code>pipeline</code> 顺序，依次按照 <code>handler</code> 的规划（代码）处理数据，<strong>可以为每个 <code>handler</code> 指定不同的 <code>eventLoop</code></strong></li>
</ul>
</li>
</ul>
<h2> 三、组件</h2>
<h3> 1、EventLoop</h3>
<blockquote>
<p><strong>事件循环对象</strong> <code>EventLoop</code></p>
</blockquote>
<p><code>EventLoop</code> 本质是一个<strong>单线程执行器（同时维护了一个 <code>Selector</code>），里面有 <code>run</code> 方法处理一个或多个 <code>Channel</code> 上源源不断的 <code>io</code> 事件</strong></p>
<p>它的继承关系如下：</p>
<ul>
<li>继承自 <code>j.u.c.ScheduledExecutorService</code> 因此包含了线程池中所有的方法</li>
<li>继承自 <code>Netty</code> 自己的 <code>OrderedEventExecutor</code>
<ul>
<li>提供了 <code>boolean inEventLoop(Thread thread)</code> 方法判断一个线程是否属于此 <code>EventLoop</code></li>
<li>提供了 <code>EventLoopGroup parent()</code> 方法来看看自己属于哪个 <code>EventLoopGroup</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>事件循环组</strong> <code>EventLoopGroup</code></p>
</blockquote>
<p><code>EventLoopGroup</code> 是一组 <code>EventLoop</code>，<code>Channel</code> 一般会调用 <code>EventLoopGroup</code> 的 <code>register</code> 方法来<strong>绑定其中一个 <code>EventLoop</code>，后续这个 <code>Channel</code> 上的 <code>io</code> 事件都由此 <code>EventLoop</code> 来处理（保证了 <code>io</code> 事件处理时的线程安全）</strong></p>
<ul>
<li>继承自 <code>Netty</code> 自己的 <code>EventExecutorGroup</code>
<ul>
<li>实现了 <code>Iterable</code> 接口提供遍历 <code>EventLoop</code> 的能力</li>
<li>另有 <code>next</code> 方法获取集合中下一个 <code>EventLoop</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><code>EventLoopGroup</code>有多个类型，都继承自<code>MultithreadEventLoopGroup</code>（多线程事件循环组）抽象类。</p>
</blockquote>
<p><strong>一般使用<code>NioEventLoopGroup</code>（处理<code>io</code>事件、普通任务、定时任务），而<code>DefaultEventLoopGroup</code>只能处理普通任务和定时任务。</strong></p>
<blockquote>
<p><code>EventLoopGroup</code>继承关系</p>
</blockquote>
<h4> 1、处理普通任务和定时任务</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述结果可以看出<code>NioEventLoopGroup</code>中的线程数为2，所以有两个<code>EventLoop</code>，每一个<code>EventLoop</code>都是一个线程配合一个<code>selector</code>进行工作，并且通过<code>next</code>方法实现了简单的轮询。</p>
<p><strong>关闭 EventLoopGroup</strong></p>
<blockquote>
<p>优雅关闭 <code>shutdownGracefully</code> 方法，该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行，从而确保整体应用是在正常有序的状态下退出的。</p>
</blockquote>
<h4> 2、处理IO任务</h4>
<p><strong>服务器代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>添加断点之后，向服务器发送数据，会发现服务器端收不到消息，这是因为IDEA中的断点默认会阻塞所有的线程，客户端代码中的main线程和NioEventLoopGroup中的线程都会被阻塞，服务器自然就收不到服务器端发送的数据了。<strong>正确的做法应该是可以阻塞main线程，其他的线程可以正常执行。</strong></p>
<p>按照下图修改断点的设置，使其只能阻塞当前main线程，其他线程正常执行：</p>
<p>Breakpoint Suspend 参数介绍：在创建断点时有一个重要参数是Suspend。</p>
<p>Suspend：未勾选，程序运行到断点处并不会阻塞，而会继续执行后面的逻辑。</p>
<p>Suspend：勾选，代表程序运行到断点处会阻塞。</p>
<p>+ All：勾选，代表断点会阻塞所有线程。</p>
<p>+ Thread：勾选，代表断点只会阻塞当前线程。</p>
<p>[Suspend勾选，All勾选] 是默认值，所以才会出现 “Stop The World” 的可怕情况。</p>
<p><strong>所以说，在多线程调试时，若你希望阻塞程序，最好选择 Thread 当前线程阻塞策略，这样就不会影响到其他线程的工作。</strong></p>
</blockquote>
<p>打开三个客户端分别给服务器发送数据，查看服务器端接收到的数据如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、实现分工</h4>
<p>ServerBootstrap的group()方法<strong>可以传入两个EventLoopGroup参数</strong>，分别负责处理不同的事件。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开四个客户端分别给服务器发送数据，查看服务器端接收到的数据如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，一个EventLoop可以<strong>负责多个</strong>Channel，且EventLoop一旦与Channel绑定，则<strong>一直负责</strong>处理该Channel中的事件。</p>
<h4> 4、更换EventLoopGroup</h4>
<p>当有的<strong>任务需要较长的时间处理时，可以使用非NioEventLoopGroup</strong>，避免同一个NioEventLoop中的其他Channel在较长的时间内都无法得到处理。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开四个客户端分别给服务器发送数据，查看服务器端接收到的数据如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，客户端与服务器之间的read事件中，不同的handler被nioEventLoopGroup和defaultEventLoopGroup分别处理，下一次客户端继续发送消息，仍然由原来的线程操作IO事件和相应任务，保证了数据的安全性。</p>
<h4> 5、换工人原理</h4>
<p><strong>不同的EventLoopGroup切换的实现原理如下</strong>：当handler中绑定的Group不同时，需要切换Group来执行不同的任务。</p>
<p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>如果两个 handler 绑定的是<strong>同一个EventLoopGroup</strong>，那么就直接调用</li>
<li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的 EventLoopGroup 来调用</li>
</ul>
<h3> 2、Channel</h3>
<p>Channel 的常用方法：</p>
<ul>
<li>close() 可以用来<strong>关闭Channel</strong></li>
<li>closeFuture() 用来<strong>处理 Channel 的关闭</strong>
<ul>
<li>sync 方法作用是<strong>同步等待 Channel 关闭</strong></li>
<li>而 addListener 方法是<strong>异步等待 Channel 关闭</strong></li>
</ul>
</li>
<li>pipeline() 方法用于<strong>添加处理器</strong></li>
<li>write() 方法将数据写入
<ul>
<li>因为缓冲机制，数据被写入到 Channel 中以后，不会立即被发送</li>
<li><strong>只有当缓冲满了或者调用了flush()方法后</strong>，才会将数据通过 Channel 发送出去</li>
</ul>
</li>
<li>writeAndFlush() 方法将数据写入并<strong>立即发送（刷出）</strong></li>
</ul>
<h4> 1、ChannelFuture</h4>
<p><strong>连接问题</strong></p>
<p>客户端获得SocketChannel和发送数据的操作是在main线程中执行还是在NIO线程（NioEventLoop 中的线程）中执行？</p>
<p><strong>拆分客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果去掉<code>channelFuture.sync()</code>方法，会服务器无法收到<code>main-&gt;客户端数据</code>，这是因为建立连接(connect)的过程是<strong>异步非阻塞</strong>的，这就意味着不等连接建立，方法执行就返回了。若不通过<code>sync()</code>方法阻塞主线程，等待连接真正建立，这时通过 channelFuture.channel() <strong>拿到的 Channel 对象，并不是真正与服务器建立好连接的 Channel</strong>，也就没法将信息正确的传输给服务器端。所以需要通过<code>channelFuture.sync()</code>方法，阻塞主线程，<strong>同步处理结果</strong>，等待连接真正建立好以后，再去获得 Channel 传递数据。使用该方法，获取 Channel 和发送数据的线程<strong>都是主线程。</strong></p>
<p>下面还有一种<code>addListener</code>方法，用于<strong>异步</strong>获取建立连接后的 Channel 和发送数据，使得执行这些操作的线程是 NIO 线程：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方法可以**在NIO线程中获取 Channel 并发送数据，**而不是在主线程中执行这些操作。</p>
<h4> 2、CloseFuture</h4>
<p><strong>处理关闭</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们要关闭channel时，可以调用channel.close()方法进行关闭。但是该方法也是一个<strong>异步方法</strong>。真正的关闭操作并不是在调用该方法的线程中执行的，而是<strong>在NIO线程中执行真正的关闭操作。<strong>如果想在channel</strong>真正关闭以后</strong>，执行一些额外的操作，可以选择以下两种方法来实现：</p>
<ul>
<li>通过channel.closeFuture()方法获得对应的ChannelFuture对象，然后调用<strong>sync()方法</strong>阻塞执行操作的线程，等待channel真正关闭后，再执行其他操作，<strong>这些其他操作是在main线程中执行的。</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>调用<strong>closeFuture.addListener</strong>方法，添加close的后续操作，<strong>这些操作是在NIO线程中完成的。</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、Future&amp;Promise</h3>
<h4> 1、概念</h4>
<blockquote>
<p>Netty 中的 Future 与 JDK 中的 Future 同名，但是是两个接口，Netty 的 Future 继承自 JDK 的 Future，而 Promise 又对 Netty Future 进行了扩展。</p>
</blockquote>
<ul>
<li>JDK Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li>
<li>Netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但<strong>都是要等任务结束</strong></li>
<li>Netty Promise 不仅有 Netty Future 的功能，而且脱离了任务独立存在，<strong>只作为两个线程间传递结果的容器</strong></li>
</ul>
<table>
<thead>
<tr>
<th>功能/名称</th>
<th>JDK Future</th>
<th style="text-align:left">Netty Future</th>
<th>Netty Promise</th>
</tr>
</thead>
<tbody>
<tr>
<td>cancel</td>
<td>取消任务</td>
<td style="text-align:left">-</td>
<td>-</td>
</tr>
<tr>
<td>isCanceled</td>
<td>任务是否取消</td>
<td style="text-align:left">-</td>
<td>-</td>
</tr>
<tr>
<td>isDone</td>
<td>任务是否完成，不能区分成功失败</td>
<td style="text-align:left">-</td>
<td>-</td>
</tr>
<tr>
<td>get</td>
<td>获取任务结果，阻塞等待</td>
<td style="text-align:left">-</td>
<td>-</td>
</tr>
<tr>
<td>getNow</td>
<td>-</td>
<td style="text-align:left">获取任务结果，非阻塞，还未产生结果时返回 null</td>
<td>-</td>
</tr>
<tr>
<td>await</td>
<td>-</td>
<td style="text-align:left">等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td>
<td>-</td>
</tr>
<tr>
<td>sync</td>
<td>-</td>
<td style="text-align:left">等待任务结束，如果任务失败，抛出异常</td>
<td>-</td>
</tr>
<tr>
<td>isSuccess</td>
<td>-</td>
<td style="text-align:left">判断任务是否成功</td>
<td>-</td>
</tr>
<tr>
<td>cause</td>
<td>-</td>
<td style="text-align:left">获取失败信息，非阻塞，如果没有失败，返回null</td>
<td>-</td>
</tr>
<tr>
<td>addLinstener</td>
<td>-</td>
<td style="text-align:left">添加回调，异步接收结果</td>
<td>-</td>
</tr>
<tr>
<td>setSuccess</td>
<td>-</td>
<td style="text-align:left">-</td>
<td>设置成功结果</td>
</tr>
<tr>
<td>setFailure</td>
<td>-</td>
<td style="text-align:left">-</td>
<td>设置失败结果</td>
</tr>
</tbody>
</table>
<h4> 2、JDK Future</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、Netty Future</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Netty中的Future对象，可以通过EventLoop的sumbit()方法得到</p>
<ul>
<li>可以通过Future对象的<strong>get方法</strong>，阻塞地获取返回结果</li>
<li>也可以通过<strong>getNow方法</strong>，获取结果，若还没有结果，则返回null，该方法是非阻塞的</li>
<li>还可以通过<strong>future.addListener方法</strong>，在Callable方法执行的线程中，异步获取返回结果</li>
</ul>
<h4> 4、Netty Promise</h4>
<p>Promise相当于一个容器，可以用于存放各个线程中的结果，然后让其他线程去获取该结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、Handler&amp;Pipeline</h3>
<h4> 1、Pipeline</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过channel.pipeline().addLast(name, handler)添加handler时，<strong>记得给handler取名字</strong>。这样可以调用pipeline的<strong>addAfter、addBefore等方法更灵活地向pipeline中添加handler</strong></p>
<p>handler需要放入channel的pipeline中，才能根据放入顺序来使用handler</p>
<ul>
<li>pipeline的结构是一个带有head与tail指针的双向链表，其中的节点为handler
<ul>
<li>要通过ctx.fireChannelRead(msg)等方法，<strong>将当前handler的处理结果传递给下一个handler</strong></li>
</ul>
</li>
<li>当有<strong>入站</strong>（Inbound）操作时，会从<strong>head开始向后</strong>调用handler，直到handler不是处理Inbound操作为止</li>
<li>当有<strong>出站</strong>（Outbound）操作时，会从<strong>tail开始向前</strong>调用handler，直到handler不是处理Outbound操作为止</li>
</ul>
<p><strong>具体结构如下：</strong></p>
<p><strong>调用顺序如下：</strong></p>
<h4> 2、OutboundHandler</h4>
<ul>
<li><strong>socketChannel.writeAndFlush()</strong></li>
</ul>
<p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从tail向前寻找OutboundHandler</strong></p>
<ul>
<li><strong>ctx.writeAndFlush()</strong></li>
</ul>
<p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从当前handler向前寻找OutboundHandler</strong></p>
<h4> 3、EmbeddedChannel</h4>
<p>EmbeddedChannel可以用于测试各个handler，通过其构造函数按顺序传入需要测试的handler，然后调用对应的Inbound和Outbound方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、ByteBuf</h3>
<h4> 1、调试工具类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过该工具类可以更为详细地查看ByteBuf中的内容。</p>
<h4> 2、创建</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ByteBuf<strong>通过<code>ByteBufAllocator</code>选择allocator并调用对应的buffer()方法来创建</strong>，默认使用<strong>直接内存</strong>作为ByteBuf，容量为256个字节，可以指定初始容量的大小。当ByteBuf的容量无法容纳所有数据时，<strong>ByteBuf会进行扩容操作。</strong></p>
<blockquote>
<p><strong>如果在handler中创建ByteBuf，建议使用<code>ChannelHandlerContext ctx.alloc().buffer()</code>来创建</strong></p>
</blockquote>
<h4> 3、直接内存与堆内存</h4>
<p>通过该方法创建的ByteBuf，使用的是<strong>基于池化直接内存</strong>的ByteBuf</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用下面的代码来创建<strong>基于池化堆</strong>的 ByteBuf</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用下面的代码来创建<strong>基于池化直接内存</strong>的 ByteBuf</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用。</li>
<li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放，否则会造成内存泄漏，最终可能会导致内存溢出。</li>
</ul>
<p><strong>验证</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、池化与非池化</h4>
<p>池化的最大意义在于可以<strong>重用</strong> ByteBuf，优点有</p>
<ul>
<li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li>
<li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li>
<li>高并发时，池化功能更节约内存，减少内存溢出的可能</li>
</ul>
<p>池化功能是否开启，可以通过下面的系统环境变量来设置：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>4.1 以后，<strong>非 Android 平台默认启用池化实现</strong>，Android 平台启用非池化实现</li>
<li>4.1 之前，池化功能还不成熟，默认是非池化实现</li>
</ul>
<h4> 5、组成</h4>
<p>ByteBuf主要有以下几个组成部分：</p>
<ul>
<li>最大容量与当前容量
<ul>
<li>在构造ByteBuf时，可传入两个参数，分别代表初始容量和最大容量，若未传入第二个参数（最大容量），最大容量默认为<code>Integer.MAX_VALUE</code></li>
<li>当ByteBuf容量无法容纳所有数据时，会进行扩容操作，若<strong>超出最大容量</strong>，会抛出<code>java.lang.IndexOutOfBoundsException</code>异常</li>
</ul>
</li>
<li>读写操作不同于ByteBuffer只用position进行控制，ByteBuf分别由读指针和写指针两个指针控制，进行读写操作时，无需进行模式的切换
<ul>
<li>读指针前的部分被称为废弃部分，是已经读过的内容</li>
<li>读指针与写指针之间的空间称为可读部分</li>
<li>写指针与当前容量之间的空间称为可写部分</li>
</ul>
</li>
</ul>
<h4> 6、写入</h4>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>writeBoolean(boolean value)</td>
<td>写入 boolean 值</td>
<td>用一字节 01|00 代表 true|false</td>
</tr>
<tr>
<td>writeByte(int value)</td>
<td>写入 byte 值</td>
<td></td>
</tr>
<tr>
<td>writeShort(int value)</td>
<td>写入 short 值</td>
<td></td>
</tr>
<tr>
<td>writeInt(int value)</td>
<td>写入 int 值</td>
<td>Big Endian，即 0x250，写入后 00 00 02 50</td>
</tr>
<tr>
<td>writeIntLE(int value)</td>
<td>写入 int 值</td>
<td>Little Endian，即 0x250，写入后 50 02 00 00</td>
</tr>
<tr>
<td>writeLong(long value)</td>
<td>写入 long 值</td>
<td></td>
</tr>
<tr>
<td>writeChar(int value)</td>
<td>写入 char 值</td>
<td></td>
</tr>
<tr>
<td>writeFloat(float value)</td>
<td>写入 float 值</td>
<td></td>
</tr>
<tr>
<td>writeDouble(double value)</td>
<td>写入 double 值</td>
<td></td>
</tr>
<tr>
<td>writeBytes(ByteBuf src)</td>
<td>写入 netty 的 ByteBuf</td>
<td></td>
</tr>
<tr>
<td>writeBytes(byte[] src)</td>
<td>写入 byte[]</td>
<td></td>
</tr>
<tr>
<td>writeBytes(ByteBuffer src)</td>
<td>写入 nio 的 ByteBuffer</td>
<td></td>
</tr>
<tr>
<td>int writeCharSequence(CharSequence sequence, Charset charset)</td>
<td>写入字符串</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用来写入不同的数据</li>
</ul>
<ul>
<li><strong>网络传输中，默认习惯是 Big Endian，使用 writeInt(int value)</strong></li>
</ul>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置。</strong></p>
<h4> 7、扩容</h4>
<p>当ByteBuf中的容量无法容纳写入的数据时，会进行扩容操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>扩容规则</strong></p>
<ul>
<li>
<p>不指定初始化容量大小，默认值是256字节（<code>ByteBufAllocator.DEFAULT.directBuffer()</code>）</p>
</li>
<li>
<p>如果写入后数据大小未超过 512 字节，则选择下一个 16 的整数倍进行扩容</p>
<ul>
<li>例如写入后大小为 12 字节，则扩容后 capacity 是 16 字节</li>
</ul>
</li>
<li>
<p>如果写入后数据大小超过 512 字节，则选择下一个 2的N次方的整数进行扩容</p>
<ul>
<li>例如写入后大小为 513 字节，则扩容后 capacity 是 2的十次方，也就是1024 字节</li>
</ul>
</li>
<li>
<p>扩容不能超过 maxCapacity，否则会抛出<code>java.lang.IndexOutOfBoundsException</code>异常</p>
</li>
</ul>
</blockquote>
<h4> 8、读取</h4>
<p>读取主要是通过一系列read方法进行读取，读取时会根据读取数据的字节数移动读指针。如果需要<strong>重复读取</strong>，需要调用<code>buffer.markReaderIndex()</code>对读指针进行标记，并通过<code>buffer.resetReaderIndex()</code>将读指针恢复到mark标记的位置。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>还有以 get 开头的一系列方法，这些方法不会改变读指针的位置。</strong></p>
<h4> 9、释放</h4>
<h4> 10、切片</h4>
<h4> 11、优势</h4>
<h2> 四、应用</h2>
<h3> 1、粘包与半包</h3>
<h4> 1、粘包现象</h4>
<p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端接收到的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见虽然客户端是分别以16字节为单位，通过channel向服务器发送了10次数据，可是<strong>服务器端却只接收了一次，接收数据的大小为160B，即客户端发送的数据总大小，这就是粘包现象（将多个消息粘到了一起）。</strong></p>
<h4> 2、半包现象</h4>
<p><strong>调整服务器端接收缓冲区的大小：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在测试粘包现象时，在服务器端添加了执行器：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该执行器在测试半包及粘包现象时并没有帮助作用，只是方便在客户端建立连接之后立即发送数据，了解两个方法的作用之后可以在服务器代码中删掉。</p>
</blockquote>
<p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端接收到的数据：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端每次发送18字节的数据，但是由于服务器端接收缓冲区的大小为16字节，所以只能将剩下的数据在下一次发送过来，这样就将一条18字节完整的消息拆分成两次进行发送，这就是半包现象。</p>
<blockquote>
<p>注意：</p>
<p><code>serverBootstrap.option(ChannelOption.SO_RCVBUF, 10)</code> 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 Netty 读取的最小单位，但是Netty 实际每次读取的一般是16的整数倍，Netty默认的缓冲区大小是1024字节，可以通过<code>serverBootstrap.childOption</code>进行设置。</p>
</blockquote>
<h4> 3、原理分析</h4>
<blockquote>
<p>粘包</p>
</blockquote>
<ul>
<li>现象（多个消息被粘合到一起接收）
<ul>
<li>发送 abc def，接收 abcdef</li>
</ul>
</li>
<li>原因
<ul>
<li>应用层
<ul>
<li>接收方 ByteBuf 设置太大（Netty 默认 1024）</li>
</ul>
</li>
<li>传输层-网络层
<ul>
<li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大（大于256 bytes），这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li>
<li>Nagle 算法：会造成粘包</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>半包</p>
</blockquote>
<ul>
<li>现象（一个消息被分开接收）
<ul>
<li>发送 abcdef，接收 abc def</li>
</ul>
</li>
<li>原因
<ul>
<li>应用层
<ul>
<li>接收方 ByteBuf 小于实际发送数据量</li>
</ul>
</li>
<li>传输层-网络层
<ul>
<li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时接收方窗口中无法容纳发送方的全部报文，发送方只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li>
</ul>
</li>
<li>数据链路层
<ul>
<li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>本质</p>
</blockquote>
<p>发生粘包与半包现象的本质是<strong>因为 TCP 是流式协议，消息无边界。</strong></p>
<h4> 4、解决方案</h4>
<blockquote>
<ul>
<li>
<p>短链接方式即建立一次连接，发送一个消息，然后断开连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低</p>
</li>
<li>
<p>每一条消息采用固定长度，缺点浪费空间</p>
</li>
<li>
<p>每一条消息采用分隔符，例如 \n，缺点需要转义</p>
</li>
<li>
<p>每一条消息分为 head 和 body，head 中包含 body 的长度</p>
</li>
</ul>
</blockquote>
<h5> 1、短连接</h5>
<p><strong>客户端每次向服务器发送数据以后，就与服务器断开连接，此时的消息边界为连接建立到连接断开</strong>。此时如果服务器端接收缓冲区足够大，则不会发生粘包现象。但如果一次性数据发送过多，接收方无法一次性容纳所有数据，还是会发生半包现象，所以<strong>短链接无法解决半包现象。</strong></p>
<p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端接收到的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果客户端一次性发送的数据过多，服务端的接收缓冲区较小，仍然会产生半包现象。</p>
<p><strong>客户端代码修改</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端代码修改</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行结果</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码可以看出，数据并没有丢失，在一次连接中产生了半包现象，即一次连接中两次发送数据给服务器，这样服务器才得到了完整的数据。</p>
<h5> 2、固定长度消息解码器</h5>
<p><code>io.netty.handler.codec.FixedLengthFrameDecoder</code></p>
<p>客户端和服务器<strong>约定一个最大长度，保证客户端每次发送的数据长度都不会大于该长度</strong>。若客户端发送数据长度不足则需要<strong>补齐</strong>至该长度，服务器接收数据时，<strong>将接收到的数据按照约定的最大长度进行拆分</strong>，即使发送过程中产生了粘包，也可以通过定长解码器将数据正确地进行拆分。<strong>服务端需要用到<code>FixedLengthFrameDecoder</code>对数据进行定长解码。</strong></p>
<p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端接收到的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端发送的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、基于分隔符的消息解码器</h5>
<p><code>io.netty.handler.codec.LineBasedFrameDecoder</code></p>
<p><code>io.netty.handler.codec.DelimiterBasedFrameDecoder</code></p>
<p><strong>通过分隔符对数据进行拆分</strong>来解决粘包半包问题，可以通过<code>LineBasedFrameDecoder(int maxLength)</code>来拆分以<code>\n</code>或者<code>\r\n</code>为分隔符的数据，也可以通过<code>DelimiterBasedFrameDecoder(int maxFrameLength, ByteBuf... delimiters)</code>来<strong>自定义分隔符从而实现拆分数据（可以传入多个分隔符）。</strong></p>
<blockquote>
<p>两种解码器<strong>都需要传入数据的最大长度</strong>，若超出最大长度，会抛出<code>TooLongFrameException</code>异常。</p>
</blockquote>
<p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端接收到的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端发送的数据</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从运行结果可以看到<strong>一个换行符占据一个字节。</strong></p>
<blockquote>
<p>使用自定义分隔符的消息解码器：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h5> 4、基于长度字段的消息解码器</h5>
<p><code>io.netty.handler.codec.LengthFieldBasedFrameDecoder</code></p>
<p>在传送数据时可以在数据中<strong>添加一个用于表示有用数据长度的字段。</strong><code>LengthFieldBasedFrameDecoder</code>解码器可以提供更为丰富的拆分方法，其构造方法有五个参数：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数解析</strong></p>
<ul>
<li><code>maxFrameLength</code> <strong>数据最大长度</strong>
<ul>
<li>表示数据的最大长度（包括附加信息、长度标识等内容）</li>
</ul>
</li>
<li><code>lengthFieldOffset</code> <strong>长度字段的起始偏移量</strong>
<ul>
<li>用于指明数据第几个字节开始是用于标识有用数据字节长度的，因为前面可能还有其他附加信息</li>
</ul>
</li>
<li><code>lengthFieldLength</code> <strong>长度字段所占字节数</strong>（用于指明有用数据的长度）
<ul>
<li>数据中用于表示有用数据长度的标识所占的字节数</li>
</ul>
</li>
<li><code>lengthAdjustment</code> <strong>长度表示与有用数据的偏移量</strong>
<ul>
<li>用于指明数据长度标识和有用数据之间的距离，因为两者之间还可能有附加信息</li>
</ul>
</li>
<li><code>initialBytesToStrip</code> <strong>数据读取起点</strong>
<ul>
<li>读取起点，不读取0 到 <code>initialBytesToStrip</code> 之间的数据</li>
</ul>
</li>
</ul>
<p><strong>例子</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>关于lengthAdjustment为什么可以是负数？参考：<a href="https://www.cnblogs.com/motianlong/p/14465098.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/motianlong/p/14465098.html</a></p>
</blockquote>
<p><strong>图解</strong></p>
<p><strong>使用</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、协议设计与解析</h3>
<h4> 1、协议的作用</h4>
<blockquote>
<p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则。</p>
</blockquote>
<h4> 2、Redis中的协议</h4>
<p>和Redis服务器通信，需要按照Redis协议向服务器发送命令，在Redis中，向Redis服务器发送一条<code>set name Nyima</code>的指令，需要遵守<strong>如下协议：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过Redis客户端查看Redis中存储的数据如下：</p>
<p>通过上述客户端代码可以看出只要遵守Redis的协议向其服务器发送命令，服务器就可以解析该命令并执行。</p>
<h4> 3、HTTP协议</h4>
<p>HTTP协议包含复杂的内容，自己实现较为困难，可以使用<code>HttpServerCodec</code>作为<strong>服务器端的解码器与编码器，来处理HTTP请求。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器负责处理请求并响应浏览器，所以<strong>只需要处理HTTP请求头和请求行</strong>即可：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获得请求后，需要返回响应给浏览器。需要创建响应对象<code>DefaultFullHttpResponse</code>，设置HTTP版本号及状态码，为避免浏览器获得响应后，因为未设置<code>CONTENT_LENGTH</code>而一直空转接收响应内容，所以需要添加<code>CONTENT_LENGTH</code>字段，表明响应体中数据的具体长度。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、自定义协议</h4>
<h5> 1、组成要素</h5>
<blockquote>
<ul>
<li><strong>魔数</strong>：用来在第一时间判定接收的数据是否为无效数据包</li>
<li><strong>版本号</strong>：可以支持协议的升级</li>
<li><strong>序列化算法</strong>：消息正文到底采用哪种序列化及反序列化方式。如：Json、Protobuf、Hessian、Jdk</li>
<li><strong>指令类型</strong>：是登录、注册、单聊、群聊… 跟业务相关的消息类型</li>
<li><strong>请求序号</strong>：为了双工通信，提供异步能力</li>
<li><strong>正文长度</strong>：有效数据的长度</li>
<li><strong>消息正文</strong>：有效数据</li>
</ul>
</blockquote>
<h5> 2、自定义编码器与解码器</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>编码器与解码器方法源于父类<code>ByteToMessageCodec</code>，通过该类可以自定义编码器与解码器，<strong>泛型类型为被编码与被解码的类</strong>。此处使用了自定义类<code>Message</code>，代表消息。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>编码器<strong>负责将附加信息与正文信息写入到ByteBuf中</strong>，其中附加信息<strong>总字节数最好为2的N次方，不足需要补齐</strong>，正文内容如果为对象，需要通过<strong>序列化</strong>将其放入到ByteBuf中。</p>
</li>
<li>
<p>解码器<strong>负责将ByteBuf中的信息取出，并放入List中</strong>，该List用于将信息传递给下一个Handler。</p>
</li>
<li>
<p>编码测试类</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试<strong>编码</strong>执行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试<strong>解码</strong>执行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 3、@Sharable注解</h5>
<p>为了<strong>提高handler的复用率，可以将handler创建为handler对象</strong>，然后在不同的channel中使用该handler对象进行处理操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但<strong>并不是所有的handler都能通过这种方法来提高复用率的</strong>，例如<code>LengthFieldBasedFrameDecoder</code>。如果多个channel中使用同一个LengthFieldBasedFrameDecoder对象，则可能发生如下问题：</p>
<ul>
<li>channel1中收到了一个半包，LengthFieldBasedFrameDecoder发现不是一条完整的数据，则没有继续向下传播</li>
<li>此时channel2中也收到了一个半包，<strong>因为两个channel使用了同一个LengthFieldBasedFrameDecoder，存入其中的数据刚好拼凑成了一个完整的数据包</strong>。LengthFieldBasedFrameDecoder让该数据包继续向下传播，<strong>最终引发错误</strong></li>
</ul>
<p>所以可以看到<code>LengthFieldBasedFrameDecoder</code>存在线程安全问题，对于<code>LoggingHandler</code>并不存在线程安全问题，只是打印详细数据日志。为了提高handler的复用率，同时又避免出现一些并发问题，<strong>Netty中原生的handler中用<code>@Sharable</code>注解来标明该handler能否在多个channel中共享。<strong>只有带有该注解，才能通过对象的方式被共享</strong>，否则无法被共享。</strong></p>
<p><strong>源码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>一个Handler如果是线程安全的，不会记录上个状态信息，即无状态的，就可以使用Sharable注解，反之，不能使用该注解。<strong>一个Handler是不是无状态的，要根据这个Handler的功能考虑。</strong></p>
</blockquote>
<h5> 4、使用@Sharable注解</h5>
<p><strong>自定义编解码器能否使用@Sharable注解，这需要根据自定义的handler的处理逻辑进行分析。</strong></p>
<p>我们的MessageCodec本身接收的是LengthFieldBasedFrameDecoder处理之后的数据，那么数据肯定是完整的，按分析来说是可以添加@Sharable注解的，但是实际情况我们并<strong>不能</strong>添加该注解，会抛出异常信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是Netty的默认保护机制，会认为我们自定义的Handler不能在各个channel中进行共享，担心我们无法处理好线程安全问题，分析源码（查看父类<code>ByteToMessageCodec</code>）如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这就意味着ByteToMessageCodec不能被多个channel所共享的，因为该类的目标是：将ByteBuf转化为Message，意味着传进该handler的数据还未被处理过，所以传过来的ByteBuf可能并不是完整的数据，如果共享则会出现问题。</strong></p>
<p><strong>如果想要共享，需要怎么办呢？<strong>继承</strong>MessageToMessageDecoder</strong>即可。<strong>该类的目标是：将已经被处理的完整数据再次被处理。<strong>传过来的Message</strong>如果是被处理过的完整数据</strong>，那么被共享也就不会出现问题了，也就可以使用@Sharable注解了。实现方式与ByteToMessageCodec类似。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、在线聊天室</h3>
<h4> 1、聊天室业务</h4>
<p><strong>用户管理-<code>UserService</code></strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>聊天组会话管理-<code>GroupSession</code></strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>会话管理-<code>Session</code></strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>基于长度字段的消息解码器</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端代码</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、登陆</h4>
<p><strong>客户端代码</strong></p>
<p>思路-新开辟一个线程实现建立连接之后发送登陆请求及后续操作，登陆请求消息体构建之后发送到服务器，服务器进行验证，此时客户端处于阻塞状态。当读取到服务器的响应之后，关闭新开辟线程的阻塞状态，向下执行，这里的线程同步可以使用<code>CountDownLatch</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端代码</strong></p>
<p>思路-自定义添加处理登陆请求的<code>Handler</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义的登陆请求处理器</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>登陆成功：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>登陆失败：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、单聊</h4>
<p>客户端应该匹配用户输入的命令，从而实现不同的功能。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器端首先应该记录<code>channel</code>和用户名的映射关系，这样A向B发送消息，就可以找到B的<code>channel</code>，从而实现写入消息。</p>
<p>应该在哪里记录？<strong>在<code>LoginRequestMessageHandler</code>中记录，<code>channel</code>和用户名的映射关系在登陆的时候就已经确定了，所以登陆成功之后就需要记录该关系。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加单聊的Handler，代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端代码优化：<strong>将所有可以共享的<code>Handler</code>抽取出来优化代码。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意：</p>
<p>上面自定义的Handler都使用了Sharable注解，什么情况下需要使用该注解呢？</p>
<p>标有@Sharable的Handler，代表了他是一个可以被分享的Handler，这就是说服务器注册了这个Handler后，可以分享给多个客户端使用，如果没有使用该注解，则每次客户端请求时，都必须重新创建一个Handler。</p>
<p>正常情况下同一个ChannelHandler的不同的实例会被添加到不同的Channel管理的管线里面的，但是如果你需要全局统计一些信息，比如所有连接报错次数等，这时候你可能需要使用单例的ChannelHandler，需要注意的是这时候ChannelHandler上需要添加@Sharable注解。</p>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/48341790" target="_blank" rel="noopener noreferrer">你真的了解Netty中@Sharable？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/cfe6136a9cb8" target="_blank" rel="noopener noreferrer">netty的@Sharable注解含义 - 简书 (jianshu.com)</a></p>
<p><a href="https://segmentfault.com/a/1190000038437243" target="_blank" rel="noopener noreferrer">java - Netty @Sharable_个人文章 - SegmentFault 思否</a></p>
</blockquote>
<p><strong>实现效果：</strong></p>
<p>发送方-zhangsan</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接收方-lisi</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 4、群聊创建</h4>
<p><strong>客户端代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务器端代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>群组创建请求消息的Handler：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果：</p>
<p><code>zhangsan</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>lisi</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>wangwu</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>Map中的putIfAbsent方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果key对应的value存在，就会直接返回该value，如果不存在，会将新的key和value存入到map中，返回null值。</p>
</blockquote>
<h4> 5、群聊消息发送</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、获取群聊内所有成员</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、加入群聊</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8、退出群聊</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 9、退出聊天室</h4>
<blockquote>
<p>客户端退出分为两种（服务器需要捕捉到两种情况都进行处理）：</p>
<p>1、正常退出-channel.close()</p>
<p>2、异常退出-客户端强制关闭channel</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong>强制退出客户端</strong>似乎不能触发<code>exceptionCaught</code>的情况。</p>
<p>关于<code>exceptionCaught</code>可参考：<a href="https://www.cnblogs.com/dafanjoy/p/12547599.html" target="_blank" rel="noopener noreferrer">Netty源码分析之ChannelPipeline(五)—异常事件的传播 - DaFanJoy - 博客园 (cnblogs.com)</a></p>
</blockquote>
<h4> 10、空闲检测</h4>
<blockquote>
<p>连接假死</p>
</blockquote>
<p><strong>原因</strong></p>
<ul>
<li>网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源</li>
<li>公网网络不稳定，出现丢包，如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，会白白地消耗资源</li>
<li>应用程序线程阻塞，无法进行数据读写</li>
</ul>
<p><strong>问题</strong></p>
<ul>
<li>假死的连接占用的资源不能自动释放</li>
<li>向假死的连接发送数据，得到的反馈是发送超时</li>
</ul>
<blockquote>
<p>解决方法</p>
</blockquote>
<p>可以添加<code>IdleStateHandler</code>对空闲时间进行检测，通过构造函数可以传入三个参数</p>
<ul>
<li>readerIdleTimeSeconds 读空闲经过的秒数</li>
<li>writerIdleTimeSeconds 写空闲经过的秒数</li>
<li>allIdleTimeSeconds 读和写空闲经过的秒数</li>
</ul>
<p>当指定时间内未发生读或写事件时，会触发特定事件</p>
<ul>
<li>读空闲会触发<code>READER_IDLE</code></li>
<li>写空闲会触发<code>WRITE_IDLE</code></li>
<li>读和写空闲会触发<code>ALL_IDEL</code></li>
</ul>
<p>服务器端检测读空闲时间</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>使用<code>IdleStateHandler</code>进行空闲检测</li>
<li>使用双向处理器<code>ChannelDuplexHandler</code>对入站与出站事件进行处理
<ul>
<li><code>IdleStateHandler</code>中的事件为特殊事件，需要实现<code>ChannelDuplexHandler</code>的<code>userEventTriggered</code>方法，判断事件类型并自定义处理方式，来对事件进行处理</li>
</ul>
</li>
</ul>
<p>为<strong>避免因非网络等原因引发的READ_IDLE事件</strong>，比如网络情况良好，只是用户本身没有输入数据，这时发生READ_IDLE事件，<strong>直接让服务器断开连接是不可取的</strong>。为避免此类情况，需要在<strong>客户端向服务器发送心跳包</strong>，发送频率要<strong>小于</strong>服务器设置的<code>IdleTimeSeconds</code>，一般设置为其值的一半。</p>
<p>上面的代码中，客户端和服务器端建立连接之后的5秒，客户端并没有因为网络问题而向服务器发送不了消息，而是因为客户端在输入用户名和密码的时候阻塞了，这个时候服务器就直接把这个连接关掉了，误伤了客户端，所以需要在客户端建立连接之后（不是登陆之后），就要发送心跳包给服务器，用于证明自己不是因为网络问题而发不过去消息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的处理方式应该在客户端添加写空闲时间的检测，连接建立后，到达指定时间如果没有写入数据，就会向服务器写入心跳数据包，代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 11、项目完整代码</h4>
<blockquote>
<p><a href="https://gitee.com/oucystong/netty-chat.git" target="_blank" rel="noopener noreferrer">https://gitee.com/oucystong/netty-chat.git</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Netty高级</title>
      <link>https://blog.lxip.top/notes/framework/netty/Netty%E9%AB%98%E7%BA%A7.html</link>
      <guid>https://blog.lxip.top/notes/framework/netty/Netty%E9%AB%98%E7%BA%A7.html</guid>
      <source url="https://blog.lxip.top/rss.xml">Netty高级</source>
      <description>一、优化 1、扩展序列化算法 1、序列化接口 2、序列化接口的实现 JDK原生序列化算法和Json序列化算法 3、用户指定序列化方式 从配置文件中获取 4、改造编解码器 使其可以按照指定的方式进行序列化及反序列化 5、配置文件 6、测试代码 7、运行结果 2、参数调优 CONNECT_TIMEOUT_MILLIS 属于 SocketChannal 的参...</description>
      <category>Netty</category>
      <category>网络编程</category>
      <content:encoded><![CDATA[<h2> 一、优化</h2>
<h3> 1、扩展序列化算法</h3>
<h4> 1、序列化接口</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、序列化接口的实现</h4>
<p>JDK原生序列化算法和Json序列化算法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、用户指定序列化方式</h4>
<p>从配置文件中获取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、改造编解码器</h4>
<p>使其可以按照指定的方式进行序列化及反序列化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、配置文件</h4>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 6、测试代码</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、运行结果</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、参数调优</h3>
<p><strong><code>CONNECT_TIMEOUT_MILLIS</code></strong></p>
<ul>
<li>属于 <code>SocketChannal</code> 的参数</li>
<li>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 <code>timeout</code> 异常，这个<code>timeout</code>异常是<code>Netty</code>中的异常</li>
<li>参数应该设置多大？如果太小的话，由于网络情况不是很好，那么还没来得及连接，就直接抛出<code>timeout</code>异常了，所以我们设置的大一点，保证客户端有足够的时间去尝试连接服务器</li>
<li>时间设置太大的话，如果服务器本来就是不可用的话，那么客户端不会等到设置的时间再抛出<code>timeout</code>异常，会检测服务器不可用之后，直接抛出更底层的<code>java.net.ConnectException</code>异常，客户端会<code>catch</code>该异常，然后抛出，所以不会抛出<code>timeout</code>异常。</li>
<li>所以如果想处理该异常，不要只<code>catch</code> <code>timeout</code>异常或者是<code>ConnectException</code>异常，应该直接<code>catch</code> <code>Exception</code>异常。</li>
<li>注意：<code>Netty</code> 中不要用成了<code>SO_TIMEOUT</code>，<code>SO_TIMEOUT</code>主要用在阻塞 <code>IO</code>，而 <code>Netty</code> 是非阻塞 <code>IO</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>客户端通过 <code>Bootstrap.option</code> 函数来配置参数，配置参数作用于 <code>SocketChannel</code></li>
<li>服务器通过<code>ServerBootstrap</code>来配置参数，但是对于不同的 <code>Channel</code> 需要选择不同的方法
<ul>
<li>通过 <code>option</code> 来配置 <code>ServerSocketChannel</code> 上的参数</li>
<li>通过 <code>childOption</code> 来配置 <code>SocketChannel</code> 上的参数</li>
</ul>
</li>
</ul>
<ul>
<li><strong>源码分析</strong></li>
</ul>
<p>客户端中连接服务器的线程是 <code>NIO</code> 线程，抛出异常的是主线程。这是如何做到超时判断以及线程通信的呢？</p>
<p>在<code>AbstractNioChannel.AbstractNioUnsafe.connect</code>方法中：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>超时的判断主要是通过 <code>Eventloop</code> 的 <code>schedule</code> 方法和 <code>Promise</code> 共同实现的</p>
<ul>
<li><code>schedule</code> 设置了一个定时任务，延迟<code>connectTimeoutMillis</code>秒后执行该方法</li>
<li>如果指定时间内没有建立连接，则会执行其中的任务
<ul>
<li>任务负责创建 <code>ConnectTimeoutException</code> 异常，并将异常通过 <code>Pormise</code> 传给主线程并抛出</li>
</ul>
</li>
</ul>
<p><strong><code>SO_BACKLOG</code></strong></p>
<ul>
<li>
<p>该参数是 <code>ServerSocketChannel</code> 的参数</p>
</li>
<li>
<p><strong>三次握手与连接队列</strong></p>
</li>
</ul>
<p>第一次握手时，因为客户端与服务器之间的连接还未完全建立，连接会被放入半连接队列中</p>
<p>当完成三次握手以后，连接会被放入全连接队列中</p>
<p>服务器处理<code>Accept</code>事件是在<code>TCP</code>三次握手，也就是建立连接之后。服务器会从全连接队列中获取连接并进行处理</p>
<p>三次握手的完整图如下：</p>
<p>在 <code>linux 2.2</code> 之前，<code>backlog</code> 大小包括了两个队列的大小，在 <code>linux 2.2</code> 之后，分别用下面两个参数来控制</p>
<ul>
<li>半连接队列 - <code>sync queue</code>
<ul>
<li>大小通过 <code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code> 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li>
</ul>
</li>
<li>全连接队列 - <code>accept queue</code>
<ul>
<li>其大小通过 <code>/proc/sys/net/core/somaxconn</code> 指定，在使用 <code>listen</code> 函数时，内核会根据传入的 <code>backlog</code> 参数与系统参数，取二者的较小值</li>
<li>如果 <code>accpet queue</code> 队列满了，<code>server</code> 将发送一个拒绝连接的错误信息到 <code>client</code></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://juejin.cn/post/7157182123441389604" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7157182123441389604</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1699886" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1699886</a></li>
</ul>
</li>
</ul>
<p>在<code>Netty</code>中，<code>SO_BACKLOG</code>主要用于设置全连接队列的大小。当处理<code>Accept</code>的速率小于连接建立的速率时，全连接队列中堆积的连接数大于<code>SO_BACKLOG</code>设置的值时，便会抛出异常，设置方式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>如何进行演示？提供一种思路就是在<code>Netty</code>的源码中进行<code>accept</code>的时候直接打上断点，让其无法向下执行，此时全连接队列满，客户端再次连接服务器就会抛出一个拒绝连接的异常。</p>
</blockquote>
<p>如果不指定的话，<code>Netty</code>会给一个默认值，那么怎么找到这个默认值呢？</p>
<p>首先说明：<code>backlog</code>参数在<code>NioServerSocketChannel.doBind</code>方法被使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的源码中可以看出，<code>backlog</code>的值会根据操作系统的不同，来选择不同的默认值</p>
<ul>
<li><code>Windows 200</code></li>
<li><code>Linux/Mac OS 128</code></li>
<li>如果配置文件<code>/proc/sys/net/core/somaxconn</code>存在，会读取配置文件中的值，并将<code>backlog</code>的值设置为配置文件中指定的</li>
</ul>
<p><strong><code>TCP_NODELAY</code></strong></p>
<ul>
<li>属于 <code>SocketChannal</code> 参数</li>
<li>因为 <code>Nagle</code> 算法，数据包会堆积到一定的数量后一起发送，这就可能导致数据的发送存在一定的延时</li>
<li>该参数默认为<code>false</code>，也就是默认启用了<code>Nagle</code>算法，如果不希望发送被延时，则需要将该值设置为<code>true</code></li>
</ul>
<p><strong><code>SO_SNDBUF &amp; SO_RCVBUF</code></strong></p>
<ul>
<li><code>SO_SNDBUF</code> 属于 <code>SocketChannal</code> 参数</li>
<li><code>SO_RCVBUF</code> 既可用于 <code>SocketChannal</code> 参数，也可以用于 <code>ServerSocketChannal</code> 参数（建议设置到 <code>ServerSocketChannal</code> 上）</li>
<li>该参数用于指定接收方与发送方的滑动窗口大小</li>
</ul>
<p><strong><code>ALLOCATOR</code></strong></p>
<ul>
<li>属于 <code>SocketChannal</code> 参数</li>
<li>用来配置 <code>ByteBuf</code> 是池化还是非池化，是直接内存还是堆内存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p><code>ByteBufAllocator</code>类型</p>
<ul>
<li>池化并使用直接内存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>池化并使用堆内存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>非池化并使用直接内存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>非池化并使用堆内存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<p><strong><code>RCVBUF_ALLOCATOR</code></strong></p>
<ul>
<li>属于 <code>SocketChannal</code> 参数</li>
<li>控制 <code>Netty</code> 接收缓冲区大小</li>
<li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 <code>direct</code> 直接内存，具体池化还是非池化由 <code>allocator</code> 决定</li>
</ul>
<h3> 3、RPC框架</h3>
<h3> 4、项目代码</h3>
<blockquote>
<p><a href="https://gitee.com/oucystong/netty-chat.git" target="_blank" rel="noopener noreferrer">https://gitee.com/oucystong/netty-chat.git</a></p>
</blockquote>
<h2> 二、源码</h2>
<h2> 三、参考</h2>
<ul>
<li><a href="https://nyimac.gitee.io/2021/04/25/Netty%E5%9F%BA%E7%A1%80/" target="_blank" rel="noopener noreferrer">https://nyimac.gitee.io/2021/04/25/Netty基础/</a></li>
<li><a href="https://www.bilibili.com/video/BV1py4y1E7oA/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1py4y1E7oA/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>tomcat服务器</title>
      <link>https://blog.lxip.top/notes/javacore/javaweb/javaweb_tomcat.html</link>
      <guid>https://blog.lxip.top/notes/javacore/javaweb/javaweb_tomcat.html</guid>
      <source url="https://blog.lxip.top/rss.xml">tomcat服务器</source>
      <description>1.HTTP协议简介 超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息 系统的应用层协议。HTTP是万维网的数据通信的基础。 HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会 （World Wide Web...</description>
      <category>java</category>
      <category>后端</category>
      <category>javaweb</category>
      <content:encoded><![CDATA[<h2> 1.HTTP协议简介</h2>
<p>超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息 系统的应用层协议。HTTP是万维网的数据通信的基础。 HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会 （World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协 调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的 一个版本——HTTP 1.1。</p>
<figure><figcaption>image-20221019161616266</figcaption></figure>
<h2> 2.HTTP 请求/响应的步骤</h2>
<p>2.1 客户端连接到Web服务器 一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。 例如:<a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">http://www.baidu.com</a>。</p>
<p>2.2 发送HTTP请求 通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求 数据4部分组成。</p>
<p>2.3 服务器接受请求并返回HTTP响应 Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响 应头部、空行和响应数据4部分组成。</p>
<p>2.4 释放TCP连接 在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就 中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、 图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p>
<p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客 户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时 间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。 HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p>
<p>2.5 客户端浏览器解析HTML内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若 干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在 浏览器窗口中显示。 例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>
<p>​	 1.浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>
<ol start="2">
<li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</li>
<li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个 报文的数据发送给服务器;</li>
<li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li>
<li>浏览器将该 html 文本并显示内容;</li>
</ol>
<figure><figcaption>image-20221019202244080</figcaption></figure>
<figure><figcaption>image-20221019202313587</figcaption></figure>
<h2> 3.HTTP请求方法</h2>
<p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p>
<p>GET</p>
<p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在 Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</p>
<p>HEAD</p>
<p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使 用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p>
<p>POST 向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求 可能会创建新的资源或修改现有资源，或二者皆有。 PUT 向指定资源位置上传其最新内容。</p>
<p>DELETE</p>
<p>请求服务器删除Request-URI所标识的资源。</p>
<p>TRACE</p>
<p>回显服务器收到的请求，主要用于测试或诊断。</p>
<p>OPTIONS</p>
<p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用'*'来代替资源名称，向Web服务器发送OPTIONS 请求，可以测试服务器功能是否正常运作。</p>
<p>CONNECT</p>
<h2> 4. 两种开发模型</h2>
<p>⑴C/S又称Client/Server或客户/服务器模式。服务器通常采用高性能的PC、工作站或小型机，客户端需要安装专 用的客户端软件。如QQ,微信等软件</p>
<p>B/S是Brower/Server的缩写，客户机上只要安装一个浏览器（Browser）。Browser/Server是建立在广域网的基 础上的.</p>
<p>⑵CS和BS结构各自的优、缺点</p>
<p>(1) C/S的优点是能充分发挥客户端PC的处理能力，很多工作可以在客户端处理后再提交给服务器。对应的优点就是 客户端响应速度快。</p>
<p>缺点主要有以下几个</p>
<ol>
<li>客户端需要安装专用的客户端软件。首先涉及到安装的工作量，其次任何一台电脑出问题，如病毒、硬件损坏， 都需要进行安装或维护。特别是有很多分部或专卖店的情况，不是工作量的问题，而是路程的问题。还有，系统软 件升级时，每一台客户机需要重新安装，其维护和升级成本非常高。</li>
<li>B/S最大的优点就是可以在任何地方进行操作而不用安装任何专门的软件。只要有一台能上网的电脑就能使用， 客户端零维护。系统的扩展非常容易，只要能上网，就可以使用了。甚至可以在线申请，通过公司内部的安全认证 （如CA证书）后，不需要人的参与，系统可以自动分配给用户一个账号进入系统。</li>
</ol>
<h2> 5. Web服务器的分类</h2>
<p>Web服务器是运行及发布Web应用的容器，只有将开发的Web项目放置到该容器中，才能使网络中的所有用户通过 浏览器进行访问。开发Java Web应用所采用的服务器主要是与JSP/Servlet兼容的Web服务器，比较常用的有 Tomcat、Resin、JBoss、WebSphere 和 WebLogic 等</p>
<p>Tomcat 服务器</p>
<p>​		目前最为流行的Tomcat服务器是Apache-Jarkarta开源项目中的一个子项目，是一个小型、轻量级的支持JSP和 Servlet 技术的Web服务器，也是初学者学习开发JSP应用的首选</p>
<p>Resin 服务器</p>
<p>​		Resin是Caucho公司的产品，是一个非常流行的支持Servlet和JSP的服务器，速度非常快。Resin本身包含了一 个支持HTML的Web服务器，这使它不仅可以显示动态内容，而且显示静态内容的能力也毫不逊色，因此许多网站 都是使用Resin服务器构建 JBoss服务器 JBoss是一个种遵从JavaEE规范的、开放源代码的、纯Java的EJB服务器，对于J2EE有很好的支持。JBoss采用 JML API实现软件模块的集成与管理，其核心服务又是提供EJB服务器，不包含Servlet和JSP的Web容器，不过它可 以和Tomcat完美结合</p>
<p>WebSphere 服务器</p>
<p>​		WebSphere是IBM公司的产品，可进一步细分为 WebSphere Performance Pack、Cache Manager 和 WebSphere Application Server等系列，其中WebSphere Application Server 是基于Java 的应用环境，可以运行 于 Sun Solaris、Windows NT 等多种操作系统平台，用于建立、部署和管理Internet和Intranet Web应用程序。</p>
<p>WebLogic 服务器</p>
<p>​		WebLogic 是BEA公司的产品（现在已经被Oracle收购），可进一步细分为 WebLogic Server、WebLogic Enterprise 和 WebLogic Portal 等系列，其中 WebLogic Server 的功能特别强大。WebLogic 支持企业级的、多层 次的和完全分布式的Web应用，并且服务器的配置简单、界面友好。对于那些正在寻求能够提供Java平台所拥有的 一切应用服务器的用户来说，WebLogic是一个十分理想的选择</p>
<h2> 6. Tomcat</h2>
<p>(1) Tomcat下载与安装</p>
<p>开源小型web服务器 ，完全免费，主要用于中小型web项目，只支持Servlet和JSP 等少量javaee规范（就是 JavaWeb编程接口）</p>
<p><a href="https://tomcat.apache.org" target="_blank" rel="noopener noreferrer">https://tomcat.apache.org</a></p>
<figure><figcaption>image-20221019203030315</figcaption></figure>
<p>下载好之后，安装到任意目录</p>
<p>安装步骤:</p>
<ol>
<li>
<p>下载Tomcat</p>
</li>
<li>
<p>解压到一个没有特殊符号的目录中（一般纯英文即可）</p>
</li>
<li>
<p>进入到解压的目录下找到bin\startup.bat双击启动即</p>
</li>
</ol>
<p>注意:不建议将服务器软件放在磁盘层次很多的文件夹中!</p>
<p>不建议放在中文路径下!</p>
<p>tomcat安装需要配置JAVA_HOME环境变量</p>
<p>(2)tomcat的目录</p>
<p>1、bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件： tomcat9.exe、tomcat9w.exe，前者是在控制台下启动Tomcat，后者是弹出UGI窗口启动Tomcat；如果是解压 版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要JDK的配置，shutdown.bat 用来停止Tomcat；</p>
<p>2、conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件： server.xml：配置整个服务器信息。例如修改端口号，添加虚拟主机等； tomcat-users.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以 按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</p>
<p>web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之 间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text/html类型 的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个 html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。 MIME就是用来说明文档的内容是什么类型的！</p>
<p>context.xml：对所有应用的统一配置，通常我们不会去配置它。</p>
<p>3、lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中， 当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到 其他Tomcat下时就不能再共享这个目录下的Jar包了，所以建议只把Tomcat需要的Jar包放到这个目录下；</p>
<p>4、logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会 记录在日志文件中。</p>
<p>5、temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！</p>
<p>6、webapps：存放web项目的目录，其中每个文件夹都是一个项目；如果这个目录下已经存在了目录，那么都是 tomcat自带的项目。其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目。</p>
<p><a href="http://localhost:8080/examples%EF%BC%8C%E8%BF%9B%E5%85%A5%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE%E3%80%82%E5%85%B6%E4%B8%ADexamples%E5%B0%B1%E6%98%AF%E9%A1%B9%E7%9B%AE%E5%90%8D%EF%BC%8C%E5%8D%B3%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%90%8D%E5%AD%97%E3%80%82" target="_blank" rel="noopener noreferrer">http://localhost:8080/examples，进入示例项目。其中examples就是项目名，即文件夹的名字。</a></p>
<p>7、work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内 容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文 件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</p>
<p>8、LICENSE：许可证。</p>
<p>9、NOTICE：说明文件。</p>
<p>通过url访问服务器:</p>
<p>url:<a href="http://xn--ip-fr5c86lw2a0cw16k83z" target="_blank" rel="noopener noreferrer">http://服务器的ip地址</a>:端口号/项目名/被访问的页面</p>
<p>示例:<a href="http://localhost:8080/test0918" target="_blank" rel="noopener noreferrer">http://localhost:8080/test0918</a></p>
<p>注: (1)启动tomcat后,tomcat会加载部署在服务器端的所有项目 (2) 浏览器访问的页面是服务器端的页面,基本上服务器的项目和工作空间的项目要保持一致</p>
<p>(3)IntelliJ IDEA配置Tomcat</p>
<p>1，点击Run---EDit Configurations...</p>
<figure><figcaption>image-20221019203439672</figcaption></figure>
<p>2.点击左侧“+”号，找到Tomcat Server---Local（若是没有找到Tomcat Server 可以点击最后一行 34 items more）</p>
<figure><figcaption>image-20221019203513219</figcaption></figure>
<p>3.在 To m c a t S e r v e r - &gt; lo c al- &gt; S e r v e r - &gt; A p plic a tio n s e r v e r 项 目 下 ，</p>
<p>点 击 C o n fi g u r a tio n ， 找 到 本 地 To m c a t 服 务器 ， 再 点 击 O K 按 钮。</p>
<figure><figcaption>image-20221019203639520</figcaption></figure>
<p>至此，IntelliJ IDEA配置Tomcat完成。</p>
<h2> 7.创建JavaWeb项目</h2>
<p>1.点击左上角的File--&gt;New--&gt;Project</p>
<figure><figcaption>image-20221019203720789</figcaption></figure>
<p>2.找到Java Enterprise之后，在Application Sever中找到自己的Tomcat，同时勾选中Web Application</p>
<figure><figcaption>image-20221019203813333</figcaption></figure>
<figure><figcaption>image-20221019203832981</figcaption></figure>
<figure><figcaption>image-20221019203846547</figcaption></figure>
<figure><figcaption>image-20221019203905499</figcaption></figure>
<p>3.第一项是你的工程名字，第二个是你的工程路径，选择好之后点击finish</p>
<figure><figcaption>image-20221019203930565</figcaption></figure>
<p>4.创建classes和lib文件夹，名字不可改</p>
<figure><figcaption>image-20221019203956429</figcaption></figure>
<p>像这样</p>
<figure><figcaption>image-20221019204016620</figcaption></figure>
<p>5.配置jar包和classes包：</p>
<p>5.1 在File中找到Project Structure</p>
<figure><figcaption>image-20221019204047645</figcaption></figure>
<p>5.2 点击Modules ,选择Paths,选中Use module compile output path ,把路径改成刚刚创建的classes文件夹</p>
<figure><figcaption>image-20221019204147211</figcaption></figure>
<p>5.3 ok后再点旁边的Dependencies,点击"+"号，选择1 JARs or directories ，</p>
<figure><figcaption>image-20221019204206238</figcaption></figure>
<p>5.4，选择你刚刚创建的lib文件夹，OK</p>
<figure><figcaption>image-20221019204245649</figcaption></figure>
<p>5.5 选中jar Directory。</p>
<figure><figcaption>image-20221019204307664</figcaption></figure>
<p>6.部署项目:将本地项目安装到服务器中</p>
<p>6.1回到主界面后，点击Run ，选择Edit Configurations</p>
<figure><figcaption>image-20221019204337067</figcaption></figure>
<p>6.2 看tomcat已经有啦，这是java Enterprise的好处啦，点击Deployment ,</p>
<figure><figcaption>image-20221019204357450</figcaption></figure>
<p>6.3点击右上角的三角形</p>
<figure><figcaption>image-20221019204441171</figcaption></figure>
<p>6.4 运行成功。</p>
<p>至此，intellij idea创建并设置javaweb工程全部完成</p>
<h2> 8.修改端口号</h2>
<p>修改配置文件:/conf/server.xml</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将端口号改成80,则访问项目时的请求路径就可以省略端口号。</p>
<h2> 9.tomcat如何管理项目</h2>
<p>给tomcat增加管理员信息:</p>
<p>配置conf/tomcat-users.xml</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:tomcat启动的时候会加载webapps下的所有项目</p>
]]></content:encoded>
    </item>
  </channel>
</rss>